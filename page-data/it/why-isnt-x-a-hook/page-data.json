{"componentChunkName":"component---src-templates-blog-post-js","path":"/it/why-isnt-x-a-hook/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"70a12575-5851-598a-91b6-a7f25e2774be","html":"<p>Sin da quando la versione alpha di <a href=\"https://reactjs.org/hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Hooks</a> è stata rilasciata, vi è una domanda che continua ad emergere in varie discussioni: “Perché <em>&#x3C;API a tua scelta></em> non è un Hook?”</p>\n<p>Come promemoria, ecco alcuni esempi di Hook <em>validi</em>:</p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useState()</code></a> ti permette di dichiarare una variabile di stato.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useEffect()</code></a> ti permette di dichiarare un effetto collaterale.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useContext()</code></a> ti permette di leggere un contesto.</li>\n</ul>\n<p>Esistono però alcune API, come <code class=\"language-text\">React.memo()</code> e <code class=\"language-text\">&lt;Context.Provider&gt;</code>, che <em>non sono</em> un Hook. Alcune implementazioni in forma di Hook proposte per questi due esempi, sarebbero <em>non-composizionali</em> o <em>antimodulari</em>. In questo articolo cercheremo di capire perché.</p>\n<p><strong>Nota: questo post è una discussione più in dettaglio per chi è interessato allo sviluppo di API. Nulla di ciò che viene discusso è essenziale per essere produttivo con React!</strong></p>\n<hr>\n<p>Vi sono due proprietà importanti che vogliamo preservare nella API di React:</p>\n<ol>\n<li><strong>Composizione:</strong> Gli <a href=\"https://reactjs.org/docs/hooks-custom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hook Personalizzati</a> sono uno dei motivi principali per cui siamo entusiasti di aver introdotto una API per Hook. Ci aspettiamo di vedere diversi sviluppatori creare i propri Hook, e dobbiamo assicurarci che Hook creati da persone diverse <a href=\"/why-do-hooks-rely-on-call-order/#flaw-4-the-diamond-problem\">non siano in conflitto</a>. (Non ci sentiamo viziati da come le componenti in React si compongono in maniera così’ chiare senza interferire l’una con l’altra?)</li>\n<li><strong>Debuggabilità:</strong> Vogliamo che i bug siano <a href=\"/the-bug-o-notation/\">facili da trovare</a> man mano che l’applicazione cresce. Una delle caratteristiche migliori di React è che se noti qualcosa renderizzato in maniera scorretta, puoi navigare l’albero delle componenti finché non trovi la proprietà o lo stato che ha causato il problema.</li>\n</ol>\n<p>Questi due vincoli messi insieme indicano cosa <em>può</em> e cosa <em>non può</em> essere un Hook. Proviamo alcuni esempi per chiarire.</p>\n<hr>\n<h2 id=\"un-vero-hook-usestate\"><a href=\"#un-vero-hook-usestate\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Un Vero Hook: <code class=\"language-text\">useState()</code></h2>\n<h3 id=\"composizione\"><a href=\"#composizione\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composizione</h3>\n<p>Hook personalizzati diversi che invocano <code class=\"language-text\">useState()</code> non confliggono:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Quel che succede qui, rimane qui.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Quel che succede qui, rimane qui.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aggiungere una chiamata a <code class=\"language-text\">useState()</code> che non dipenda da alcun condizionale è sempre un’operazione sicura. Non hai bisogno di sapere nulla riguardo ad altri Hook utilizzati da una componente per dichiarare una nuova variabile di stato. Inoltre, non puoi compromettere altre variabili di stato durante l’aggiornamento di una di esse.</p>\n<p><strong>Verdetto:</strong> ✅ <code class=\"language-text\">useState()</code> non rende gli Hook personalizzati fragili.</p>\n<h3 id=\"debuggabilità\"><a href=\"#debuggabilit%C3%A0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debuggabilità</h3>\n<p>Gli Hook sono utili perché puoi passare valori <em>tra</em> di loro:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isMobile</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> isMobile <span class=\"token operator\">=</span> width <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MOBILE_VIEWPORT</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span>isMobile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ma cosa succede se faccio un errore ? Come possiamo debuggarlo ?</p>\n<p>Supponiamo che la classe CSS ottenuta da <code class=\"language-text\">theme.comment</code> sia sbagliata. Come possiamo debuggare questo errore? Potremmo impostare qualche breakpoint o qualche log all’interno della nostra componente.</p>\n<p>Forse ci rendiamo conto che <code class=\"language-text\">theme</code> è sbagliato ma <code class=\"language-text\">width</code> e <code class=\"language-text\">isMobile</code> sono corretti. Questo ci suggerisce che il problema sia all’interno di <code class=\"language-text\">useTheme()</code>. O forse notiamo che <code class=\"language-text\">width</code> è sbagliato. Questo ci suggerisce di investigare all’interno di <code class=\"language-text\">useWindowWidth()</code>.</p>\n<p><strong>Un primo sguardo ai valori intermedi ci dice quale Hook al livello più alto contiene il bug</strong>. Non abbiamo bisogno di guardare all’interno di <em>tutti</em> gli Hook.</p>\n<p>Dopo questo primo sguardo possiamo “concentrarci” su quello contenente il bug, e ripetere.</p>\n<p>Questo processo diventa più importante se gli Hook personalizzati si annidano a maggiore profondità. Immagina se avessimo 3 livelli di Hook personalizzati, ciascuno di questi livelli utilizza 3 diversi Hook personalizzati al loro interno. La <a href=\"/the-bug-o-notation/\">differenza</a> tra cercare un bug in <strong>3 posti diversi</strong> rispetto a cercare potenzialmente <strong>3 + 3×3 + 3×3×3 = 39 posti diversi</strong> è enorme. Fortunatamente, <code class=\"language-text\">useState()</code> non può magicamente “influenzare” altri Hook o componenti. Se ritorna un valore buggato, lascerà una traccia alle sue spalle, come qualsiasi altra variabile. 🐛</p>\n<p><strong>Verdetto:</strong> ✅ <code class=\"language-text\">useState()</code> non nasconde la relazione di causa-effetto nel nostro codice. Possiamo seguire gli indizi che ci portano direttamente all’origine del bug.</p>\n<hr>\n<h2 id=\"non-un-vero-hook-usebailout\"><a href=\"#non-un-vero-hook-usebailout\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non un vero Hook: <code class=\"language-text\">useBailout()</code></h2>\n<p>Come ottimizzazione, le componenti che usano Hook possono evitare ri-renderizzazione.</p>\n<p>Tale ottimizzazione la possiamo ottenere avvolgendo l’intera componente in <a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html#reactmemo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">React.memo()</code></a>. In questo modo possiamo evitare ri-renderizzazione se le props sono superficialmente uguali all’ultima renderizzazione. Un comportamento simile lo abbiamo visto per le componenti in forma di classe tramite <code class=\"language-text\">PureComponent</code>.</p>\n<p><code class=\"language-text\">React.memo()</code> riceve una componente e ritorna una componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><strong>Ma perché non é un Hook?</strong></p>\n<p>Indipendentemente dal chiamarla <code class=\"language-text\">useShouldComponentUpdate()</code>, <code class=\"language-text\">usePure()</code>, <code class=\"language-text\">useSkipRender()</code>, o <code class=\"language-text\">useBailout()</code>, l’approccio proposto tende a prendere la seguente forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ⚠️ Non una vera API</span>\n  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevColor</span> <span class=\"token operator\">=></span> prevColor <span class=\"token operator\">!==</span> color<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'button-'</span> <span class=\"token operator\">+</span> color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n      OK\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esistono alcune variazioni aggiuntive (e.g. un semplice <code class=\"language-text\">usePure()</code>) ma in generale, hanno tutti gli stessi difetti.</p>\n<h3 id=\"composizione-1\"><a href=\"#composizione-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composizione</h3>\n<p>Proviamo ad inserire <code class=\"language-text\">useBailout()</code> in due Hook personalizzati:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ Non una vera API</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevIsOnline</span> <span class=\"token operator\">=></span> prevIsOnline <span class=\"token operator\">!==</span> isOnline<span class=\"token punctuation\">,</span> isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleStatusChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">status</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ Non una vera API</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevWidth</span> <span class=\"token operator\">=></span> prevWidth <span class=\"token operator\">!==</span> width<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleResize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>'resizé<span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>'resizé<span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cosa succede se li usi entrambi nella stessa componente ?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Typing...'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando avviene la re-renderizzazione ?</p>\n<p>Se ogni chiamata a <code class=\"language-text\">useBailout()</code> avesse la capacità di evitare un aggiornamento, gli aggiornamenti provenienti da <code class=\"language-text\">useWindowWidth()</code> sarebbero bloccati da <code class=\"language-text\">userFriendStatus()</code>, e vice versa. <strong>Questi Hook si danneggiano l’un l’altro</strong>.</p>\n<p>Tuttavia, se <code class=\"language-text\">useBailout()</code> fosse rispettato solo quando <em>tutte</em> le chiamate all’interno di una singola componente <em>concordano</em> nel bloccare un aggiornamento, il nostro <code class=\"language-text\">ChatThread</code> fallirebbe l’aggiornamento durante cambiamenti della proprietà <code class=\"language-text\">isTyping</code>.</p>\n<p>Peggio ancora, con questa semantica <strong>qualsiasi nuovo Hook aggiunto a <code class=\"language-text\">ChatThread</code> fallirebbe se <em>anch’esso</em> non eseguisse una chiamata a <code class=\"language-text\">useBailout()</code></strong>. Altrimenti, non possono <em>votare contro</em> il bailout all’interno di <code class=\"language-text\">useWindowWidth()</code> e <code class=\"language-text\">useFriendStatus()</code>.</p>\n<p><strong>Verdetto:</strong> 🔴 <code class=\"language-text\">useBailout()</code> rovina la composizione. Aggiungerlo ad un Hook fa fallire gli aggiornamento di stato in altri Hook. Vogliamo che ogni API sia <a href=\"/optimized-for-change/\">antifragile</a>, e tale comportamento rappresenta l’esatto opposto.</p>\n<h3 id=\"debuggabilità-1\"><a href=\"#debuggabilit%C3%A0-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debuggabilità</h3>\n<p>In che modo l’Hook <code class=\"language-text\">useBailout()</code> influenza la debugabbilità?</p>\n<p>Proviamo ad usare lo stesso esempio:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Typing...'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Supponiamo che il testo <code class=\"language-text\">Typing...</code> non appaia quando ci aspettiamo, malgrado il fatto che in qualche livello superiore la proprietà sia stata cambiata. Come possiamo debuggare questo errore?</p>\n<p><strong>Normalmente, in React puoi rispondere a questa domanda con una certa confidenza semplicemente risalendo l’albero delle componenti</strong>. Se <code class=\"language-text\">ChatThread</code> non ottiene un nuovo valore per <code class=\"language-text\">isTyping</code>, possiamo guardare all’interno della componente che renderizza  <code class=\"language-text\">&lt;ChatThread isTyping={myVar} /&gt;</code>, controllare <code class=\"language-text\">myVar</code>, e così via. In uno di questi livelli, o scopriamo che un bailout in <code class=\"language-text\">shouldComponentUpdate</code> è buggato, oppure è stato inoltrato un valore incorretto per <code class=\"language-text\">isTyping</code>. Un semplice sguardo a ciascuna componente lungo questa catena è sufficiente a individuare l’origine del problema.</p>\n<p>Tuttavia, se <code class=\"language-text\">useBailout()</code> fosse un vero Hook, non saresti mai in grado di sapere la ragione per cui viene saltato un aggiornamento. L’unica soluzione sarebbe di controllare <em>ciascun singolo Hook personalizzato</em> (in profondità) usato da <code class=\"language-text\">ChatThread</code> e da tutte le componenti risalendo l’albero. Poiché <em>anche</em> ogni componente parente può usare Hook personalizzati, il problema <a href=\"/the-bug-o-notation/\">cresce</a> in maniera terribile.</p>\n<p>E’ come se tu stessi cercando un cacciavite in una cassettiera, e ciascuno cassetto contenesse un paio di piccole cassettiere, e non sai mai quanto è profonda la tana del coniglio.</p>\n<p><strong>Verdetto:</strong> 🔴 Non soltanto l’Hook <code class=\"language-text\">useBailout()</code> rovina la composizione, ma aumenta drasticamente il numero di passi necessari per debuggare. Inoltre il peso cognitivo per trovare un bailout buggato (in alcuni casi), cresce anch’esso a livello esponenziale.</p>\n<hr>\n<p>Abbiamo appena osservato un Hook vero e proprio, <code class=\"language-text\">useState()</code>, e un suggerimento comune che <em>non</em> è un Hook intenzionalmente - <code class=\"language-text\">useBailout()</code>. Abbiamo confrontato questi Hook dal punto di vista della Composizione e Debuggabilità, e discusso il motivo per cui uno dei due funziona e l’altro no.</p>\n<p>Sebbene non ci sia una <em>versione in forma di Hook</em> di <code class=\"language-text\">memo()</code> o <code class=\"language-text\">shouldComponentUpdate()</code>, React <em>fornisce</em> un Hook chiamato <a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useMemo()</code></a>. Lo scopo è molto simile, ma la semantica è sufficientemente diversa da non cadere vittima dei vari problemi menzionati.</p>\n<p><code class=\"language-text\">useBailout()</code> è un semplice esempio di qualcosa che non funziona bene in forma di Hook. Altri esempi simili sono: <code class=\"language-text\">useProvider()</code>, <code class=\"language-text\">useCatch()</code>, o <code class=\"language-text\">useSuspense()</code>.</p>\n<p>Riesci a capire come mai?</p>\n<p><em>(Bisbigliando: Composizione… Debuggabilità…)</em></p>","timeToRead":8,"frontmatter":{"title":"Perché X non è un hook?","date":"January 26, 2019","spoiler":"Solo perché possiamo, non significa che dobbiamo.","cta":null},"fields":{"slug":"/it/why-isnt-x-a-hook/","langKey":"it"}}},"pageContext":{"slug":"/it/why-isnt-x-a-hook/","translations":["de","es","fr","it","ko","pt-br","zh-hans"],"translatedLinks":[]}}}