{"componentChunkName":"component---src-templates-blog-post-js","path":"/sr/why-do-we-write-super-props/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"00abeea1-aa8b-5912-bfd9-c762ddfd44e8","html":"<p>ƒåuo sam da su <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hukovi</a> sada u modi. Ironiƒçno je, ali hoƒáu da zapoƒçnem ovaj blog priƒçom o zanimljivim stvarima vezanim za <em>klasne</em> komponente. Ma vidi ti to!</p>\n<p><strong>Ove smicalice <em>nisu</em> va≈æne za produktivnost u React-u. Ali mo≈æda vam bude zabavno da malo dublje proƒçaƒçkate kako stvari rade.</strong></p>\n<p>Evo prve.</p>\n<hr>\n<p>Napisao sam <code class=\"language-text\">super(props)</code> vi≈°e puta u ≈æivotu nego ≈°to bih hteo da znam:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Naravno, <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">predlog o poljima klase (class fields)</a> nam omoguƒáava da preskoƒçimo ovu ceremoniju:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ovakva sintaksa je bila <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">planirana</a> kada je 2015. godine u verziji 0.13 dodata podr≈°ka za obiƒçne klase. Definisanje konstruktora i poziv <code class=\"language-text\">super(props)</code> je oduvek i trebalo da bude samo privremeno re≈°enje, dok polja klase ne postanu zadovoljavajuƒáa alternativa.</p>\n<p>Ali da se vratimo na ovaj primer koji koristi samo stvari iz ES2015:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Za≈°to zovemo <code class=\"language-text\">super</code>? Da li mo≈æemo da ga <em>ne</em> pozovemo? Ako moramo, ≈°ta se desi kad ne prosledimo <code class=\"language-text\">props</code>? Ima li jo≈° argumenata?</strong> Hajde da vidimo.</p>\n<hr>\n<p>U JavaSkriptu, <code class=\"language-text\">super</code> pokazuje na konstruktor roditeljske klase. (U na≈°em primeru, pokazuje na implementaciju <code class=\"language-text\">React.Component</code>).</p>\n<p>Va≈æno je obratiti pa≈ænju na to da <code class=\"language-text\">this</code> ne mo≈æe da se koristi u konstrukturu sve dok se ne pozove <em>roditeljski</em> konstruktor. JavaSkript neƒáe da vam dozvoli to:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// üî¥ Jo≈° ne smemo da koristimo `this`</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ‚úÖ Ali sad je okej</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Postoji dobar razlog za≈°to JavaSkript primorava pozivanje roditeljskog konstruktora pre nego ≈°to se petlja oko <code class=\"language-text\">this</code>-a. Zamislite ovakvu hijerarhiju:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Osoba</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ime <span class=\"token operator\">=</span> ime<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">U</span>ƒçtivaOsoba <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Osoba</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pozdraviKolege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üî¥ Ovo nije dozvoljeno, vidi dole za≈°to</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>ime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">pozdraviKolege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dobro jutro, narode!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Zamislimo da <code class=\"language-text\">this</code> pre <code class=\"language-text\">super</code> ipak <em>jeste</em> dozvoljeno. Mesec dana kasnije, mo≈æda promenimo <code class=\"language-text\">pozdraviKolege</code> da sadr≈æi i ime osobe u poruci:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">pozdraviKolege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dobro jutro, narode!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ja sam '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ime <span class=\"token operator\">+</span> <span class=\"token string\">', drago mi je!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ali zaboravili smo da se <code class=\"language-text\">this.pozdraviKolege()</code> zove pre nego ≈°to poziv funkcije <code class=\"language-text\">super()</code> stigne da postavi <code class=\"language-text\">this.ime</code>. Znaƒçi da <code class=\"language-text\">this.ime</code> jo≈° nije ni definisano! Kao ≈°to vidite, o ovakvom kodu je jako te≈°ko razmi≈°ljati.</p>\n<p>Da se ne bismo opekli, <strong>JavaSkript nas <em>tera</em> prvo da pozovemo <code class=\"language-text\">super</code>, ako hoƒáemo da koristimo <code class=\"language-text\">this</code> u konstruktoru.</strong> Neka roditelj prvo obavi svoje! A ovo ograniƒçenje va≈æi i za React komponente definisane kao klase:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ‚úÖ Ovde ispod mo≈æemo da koristimo `this`</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ali i dalje je ostalo jedno pitanje: za≈°to prosleƒëujemo <code class=\"language-text\">props</code>?</p>\n<hr>\n<p>Mo≈æda se ƒçini da je prosleƒëivanje <code class=\"language-text\">props</code>-a <code class=\"language-text\">super</code>-u obavezno da bi konstruktor osnovne klase <code class=\"language-text\">React.Component</code> mogao da inicijalizuje <code class=\"language-text\">this.props</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// React-ov k√¥d</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I to nije daleko od istine: tako i <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">radi</a>.</p>\n<p>Ali nekako, ƒçak i kad pozovete <code class=\"language-text\">super()</code> bez argumenta <code class=\"language-text\">props</code>, i dalje mo≈æete da pripstupite <code class=\"language-text\">this.props</code> u <code class=\"language-text\">render</code>-u i drugim metodama. (Ako mi ne verujete, probajte sami!)</p>\n<p>A kako <em>to</em> radi? Ispostavlja se da <strong>i React dodeljuje <code class=\"language-text\">props</code> instanci odmah nakon ≈°to pozove <em>va≈°</em> konstruktor:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// React-ov k√¥d</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Va</span><span class=\"token function\">≈°aKomponenta</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Prema tome, ƒçak i da zaboravite da prosledite <code class=\"language-text\">props</code> kad zovete <code class=\"language-text\">super()</code>, React ƒáe ih ipak dobro postaviti kasnije. A postoji i razlog za to.</p>\n<p>Kad je React dodao podr≈°ku za klase, nije dodao podr≈°ku samo za ES6 klase. Cilj je bio naj≈°iri moguƒái opseg apstrakcija klasa. <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nije bilo jasno</a> koliko ƒáe uspe≈°na biti re≈°enja za definisanje komponenti kao ≈°to su ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript, i druga. Zato React namerno nije donosio odluku o tome da li se <code class=\"language-text\">super()</code> mora pozvati ili ne (iako je poziv obavezan kod ES6 klasa).</p>\n<p>Da li to onda znaƒçi da mo≈æete da napi≈°ete <code class=\"language-text\">super()</code> umesto <code class=\"language-text\">super(props)</code>?</p>\n<p><strong>Verovatno ne jer je i dalje zbunjujuƒáe.</strong> Da, React ƒáe <em>nakon</em> izvr≈°etka va≈°eg konstruktora da izvr≈°i dodelu u <code class=\"language-text\">this.props</code>. Ali <code class=\"language-text\">this.props</code> ƒáe i dalje biti nedefinisano <em>izmeƒëu</em> poziva <code class=\"language-text\">super</code> i kraja konstruktora:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// React-ov kod</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Inside your code</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üò¨ Zaboravili smo na props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ‚úÖ {}</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üò¨ undefined </span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ovo mo≈æe biti jo≈° te≈æe za debagiranje ako se desi u nekoj metodi koju <em>zove</em> konstruktor. <strong>I zato se uvek preporuƒçuje da se prosledi <code class=\"language-text\">super(props)</code>, iako nije striktno obavezno:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‚úÖ Prosledili smo props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ‚úÖ {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‚úÖ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ovim smo se osigurali da je <code class=\"language-text\">this.props</code>-u dodeljena vrednost ƒçak i pre nego ≈°to se izaƒëe iz konstruktora.</p>\n<hr>\n<p>Ima jo≈° jedna stvar koja mo≈æda zanima one koji React koriste du≈æe vreme.</p>\n<p>Mo≈æda ste primetili da, kada koristite Context API u klasama (bilo sa zaostav≈°tinom <code class=\"language-text\">contextTypes</code> ili sa modernim <code class=\"language-text\">contextType</code> API-jem dodatim u verziji 16.6), <code class=\"language-text\">context</code> se prosleƒëuje kao drugi agrument konstruktora.</p>\n<p>Za≈°to onda ne pi≈°emo <code class=\"language-text\">super(props, context)</code>? Mogli bismo, ali kontekst se koristimo mnogo reƒëe pa se cela ova zavrzlama reƒëe de≈°ava.</p>\n<p><strong>Sve to svakako nestaje kad se uzme u obzir predlog o poljima klase.</strong> Bez eksplicitnog konstruktora, svi argumenti se automatski prosleƒëuju. Ovo omoguƒáava da izrazi kao <code class=\"language-text\">state = {}</code> ukljuƒçe reference na <code class=\"language-text\">this.props</code> ili <code class=\"language-text\">this.context</code> ako je to neophodno.</p>\n<p>Sa hukovima, nemamo ni <code class=\"language-text\">super</code> ni <code class=\"language-text\">this</code>. Ali to je priƒça za drugi put.</p>","timeToRead":5,"frontmatter":{"title":"Za≈°to pi≈°emo super(props)?","date":"November 30, 2018","spoiler":"Ima jedan obrt na kraju.","cta":null},"fields":{"slug":"/sr/why-do-we-write-super-props/","langKey":"sr"}}},"pageContext":{"slug":"/sr/why-do-we-write-super-props/","translations":["cs","de","fr","fa","es","hu","it","ja","my","nb","sr","pl","sk","pt-br","nl","th","uk","vi","tr","zh-hant","zh-hans"],"translatedLinks":[]}}}