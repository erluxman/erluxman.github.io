{"componentChunkName":"component---src-templates-blog-post-js","path":"/nb/why-do-we-write-super-props/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"b11197a7-9356-5715-b9ee-fe6fb09be78a","html":"<p>Jeg h√∏rte at <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> er p√• moten. Ironisk nok vil jeg heller starte denne bloggen med √• snakke om morsomme fakta om <em>klasse</em> komponenter. Tenke seg til!</p>\n<p><strong>Disse <a href=\"https://en.wikipedia.org/wiki/Gotcha_(programming)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gotcha‚Äôene</a> er <em>ikke</em> viktige for √• kunne bruke React produktivt, men de kan appellere til deg dersom du liker √• komme til bunns i hvordan ting funker.</strong></p>\n<p>Her er den f√∏rste.</p>\n<hr>\n<p>Jeg har skrevet <code class=\"language-text\">super(props)</code> flere ganger i mitt liv enn jeg vil vite:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Selvf√∏lgelig, <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">forslaget til class fields</a> lar oss hoppe over seremonien:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>og denne syntaksen var <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">planlagt</a> da React 0.13 la til st√∏tte for vanlige klasser i 2015. Det √• definere en <code class=\"language-text\">constructor</code> ogs√• kalle <code class=\"language-text\">super(props)</code> var alltid ment til √• v√¶re en midlertidig l√∏sning, frem til klassefeltene (class fields) kunne bidra med et ergonomisk alternativ.</p>\n<p>Allikevel, la oss ta for oss dette eksemplet ved √• bare bruke ES2015 egenskaper:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Hvorfor kaller vi p√• <code class=\"language-text\">super</code>? Kan vi velge √• <em>ikke</em> kalle p√• den? Hvis vi kaller p√• den, hva skjer hvis vi ikke sender med <code class=\"language-text\">props</code>?\nFinnes det andre parametre?</strong> La oss finne ut av det.</p>\n<hr>\n<p>I JavaScript, refererer <code class=\"language-text\">super</code> til parent-klasse konstrukt√∏ren. (I v√•rt eksempel peker den p√• <code class=\"language-text\">React.Component</code> implementasjonen.)</p>\n<p>Her er det viktig √• nevne at du ikke kan bruke <code class=\"language-text\">this</code> i en konstrukt√∏r <em>f√∏r</em> du har kalt p√• parent konstrukt√∏ren. JavaScript tillater det ikke:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// üî¥ Kan ikke bruke `this` enda</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ‚úÖ Herfra g√•r det bra</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Og det er med god grunn at JavaScript krever at parent konstrukt√∏ren kj√∏rer f√∏r du r√∏rer <code class=\"language-text\">this</code>. Se for deg f√∏lgende klassehierarki:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üî¥ Dette er ikke lov, les hvorfor nedenfor</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'God morgen folkens!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Forestill deg at det <em>var</em> tillat √• bruke <code class=\"language-text\">this</code> f√∏r <code class=\"language-text\">super</code>-kallet. En m√•ned senere, kan det hende vi endrer <code class=\"language-text\">greetColleagues</code> slik at den inkluderer personens navn:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'God morgen folkens!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mitt navn er'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', hyggelig √• m√∏te dere!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Men vi glemte at <code class=\"language-text\">this.greetColleagues()</code> blir kalt f√∏r <code class=\"language-text\">super()</code>-kallet hadde en sjanse til √• sette opp <code class=\"language-text\">this.name</code>. S√• <code class=\"language-text\">this.name</code> er ikke definert enda! Som du skj√∏nner, kan kode som dette bli veldig vanskelig √• holde styr p√•.</p>\n<p>For √• unng√• slike fallgruver, <strong>krever JavaScript at hvis du vil bruke <code class=\"language-text\">this</code> i en konstrukt√∏r, <em>m√• du</em> kalle <code class=\"language-text\">super</code> f√∏rst.</strong> La parenten gj√∏re greia si! Denne begrensningen gjelder for React komponenter som er definert som klasser ogs√•:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ‚úÖ Okay √• bruke `this` n√•</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Dette f√∏rer oss videre til neste sp√∏rsm√•l: hvorfor sende <code class=\"language-text\">props</code>?</p>\n<hr>\n<p>Du tenker kanskje at √• sende <code class=\"language-text\">props</code> til <code class=\"language-text\">super</code> er n√∏dvendig for at den underliggende <code class=\"language-text\">React.Component</code> konstrukt√∏ren skal kunne initiere <code class=\"language-text\">this.props</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inne i React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Og det er ikke langt fra sannheten ‚Äî det er nemlig <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">akkurat det den gj√∏r</a>.</p>\n<p>Men p√• en eller annen m√•te, selv om du kaller <code class=\"language-text\">super()</code> uten <code class=\"language-text\">props</code> parameteren, kan du fortsatt akksesere  <code class=\"language-text\">this.props</code> i <code class=\"language-text\">render</code> og andre metoder. (Hvis du ikke tror p√• meg kan du jo pr√∏ve det selv!)</p>\n<p>Hvordan funker <em>det</em>? Det viser seg at <strong>React ogs√• tildeler <code class=\"language-text\">props</code> til instansen rett etter den kaller p√• <em>din</em> konstrukt√∏r:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// Inne i React</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>S√• selv om du glemmer √• sende <code class=\"language-text\">props</code> til <code class=\"language-text\">super()</code>, vil React uansett initiere dem rett etterp√•, og det er en grunn til dette.</p>\n<p>Da React la til st√∏tte for klasser, la den ikke bare til st√∏tte for ES6 klasser. M√•let var √• st√∏tte s√• mange klasseabtrasksjoner som overhode mulig. Det var imidlertid <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">uklart</a> hvor velykket ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript, eller andre l√∏sninger ville v√¶re for √• definere komponenter. Dermed hadde React helt bevisst ingen formening om det skulle v√¶re et krav √• kalle <code class=\"language-text\">super()</code> ‚Äî selv om ES6 klasser krever det.</p>\n<p>S√• betyr dette at man bare kan skrive <code class=\"language-text\">super()</code> istedenfor <code class=\"language-text\">super(props)</code>?</p>\n<p><strong>Egentlig ikke, da dette fortsatt er forvirrende.</strong> Selv om React vil tildele <code class=\"language-text\">this.props</code> verdier <em>etter</em> at konstrukt√∏ren din kj√∏rer, vil <code class=\"language-text\">this.props</code> fortsatt v√¶re udefinert <em>mellom</em> <code class=\"language-text\">super</code> kallet og slutten p√• konstukt√∏ren din:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inne i React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Inne i din kode</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üò¨ Vi glemte √• sende med props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ‚úÖ {}</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üò¨ udefinert</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Og det kan v√¶re enda mer utfordrende √• debugge dette hvis det skjer i en metode som er kalt <em>fra</em> konstruk√∏tren. <strong>Derfor anbefaler jeg p√• det sterkeste √• alltid bruke <code class=\"language-text\">super(props)</code>, selv om det strengt tatt ikke er n√∏dvendig:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‚úÖ Vi sendte props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ‚úÖ {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‚úÖ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>P√• denne m√•ten er vi helt sikre p√• at <code class=\"language-text\">this.props</code> er definert, ogs√• f√∏r man g√•r ut av konstrukt√∏ren.</p>\n<hr>\n<p>Det er en siste ting som langvarige React-brukere kanskje er nysgjerrige p√•.</p>\n<p>Du har kanskje merket at n√•r du bruker Context APIet i klasser (enten med den utdaterte <code class=\"language-text\">contextTypes</code>, eller det moderne <code class=\"language-text\">contextType</code> APIet som ble lagt til i React 16.6), blir ogs√• <code class=\"language-text\">context</code> sendt som en parameter til konstrukt√∏ren.</p>\n<p>Hvorfor skriver vi ikke da <code class=\"language-text\">super(props, context)</code> isteden? Vi kunne ha gjort det, men context brukes mye mindre en props, og dermed oppst√•r alts√• fallgruven heller ikke s√• ofte.</p>\n<p><strong>Dessuten forsvinner denne fallgruven mer eller mindre helt med forslaget til class fields som ble nevnt tidligere.</strong> Ettersom vi ikke eksplitsitt lager en konstrukt√∏r, vil alle parameterene bli sendt automatisk. Det er ogs√• denne funksjonaliteten som tillater en kodesnutt som <code class=\"language-text\">state = {}</code> √• fortsatt inkludere referanser til <code class=\"language-text\">this.props</code> eller <code class=\"language-text\">this.context</code> om n√∏dvendig.</p>\n<p>N√•r det kommer til Hooks, har vi ikke <code class=\"language-text\">super</code> eller <code class=\"language-text\">this</code> engang, men det er et tema for en annen dag.</p>","timeToRead":5,"frontmatter":{"title":"Hvorfor Skriver Vi super(props)?","date":"November 30, 2018","spoiler":"Den som venter p√• noe godt, venter ikke forgjeves.","cta":null},"fields":{"slug":"/nb/why-do-we-write-super-props/","langKey":"nb"}}},"pageContext":{"slug":"/nb/why-do-we-write-super-props/","translations":["cs","de","es","fr","fa","it","ja","hu","my","nl","nb","sk","pl","sr","pt-br","vi","tr","th","uk","zh-hans","zh-hant"],"translatedLinks":[]}}}