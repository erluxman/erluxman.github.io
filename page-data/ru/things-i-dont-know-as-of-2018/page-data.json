{"componentChunkName":"component---src-templates-blog-post-js","path":"/ru/things-i-dont-know-as-of-2018/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"22ca55ce-7029-5f5c-8bcc-d162dca812ad","html":"<p>Люди часто принимают меня за какого-то всезнайку. В общем-то, я не жалуюсь. (Уж лучше это, чем предрассудки, с которыми сталкиваются мои талантливые друзья.)</p>\n<p>Этот пост — про технологии, в которых я полный чайник. Это не значит, что им не <em>стоит</em> учиться, или что я <em>вообще</em> ни в чем не смыслю. Но пока мне не нужно бегать по интервью, я могу позволить себе быть честным.</p>\n<p>Зачем вообще о таком писать?</p>\n<hr>\n<p>Во-первых, распространено нелепое представление, что опытные разработчики лично знают каждую закорючку в пределах своего поля. Диаграммы типа «фронтэнд в 2018» по изощренности напоминают черновики Толкина. Но ведь сайты делать — это не в Мордор ходить.</p>\n<p>Даже фронтэндеры стопятьсотого уровня находятся в суперпозиции трех состояний: «вроде работает», «ай да Пушкин», и «сейчас коллеги спалят, что я не знаю флексбокс». Настроение зависит от проекта, команды, склада ума, времени дня, зарплаты и фазы Сатурна.</p>\n<p>Иногда среди твиттерати начинается пьянка за то, как «мы все новички». Но есть большая разница между опытным хирургом, у которого в животе бабочки, и студентом, впервые взявшим скальпель. Когда не берут на работу за незнание монгореактангуляра, сердечные признания удобно устроившихся профессионалов звучат пусто.</p>\n<p>И всё-таки даже успешные разработчики живут с пробелами в знаниях. Я перечислю свои, но желающие могут присоединиться.</p>\n<p><strong>Я не хочу притворяться всезнайкой. У всех разработчиков есть пробелы в знаниях, но они не обесценивают опыт, приобретенный с годами.</strong></p>\n<hr>\n<p>Ну поехали. Вот неполный список технологий, в которых я не шарю:</p>\n<ul>\n<li><strong>Юникс и Баш.</strong> Мой уровень владения командной строкой ограничивается хождением туда-сюда с <code class=\"language-text\">ls</code> и <code class=\"language-text\">cd</code>. Остальное я гуглю. Я понимаю пайпы в теории, но никак не могу запомнить синтаксис.</li>\n<li><strong>Низкоуровневые языки.</strong> Я понимаю, что в ассемблере можно прыгать по коду и манипулировать регистрами, но это только в теории. Я написал пару строк C и могу задереференсить указатель, но ручное управление памятью — темный лес. До Rust как-то руки не дошли.</li>\n<li><strong>Сети.</strong> Я знаю, что у компьютеров есть IP адреса, и что DNS позволяет находить хосты по доменам. Есть протоколы типа TCP/IP которые дают нам абстракцию над ненадежными соединениями. Глубже я не вникал.</li>\n<li><strong>Контейнеры.</strong> Никогда не использовал Docker или Kubernetes. (Они как-то связаны?) Похоже на способ предсказуемо запускать и изолировать VM?</li>\n<li><strong>Серверлесс.</strong> Тоже не пробовал. Бэкэндом я только занимался пять лет назад, и мне не очень понятно, как именно лямбды эту модель меняют.</li>\n<li><strong>Микросервисы.</strong> Если я правильно понял, это просто «смерть монолиту». Не пробовал и не знаю, в чем плюсы и минусы на практике.</li>\n<li><strong>Питон.</strong> Тут немножко стыдно — я работал на питоновом бэкенде пару лет, но так и не разобрался толком в языке. Например, семантика импортов для меня все еще загадка.</li>\n<li><strong>Нодовые бэкенды.</strong> Я работал с нодой со стороны фронтэнд тулинга. Но я понятия не имею, как общаться из ноды с базой данных или сделать нормальный бэкенд на ней. Даже с реактовыми вещами типа Next я не ходил дальше хэлловорлда.</li>\n<li><strong>Нативная разработка.</strong> Я как-то пытался выучить Objective C, но забил. До Swift не добрался. С джавой не сложилось. (Хотя после C# я бы наверное в ней разобрался.)</li>\n<li><strong>Алгоритмы.</strong> Если я выспался, я наверное смогу написать сортировку пузырьком или квиксорт (если очень хорошо выспался). Могу пройтись по графу, если задача мне понятна практически. Я понимаю O(n) нотацию, но не намного глубже, чем «остерегайся цикла в цикле».</li>\n<li><strong>Функциональные языки.</strong> Я не пишу бегло ни на одном традиционно функциональном языке (если конечно вы не относите к ним JavaScript). Вообще, бегло я пишу только на JavaScript и C#, и то C# я уже подзабыл. Чтобы продраться через код, написанный на лиспах, хаскелах, или наследниках ML, мне требуются усилия.</li>\n<li><strong>Функциональная терминология.</strong> Я не погружался глубже map и reduce. Мне трудно запомнить моноиды, функторы и так далее. С монадой я вроде разобрался, но может быть мне показалось.</li>\n<li><strong>Современный CSS.</strong> Пока не знаю флексбокс и грид — пилю на флоатах.</li>\n<li><strong>Методологии CSS.</strong> Я знаком с BEM (в смысле конвенции), но не разбирался в OOCSS и подобных.</li>\n<li><strong>SCSS / Sass.</strong> Не разбирался.</li>\n<li><strong>CORS.</strong> От этих ошибок у меня холодный пот. Я знаю, что надо просто ставить правильные заголовки, но когда-то я убил на это кучу времени.</li>\n<li><strong>HTTPS / SSL.</strong> Никогда не настраивал. Я понимаю идею про открытый и закрытый ключ, но толком не разбирался, как они работают.</li>\n<li><strong>GraphQL.</strong> Я могу прочитать запрос, но мне нужно будет с головой погрузиться в туториалы, чтобы сделать что-то полезное. Например, я понятия не имею, как с ним работает пагинация.</li>\n<li><strong>Сокеты.</strong> Вроде бы это способ компьютерам общаться вне модели «запрос-ответ». На этом мое понимание заканчивается.</li>\n<li><strong>Потоки (Streams).</strong> Я только работал с Rx Observables, но это немного другая абстракция. А вот с нодовыми стримами у меня всегда были проблемы — вечно забуду закрыть или по пути ошибки растеряю.</li>\n<li><strong>Electron.</strong> Руки не дошли.</li>\n<li><strong>TypeScript.</strong> Я могу читать код на нем, но еще ничего толком на нем не писал. Пару раз пробовал, но не стал разбираться с ошибками.</li>\n<li><strong>Деплоймент и devops.</strong> Я могу послать себе файлы по FTP или прибить зависший процесс, но на этом мое владение серверами заканчивается.</li>\n<li><strong>Графика.</strong> Будь это канвас, SVG, WebGL или низкоуровневые апи, я не чувствую себя комфортно и мне сложно нарисовать ими что я хочу.</li>\n</ul>\n<p>Само собой, этот список неполный. Я много в чем не шарю.</p>\n<hr>\n<p>Про это странно писать. Неуютно. Я что, хвастаюсь своим невежеством? Вот главное, что я хочу сказать:</p>\n<ul>\n<li><strong>Можно сделать что-то популярное, и все равно много чего не знать.</strong></li>\n<li><strong>Психологический комфорт скачет независимо от знаний и умений.</strong></li>\n<li><strong>Пробелы в знаниях не обесценивают приобретенный с годами опыт.</strong></li>\n</ul>\n<p>Я знаю, где спотыкаюсь. Когда мне будет нужно или интересно, я обязательно разберусь в этих технологиях.</p>\n<p>То, что я говорю об этом открыто, не значит, что у меня нет других знаний или полезного опыта. Есть много чего, что у меня получается. Например, учиться на ходу.</p>\n<blockquote>\n<p>Апдейт: я написал другой пост о том, <a href=\"/the-elements-of-ui-engineering/\">в чем разбираюсь</a>.</p>\n</blockquote>","timeToRead":4,"frontmatter":{"title":"В чем я не шарю в 2018","date":"January 01, 2019","spoiler":"Пробелы в знаниях не обесценивают приобретенный с годами опыт.","cta":null},"fields":{"slug":"/ru/things-i-dont-know-as-of-2018/","langKey":"ru"}}},"pageContext":{"slug":"/ru/things-i-dont-know-as-of-2018/","translations":["ru","zh-hans","de","fr","es","ko","ja","sv","pt-br","te","vi","zh-hant"],"translatedLinks":[]}}}