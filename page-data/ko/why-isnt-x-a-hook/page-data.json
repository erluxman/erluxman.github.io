{"componentChunkName":"component---src-templates-blog-post-js","path":"/ko/why-isnt-x-a-hook/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"fba5ee19-27a5-54ac-a446-46c39faee06a","html":"<p><a href=\"https://reactjs.org/hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Hooks</a>의 첫 번째 알파버전이 릴리즈 된 이후, 가장 많이 들었던 질문 중 하나는 다음과 같습니다: “<em>&#x3C;some other API></em> 는 왜 Hook으로 만들어지지 않았나요?”</p>\n<p>시작하기 전에, “Hooks인 것들”을 간략하게 짚고 넘어가겠습니다:</p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useState()</code></a> 는 state를 선언할 수 있도록 해줍니다.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useEffect()</code></a> 는 side effect를 다룰 수 있도록 해줍니다.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useContext()</code></a> 는 context를 관리할 수 있도록 해줍니다.</li>\n</ul>\n<p>하지만 <code class=\"language-text\">React.memo()</code>나 <code class=\"language-text\">&lt;Context.Provider&gt;</code>같은 API들은 여전히 Hook으로는 제공되지 않고 있습니다. 이러한 API들을 Hook으로 제공하기 위한 여러 형태의 proposal이 올라왔었는데 대부분 <em>합성</em> 할 수 없거나, <em>anti-modular</em> 패턴이었습니다. 이 글에서는 이와 관련된 이야기를 하려고 합니다.</p>\n<p><strong>주의: 이 글은 API discussions에 관심있는 분들을 위한 글입니다. 단순히 React의 생산성만을 고민하시는 분들은 글을 읽지 않으셔도 좋습니다!</strong></p>\n<hr>\n<p>React API들이 공동적으로 지켜야(지켰으면) 하는 두 가지 특징이 있습니다.</p>\n<ol>\n<li><strong>합성:</strong> 대부분의 사람들이 <a href=\"https://reactjs.org/docs/hooks-custom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">커스텀 Hooks</a>를 Hooks API의 꽃이라고 생각합니다. 저희는 사람들이 커스텀 Hooks를 자주 쓸 것이라고 예상했고, 협업 환경에서 이러한 커스텀 Hooks가 <a href=\"/why-do-hooks-rely-on-call-order/#flaw-4-the-diamond-problem\">충돌을 일으키지 않도록</a> 해주어야 했습니다. (Aren’t we all spoiled by how components compose cleanly and don’t break each other?)</li>\n<li><strong>디버깅:</strong> 우린 프로젝트가 커지더라도 <a href=\"/the-bug-o-notation/\">버그를 쉽게 찾는 것</a>을 원합니다. React의 가장 큰 장점 중 하나는, 렌더링에 오류가 있을 때, component tree를 타고 가다보면 어떤 컴포넌트가 잘못됐는지 찾아낼 수 있다는 점입니다.</li>\n</ol>\n<p>두 가지 모두 만족하는지를 따져본다면, 어떤 것이 Hook이 될 수 있고 어떤 것이 될 수 없는지를 알아낼 수 있습니다. 예제를 통해 살펴보겠습니다.</p>\n<hr>\n<h2 id=\"hook인-것-usestate\"><a href=\"#hook%EC%9D%B8-%EA%B2%83-usestate\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hook인 것: <code class=\"language-text\">useState()</code></h2>\n<h3 id=\"합성\"><a href=\"#%ED%95%A9%EC%84%B1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>합성</h3>\n<p><code class=\"language-text\">useState()</code>를 호출하는 여러 개의 커스텀 Hooks는 충돌하지 않습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// What happens here, stays here.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// What happens here, stays here.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">useState()</code>를 통해 새로운 state를 선언하는 것은 언제나 안전합니다. 왜냐하면 새로운 state를 선언할 때, 같은 컴포넌트 내에서 어떤 Hooks가 쓰였는지를 따져볼 필요가 전혀 없기 때문입니다. 또한 여러 개의 state 중 하나가 바뀐다고 하더라도 다른 state들은 영향을 받을 일이 전혀 없습니다.</p>\n<p><strong>판결:</strong> ✅ <code class=\"language-text\">useState()</code>는 커스텀 Hooks에게 영향을 끼치지 않습니다.</p>\n<h3 id=\"debugging\"><a href=\"#debugging\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debugging</h3>\n<p>Hooks 끼리 값을 전달할 수 있기 때문에 유용합니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isMobile</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> isMobile <span class=\"token operator\">=</span> width <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MOBILE_VIEWPORT</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span>isMobile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그런데 만약 실수가 있어 버그가 생겼다면, 어떻게 디버깅해야 할까요?</p>\n<p><code class=\"language-text\">theme.comment</code>로부터 받은 CSS 클래스가 잘못됐다고 가정해보겠습니다. 어떻게 알아낼 수 있을까요? 우선 breakpoint를 걸거나, component의 본문에서 로그를 남겨볼 수 있을 것입니다.</p>\n<p>만약 <code class=\"language-text\">theme</code> 값에 이상이 있고 <code class=\"language-text\">width</code>나 <code class=\"language-text\">isMobile</code> 값에는 문제가 없다면 <code class=\"language-text\">useTheme()</code> 내부에서 무엇인가 잘못됐을 것이라고 추론할 수 있습니다. 만약 <code class=\"language-text\">width</code> 값에 이상이 있다면 <code class=\"language-text\">useWindowWidth()</code>를 들여다 보면 원인을 알아낼 수 있겠죠.</p>\n<p><strong>내부의 값이 어떤 상태인지 보는 것만으로 어떤 Hooks가 잘못됐는지를 알아낼 수 있습니다.</strong> 모든 것의 내부를 들여달 필요가 전혀 없는 것이죠.</p>\n<p>잘못된 커스텀 Hook을 찾고, 해당 Hook을 들여다 본다. 이 과정만 반복하면 됩니다.</p>\n<p>이러한 특징은 커스텀 Hook의 깊이가 깊어질수록 더 중요해집니다. 세 개의 커스텀 Hooks가 중첩됐다고 가정해봅시다. 세 부분만 들여다 보는 것과 <strong>(3 + 3×3 + 3×3×3 = )39 가지 경우</strong>를 따져보는 것의 <a href=\"/the-bug-o-notation/\">차이</a>는 어마어마할 것입니다. 다행히 <code class=\"language-text\">useState()</code>는 다른 Hook이나 \u001ccomponent에게 “영향”을 끼칠 수 없습니다. 잘못된 변수가 자취를 남기듯이, 잘못된 값을 반환한 Hook은 그 흔적을 남길 것입니다. 🐛</p>\n<p><strong>판결:</strong> ✅ <code class=\"language-text\">useState()</code>는 코드의 인과관계를 파악하는 데 영향을 끼치지 않습니다.</p>\n<hr>\n<h2 id=\"hook이-아닌-것-usebailout\"><a href=\"#hook%EC%9D%B4-%EC%95%84%EB%8B%8C-%EA%B2%83-usebailout\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hook이 아닌 것: <code class=\"language-text\">useBailout()</code></h2>\n<p>최적화를 할 때, Hook을 사용하는 컴포넌트는 여러가지 방법으로 불필요한 re-rendering을 피할 수 있습니다.</p>\n<p>대표적인 방법으로 컴포넌트 전체를 감싸는 <a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html#reactmemo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">React.memo()</code></a>가 있습니다. 이 메서드는 마지막 렌더링의 props와 현재 props를 비교하여 그 결과가 같다면 re-rendering을 하지 않는식으로 동작합니다. (shallow 비교를 합니다). class 컴포넌트에서 <code class=\"language-text\">PureComponent</code>를 이용하는 것과 유사합니다.</p>\n<p><code class=\"language-text\">React.memo()</code>는 컴포넌트를 인자로 받고 컴포넌트를 반환합니다:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><strong>그렇다면 왜 이것은 Hook으로 만들지 않았을까요?</strong></p>\n<p>만약 이런 Hook이 있었다면, <code class=\"language-text\">useShouldComponentUpdate()</code>, <code class=\"language-text\">usePure()</code>, <code class=\"language-text\">useSkipRender()</code>, 혹은 <code class=\"language-text\">useBailout()</code> 같은 이름을 갖고 있었을 것입니다.</p>\n<p>아래와 같은 식으로 동작하겠죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ⚠️ 실제로 쓰이는 API가 아닙니다</span>\n  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevColor</span> <span class=\"token operator\">=></span> prevColor <span class=\"token operator\">!==</span> color<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'button-'</span> <span class=\"token operator\">+</span> color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n      OK\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이외에도 여러가지 형태가 있습니다 (e.g. <code class=\"language-text\">usePure()</code> 생성자). 하지만 이들 모두에게 공통적인 문제가 있습니다.</p>\n<h3 id=\"합성-1\"><a href=\"#%ED%95%A9%EC%84%B1-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>합성</h3>\n<p><code class=\"language-text\">useBailout()</code>을 두 개의 커스텀 Hook에서 사용했다고 가정해봅시다:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ 실제로 쓰이는 API가 아닙니다</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevIsOnline</span> <span class=\"token operator\">=></span> prevIsOnline <span class=\"token operator\">!==</span> isOnline<span class=\"token punctuation\">,</span> isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleStatusChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">status</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ 실제로 쓰이는 API가 아닙니다</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevWidth</span> <span class=\"token operator\">=></span> prevWidth <span class=\"token operator\">!==</span> width<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleResize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 위 두 Hooks를 같은 컴포넌트에서 사용하면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Typing...'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 컴포넌트는 언제 re-rendereing이 되어야 할까요?</p>\n<p>만약 모든 <code class=\"language-text\">useBailout()</code>이 컴포넌트 update를 차단할 수 있다면, <code class=\"language-text\">useWindowWidth()</code>가 유발하는 update는 <code class=\"language-text\">useFriendStatus()</code>에 의해 차단될 것입니다. 그 반대도 마찬가지입니다. <strong>두 개의 Hooks이 서로에게 영향을 끼치게 된거죠.</strong></p>\n<p><code class=\"language-text\">useBailout()</code>의 조건이 모두 일치하지 않을 때만 렌더링을 차단한다 하더라도 문제는 있습니다. <code class=\"language-text\">ChatThread</code>는 <code class=\"language-text\">isTyping</code> prop이 바꼈을 때 업데이트가 되지 않을 것이기 때문이죠.</p>\n<p>더 심각한 문제는, 이 상황에서 <code class=\"language-text\">ChatThread</code>에 <strong>새로운 Hook을 추가하려면 그 Hook에도 <code class=\"language-text\">useBailout()</code>을 넣어줘야 한다는 점입니다.</strong> <code class=\"language-text\">useBailout()</code> 없이는 <code class=\"language-text\">useWindowWidth()</code>와 <code class=\"language-text\">useFriendStatus()</code>을 무시하고 rendering을 할 수 없기 때문입니다.</p>\n<p><strong>판결:</strong> 🔴 <code class=\"language-text\">useBailout()</code>은 합성을 할 수 없게 만듭니다. Hook들 간의 state 업데이트를 곤란하게 만듭니다. 우리는 API가 <a href=\"/optimized-for-change/\">변경에 최적화되길</a> 원하는데 위와 같은 동작은 이와 완전히 반대라고 할 수 있습니다.</p>\n<h3 id=\"디버깅\"><a href=\"#%EB%94%94%EB%B2%84%EA%B9%85\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디버깅</h3>\n<p><code class=\"language-text\">useBailout()</code>같은 Hook이 디버깅에는 어떤 영향을 끼칠까요?</p>\n<p>같은 예제를 사용하겠습니다: </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Typing...'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Typing...</code> 문구가 제대로 렌더링되지 않은 상황을 가정해봅시다. 문제를 일으키는 컴포넌트와 현재 컴포넌트가 많이 떨어져 있다고 했을 때, 어떻게 디버깅할 수 있을까요? </p>\n<p><strong>일반적으로, React에서는 그냥 상위 컴포넌트를 따라 올라가기만 하면 됩니다.</strong> 만약 <code class=\"language-text\">ChatThread</code>가 새로운 <code class=\"language-text\">isTyping</code> 값을 전달받지 못했다면, <code class=\"language-text\">&lt;ChatThread isTyping={myVar} /&gt;</code> 을 호출하는 컴포넌트를 찾아 <code class=\"language-text\">myVar</code>을 확인해보는 식으로 거슬러 올라가면 됩니다. 보통은 어떤 컴포넌트에서 <code class=\"language-text\">shouldComponentUpdate()</code>를 잘못 사용하고 있거나 잘못된 <code class=\"language-text\">isTyping</code> 값이 전달돼고 있는 것을 찾아낼 수 있습니다. component 체인에 있는 component를 한번씩 확인하는 것만으로 문제가 발생한 부분을 찾을 수 있는 것이죠.</p>\n<p>하지만 <code class=\"language-text\">useBailout</code>이란 Hook이 실제로 있어서, 이 Hook을 사용하고 있었다면,<code class=\"language-text\">ChatThread</code>가 사용하는 <em>모든 커스텀 Hooks</em>를 일일이 살펴보지 않는한 어떤 부분이 컴포넌트 업데이트를 막고 있는지 알 수 없을 것입니다. 또한 상위 컴포넌트들 또한 커스텀 Hooks를 사용할 수 있기 때문에 디버깅 공수는 <a href=\"/the-bug-o-notation/\">상상할 수 없을 정도로 커질 것입니다.</a></p>\n<p>이건 마치 서랍장에서 드라이버를 찾는데, 서랍장을 열었더니 그 안에 또 서랍장이 있고, 그걸 열었더니 이번에는 더 작은 서랍장이 있는 상황과 유사합니다. 서랍장이 얼마나 깊은지조차 알 수 없는 상황이죠.</p>\n<p><strong>판결:</strong> 🔴 <code class=\"language-text\">useBailout()</code>은 합성을 깨뜨릴 뿐만 아니라, 디버깅을 어렵게 만듭니다. 심할 때는 디버깅 시간을 지수적으로(exponentially) 증가시킬 수도 있습니다.</p>\n<hr>\n<p>이 글에선 Hook으로 사용되고 있는 <code class=\"language-text\">useState()</code>와 의도적으로 Hook으로 만들지 않은 <code class=\"language-text\">useBailout()</code>에 대해서 살펴보았습니다. 또한 합성과 디버깅 관점에서 왜 하나는 가능하고, 다른 하나는 불가능한지도 알아보았습니다.</p>\n<p>Hook 버전의 <code class=\"language-text\">memo()</code>나 <code class=\"language-text\">shouldComponentUpdate()</code>는 없지만, <a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useMemo()</code></a>라는 Hook을 제공하긴 합니다. 이는 비슷한 용도로 쓰이지만 앞에서 설명한 함정들은 피할 수 있도록 만들어졌습니다.</p>\n<p><code class=\"language-text\">useBailout()</code>은 Hook으로 만들기에 적합하지 않은 것들 중 하나일 뿐입니다. <code class=\"language-text\">useProvider()</code>, <code class=\"language-text\">useCatch()</code>, 혹은 <code class=\"language-text\">useSuspense()</code>도 Hook이 되지 못했습니다.</p>\n<p>이제 그 이유를 아시겠나요?</p>\n<p><em>(저 멀리서 희미한 목소리 들려온다: 합성… 디버깅…)</em></p>","timeToRead":7,"frontmatter":{"title":"이건 왜 Hook으로 만들지 않았죠?","date":"January 26, 2019","spoiler":"해야하기 때문이라기 보다는 할 수 있기 때문입니다.","cta":"react"},"fields":{"slug":"/ko/why-isnt-x-a-hook/","langKey":"ko"}}},"pageContext":{"slug":"/ko/why-isnt-x-a-hook/","translations":["de","fr","it","es","ko","pt-br","zh-hans"],"translatedLinks":["/the-bug-o-notation/"]}}}