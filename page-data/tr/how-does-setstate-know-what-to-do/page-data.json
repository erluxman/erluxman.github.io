{"componentChunkName":"component---src-templates-blog-post-js","path":"/tr/how-does-setstate-know-what-to-do/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"52a44cd0-65f7-54a2-8327-1da0dc721906","html":"<p>setState bir component içerisinde çağırıldığında sizce neler oluyor?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Thanks</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tabi ki React, componenti bir sonraki <code class=\"language-text\">{ clicked: true }</code> state’i ile tekrar render ediyor ve DOM’u <code class=\"language-text\">&lt;h1&gt;Thanks&lt;/h1&gt;</code> elemanını gösterecek şekilde güncelliyor.</p>\n<p>Gayet sıradan görünüyor. Ama bir dakika, bunu React mı yapıyor, yoksa React DOM mu?</p>\n<p>DOM’u güncellemek React DOM’un sorumluluğu gibi görünüyor. Ama biz React DOM’da olmayan <code class=\"language-text\">this.setState()</code> çağrısını yapıyoruz. Ve bizim React.Component base sınıfımız React içerisinde tanımlı.</p>\n<p>Peki <code class=\"language-text\">React.Component</code> içerisindeki <code class=\"language-text\">setState()</code> nasıl DOM’u güncelliyor?</p>\n<p><strong>Önemli Not: React konusunda etkin olabilmek için, bu blog sitesindeki <a href=\"https://overreacted.io/why-do-react-elements-have-typeof-property/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">birçok</a> <a href=\"https://overreacted.io/how-does-react-tell-a-class-from-a-function/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">diğer</a> <a href=\"https://overreacted.io/why-do-we-write-super-props/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gönderi</a> gibi, bu gönderide anlatılanları da bilmek zorunda değilsiniz. Bu gönderi perde arkasında işlerin nasıl yürüdüğünü görmek isteyenler için yazıldı. Tamamen opsiyonel.</strong></p>\n<hr>\n<p><code class=\"language-text\">React.Component</code> sınıfının DOM güncelleme işini yaptığını düşünüyor olabiliriz.</p>\n<p>Ama eğer öyle olsaydı, <code class=\"language-text\">this.setState()</code> farklı ortamlarda nasıl çalışacaktı? Örneğin, React Native componentleri de <code class=\"language-text\">React.Component</code>’ten türüyor. Onlar da bizim yukarıda yaptığımız gibi <code class=\"language-text\">this.setState()</code> çağrısını yapıyor, hatta React Native hem Android hem de IOS native bileşenleri ile çalışıyor.</p>\n<p>React Test Renderer ve Shallow Renderer size tanıdık geliyor olabilir. Bu iki test stratejisi de normal componentleri render etmenizi ve <code class=\"language-text\">this.setState()</code>’i çağırmanızı sağlıyor. Ama ikisi de DOM ile çalışmıyor.</p>\n<p>Eger <a href=\"https://github.com/facebook/react/tree/master/packages/react-art\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Art</a> gibi rendererlar kullandıysanız, sayfanızda birden fazla renderer kullanmanın mümkün olduğunu da biliyorsunuzdur. (Örneğin, ART componentleri bir React DOM ağacı üzerinde çalışır.) Bu global bir flag’i veya değişkeni kaçınılmaz hale getirir.</p>\n<p><strong><code class=\"language-text\">React.Component</code></strong> <strong>state güncellemelerini bir şekilde platforma özel kod parçalarına aktarır</strong>. Bunun nasıl olduğunu anlamadan önce, paketlerin neden ve nasıl ayrıştırıldığı konusunda daha derine inelim.</p>\n<hr>\n<p>React “engine”in <code class=\"language-text\">react</code> paketi içerisinde yer aldığına dair genel bir yanılgı var, ama bu doğru değil.</p>\n<p>Aslında, React 0.14 ile <a href=\"https://reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html#two-packages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React paketleri ayrıştırıldığında</a>, <code class=\"language-text\">react</code> paketi özellikle sadece component tanımları için gerekli API’leri içerecek şekilde ayrıştırıldı. React’in büyük bir kısmı aslında React “renderer”lar içerisinde yaşıyor.</p>\n<p><code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-dom/server</code>, <code class=\"language-text\">react-native</code>, <code class=\"language-text\">react-test-renderer</code>, <code class=\"language-text\">react-art</code> renderer örneklerinden birkaçı (siz de <a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/README.md#practical-examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kendi renderer’inizi</a> oluşturabilirsiniz).</p>\n<p>İşte bu nedenle <code class=\"language-text\">react</code> paketi hangi platformu hedeflediğinizden bagimsiz bir şekilde kullanışlı bir paket. <code class=\"language-text\">react</code> paketinin bütün exportlari, <code class=\"language-text\">React.Component</code>, <code class=\"language-text\">React.createElement</code>, <code class=\"language-text\">React.Children</code> gibi araçlar ve son olarak da <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooklar</a>, hedef platformdan bağımsızlar. İster React DOM, ister React DOM Server ister React Native’de çalışıyor olsun, componentleriniz aynı şekilde import edilip ayni şekilde kullanılabilirler.</p>\n<p>Bunun aksine, renderer paketleri platform özelinde API’ler sunar, bir DOM node üzerinde bir React hiyerarşisi oluşturmanızı sağlayan <code class=\"language-text\">ReactDOM.render()</code> gibi. Her bir renderer bunun gibi API’ler sunar. İdealde, çoğu componentin bir renderer’dan herhangi bir şey import etmesine gerek yoktur. Bu onları daha taşınabilir hale getirir.</p>\n<p><strong>Bircok insanın React “engine” olarak düşündüğü şey aslında rendererlarin içerisinde yer alır.</strong> Birçok renderer aynı kodu içerir, bu koda <a href=\"https://github.com/facebook/react/tree/master/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“reconciler”</a> diyoruz. Bir <a href=\"https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html#migrating-to-google-closure-compiler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">derleme adımı</a>, daha iyi bir performans için, reconciler kodunu renderer kodu ile birleştirip tek bir paket haline getirir. (Kod kopyalamak genellikle paket boyutu açısından iyi değildir, fakat React kullanıcılarının büyük bir çoğunluğu aynı anda sadece bir renderer kullanıyor, <code class=\"language-text\">react-dom</code> gibi).</p>\n<p>Bu kısımdan öğrenmemiz gereken şey şu, <code class=\"language-text\">react</code> paketi sizin React özelliklerini kullanmanızı sağlar, ama bunların nasıl gerçekleştirildikleri konusunda bilgisi yoktur. Renderer paketleri (<code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-native</code> vb) ise, platform bağımlı mantıkları ve React özelliklerinin gerçekleştirimini içerir. Bu kodun bir kısmı paylaşılır(“reconciler”), ama bu sadece rendererlarin gerçekleştirim detayı diyebiliriz.</p>\n<hr>\n<p>Şimdi neden <code class=\"language-text\">react</code> ve <code class=\"language-text\">react-dom</code> paketlerinin yeni özellikler için güncellenmesi gerektiğini biliyoruz. Örneğin, React 16.3 ile gelen Context API özelliği, <code class=\"language-text\">React.createContext()</code> özelliğini kullanılabilir hale getirdi.</p>\n<p>Ama <code class=\"language-text\">React.createContext()</code> aslında context özelliğinin gerçek geliştirmesine sahip değil. Örneğin gerçekleştirim, React DOM ve React DOM Server’da farklı şekilde olmak zorunda. Yani, <code class=\"language-text\">createContext()</code> aslında sıradan bazı nesneler döndürüyor:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// A bit simplified</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">defaultValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> _currentValue<span class=\"token operator\">:</span> defaultValue<span class=\"token punctuation\">,</span> Provider<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> Consumer<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Provider <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.provider'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.context'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kodunuzda <code class=\"language-text\">&lt;MyContext.Provider&gt;</code> ya da <code class=\"language-text\">&lt;MyContext.Consumer&gt;</code> kullandığınızda, bu işlemin nasıl yapılmasına karar veren kısım <em>renderer</em> isimli kısımdır. React DOM bir şekilde context değerlerini takip edebilir, fakat React DOM server aynı işi farklı şekilde yapıyor olabilir.</p>\n<p><strong><code class=\"language-text\">react</code> paketini 16.3+ versiyonuna güncelleyip, <code class=\"language-text\">react-dom</code> paketini güncellemediğinizde, henüz özel <code class=\"language-text\">Provider</code> ve <code class=\"language-text\">Consumer</code> türlerinden haberdar olmayan bir renderer kullanıyor olursunuz.</strong> Bu nedenle eski bir <code class=\"language-text\">react-dom</code> versiyonu bu <a href=\"https://stackoverflow.com/a/49677020/458193\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">türlerin geçerli olmadığını</a> söyleyerek hata verecektir.</p>\n<p>Aynı uyarı React Native için de geçerlidir. Fakat, React DOM’un aksine, React güncellemesi React Native güncellemesini zorunlu kılmaz, React Native ile React bağımsız bir versiyon takvimine sahip. Güncellenen renderer kodu, React Native koduna birkaç haftada bir <a href=\"https://github.com/facebook/react-native/commits/master/Libraries/Renderer/oss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ayrı ayrı senkronize</a> olur. Bu nedenle React DOM’da kullanılabilir hale gelen bazı özellikler React Native’de daha farklı bir zamanda kullanılır hale gelebilir.</p>\n<hr>\n<p>Evet, şimdi <code class=\"language-text\">react</code> paketinin ilginç bir şey içermediğini ve asıl gerçekleştirimin <code class=\"language-text\">react-dom</code> , <code class=\"language-text\">react-native</code> , gibi rendererlar içerisinde yer aldığını biliyoruz. Fakat bu bizim sorumuzun cevabı değil, <code class=\"language-text\">React.Component</code> içerisindeki <code class=\"language-text\">setState()</code> nasıl doğru rendererlar ile konuşuyor.</p>\n<p><strong>Cevap şu; her bir renderer oluşturulan sınıfta özel bir alana bir değer tanımlar.</strong> Bu alanın adı <code class=\"language-text\">updater</code>. Bu sizin değiştirebileceğiniz bir değişken değil, daha çok React DOM, React DOM Server ya da React Native’in sınıfınızın bir nesnesini yarattığında değiştirdiği bir alan:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inside React DOM</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMUpdater<span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// Inside React DOM Server</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMServerUpdater<span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// Inside React Native</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactNativeUpdater<span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><code class=\"language-text\">React.Component</code> içerisindeki <code class=\"language-text\">setState</code> <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactBaseClasses.js#L58-L67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gerçekleştirimine</a> bakacak olursak, her yaptığının component nesnesini oluşturan renderer’a bu işi delege etmek olduğunu görürüz.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// A bit simplified</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">partialState<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use the `updater` field to talk back to the renderer!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updater<span class=\"token punctuation\">.</span><span class=\"token function\">enqueueSetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> partialState<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React DOM Server <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRenderer.js#L442-L448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bir state güncellemesini yoksayıp</a> sizi uyarabilir, bunun yerine React DOM ve React Native ise kendi reconciler kopyalarına bu <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberClassComponent.js#L190-L207\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">güncellemeyi yaptırabilir</a>.</p>\n<p>React paketinde tanımlanmış olmasına rağmen, <code class=\"language-text\">this.setState()</code>, bu sayede DOM’u güncelleyebilir. React DOM tarafından belirlenen <code class=\"language-text\">this.updater</code>‘i okur ve React DOM’un güncellemeyi ayarlayıp yapmasını sağlar.</p>\n<hr>\n<p>Sınıfların bu işi nasıl yaptığını artık biliyoruz, peki Hooklar nasıl yapıyor?</p>\n<p>İnsanlar <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks aday API</a>‘sini gördüklerinde sıklıkla şunu merak ettiler; <code class=\"language-text\">useState</code> ne yapacağını nasıl biliyor? Varsayım onun temel sınıf <code class=\"language-text\">React.Component</code> içindeki <code class=\"language-text\">this.setState()</code>‘ten daha “sihirli” bir kod olduğuydu.</p>\n<p>Fakat bugün gördüğümüz gibi, temel sınıftaki <code class=\"language-text\">setState()</code> gerçekleştirimi bir illüzyondan daha fazlası değil. Gelen isteği mevcut renderer’a yönlendirmekten daha fazlasını yapmıyor. Ve <code class=\"language-text\">useState</code> Hook da <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactHooks.js#L55-L56\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aslında tam olarak aynı şeyi yapıyor</a>.</p>\n<p><strong><code class=\"language-text\">updater</code> alanı yerine, Hooklar “dispatcher” nesnesini kullanır.</strong> <code class=\"language-text\">React.useState()</code>, <code class=\"language-text\">React.useEffect()</code> ya da herhangi bir diğer Hook çağrısı yaptığınızda, bu çağrılar mevcut dispatcher’a iletilir.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// In React (simplified a bit)</span>\n<span class=\"token keyword\">const</span> React <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Real property is hidden a bit deeper, see if you can find it!</span>\n  __currentDispatcher<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ve her bir renderer componenti render etmeden önce dispatcher’i tanimlar.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// In React DOM</span>\n<span class=\"token keyword\">const</span> prevDispatcher <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">React<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> ReactDOMDispatcher<span class=\"token punctuation\">;</span></span><span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> <span class=\"token function\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Restore it back</span></span><span class=\"gatsby-highlight-code-line\">  React<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> prevDispatcher<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Örnek olarak <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L340-L354\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">buradaki</a> React DOM Server gerçekleştirimini ve <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberHooks.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">buradaki</a> React DOM ve React Native tarafından paylaşılan reconciler gerçekleştirimini verebiliriz.</p>\n<p><code class=\"language-text\">react-dom</code> gibi rendererlarin, kullanılan Hooklar ile aynı pakete erişmesinin sebebi budur. Yoksa, componentiniz gerekli dispatcher’i bulamayacaktır. Bu durum ayni component ağacından <a href=\"https://github.com/facebook/react/issues/13991\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">birden fazla React kopyası</a> bulundurduğunuzda çalışmayabilir. Fakat, bu durum zaten anlaşılması güç hatalara yol acıyordu, Hooklar sizi farklı paket kullanımı size bir probleme sebep olmadan bu durumu düzeltmeye zorluyor.</p>\n<p>Her ne kadar bunu yapmanızı tavsiye etmesek de, teknik olarak dispatcher davranışını üst seviye araçlar gibi kullanım durumlarında, isteğinize göre değiştirmeniz mümkün. (<code class=\"language-text\">__currentDispatcher</code> ismi konusunda yalan söyledim, fakat gerçek ismi React repo’sunda bulabilirsiniz.) Örneğin React DevTools, Hook ağacının Javascript yığıt izlerini bularak, iç gözlem yapabilmek için <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-debug-tools/src/ReactDebugHooks.js#L203-L214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kendine özel tasarlanmış bir dispatcher</a> kullanacak. <em>Bunu evde denemeyin.</em></p>\n<p>Bu aynı zamanda Hooklarin, doğuştan React’a bağlı olmadığını gösteriyor. Eğer ileride bir çok kütüphane aynı temel Hooklari tekrar kullanmak isterse, teorik olarak dispatcher farklı bir pakete taşınabilir ve birinci-sınıf bir API olarak daha az “korkutucu” bir isimle dışa açılabilir. Pratikte, olgunlaşmamış soyutlamayı gerçekten bir ihtiyaç olmadıkça yapmamayı tercih ediyoruz.</p>\n<p>Hem <code class=\"language-text\">updater</code> alanı hem de <code class=\"language-text\">__currentDispatcher</code> nesnesi genel programlama prensiplerinden biri olan <em>dependency injection</em> prensibinin bir türüdür. İki senaryoda da, rendererlar componentlerinizi daha declarative hale getirmek için, <code class=\"language-text\">setState</code> gerçekleştirimini genel React paketine “enjekte” ederler.</p>\n<p>React kullanırken bunun nasıl çalıştığı konusunu düşünmenize gerek yoktur. Biz React kullanıcılarının dependency injection gibi soyut kavramlardan daha çok, kendi uygulamalarının koduyla ilgili düşünmesini sağlamaya çalışıyoruz. Fakat <code class=\"language-text\">this.setState()</code> ya da <code class=\"language-text\">useState()</code> nasıl ne yapacağını biliyor konusunu merak ettiyseniz umarım bu yazı size yardımcı olmuştur.</p>","timeToRead":9,"frontmatter":{"title":"setState Ne Yapacağını Nasıl Biliyor?","date":"December 09, 2018","spoiler":"Dependency injection, onun hakkında düşünmek zorunda değilsen güzeldir.","cta":null},"fields":{"slug":"/tr/how-does-setstate-know-what-to-do/","langKey":"tr"}}},"pageContext":{"slug":"/tr/how-does-setstate-know-what-to-do/","translations":["es","fr","ja","ko","pt-br","tr","zh-hans"],"translatedLinks":[]}}}