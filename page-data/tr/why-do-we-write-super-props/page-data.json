{"componentChunkName":"component---src-templates-blog-post-js","path":"/tr/why-do-we-write-super-props/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"7dc56a10-e3e9-5ec6-918d-e4a296fab491","html":"<p>Duyduğuma göre <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> en çok konuşulan yenilik olmuş. İronik olarak, bu bloğu <em>class</em> bileşenleri hakkında bilinmeyen gerçekleri açıklamak için açmak istedim.</p>\n<p><strong>Burada anlatılanlar, React’ı üretken olarak kullanmak için çok da önemli <em>değil</em>. Ancak bir şeylerin nasıl çalıştığını öğrenmek isteyenlerdenseniz, eğlenceli bulabilirsiniz.</strong></p>\n<p>İşte ilki.</p>\n<hr>\n<p>Hayatımda <code class=\"language-text\">super(props)</code>u bilmek istediğimden çok daha fazla yazdım:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tabi ki, <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class fields önerisi</a> tüm bu seremoniyi atlamamızı sağlıyor:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>2015’te, React 0.13 yalın class’lar için destek sağladığında bunun gibi bir yazım <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">planlanmıştı</a>. <code class=\"language-text\">constructor</code> tanımlamak ve <code class=\"language-text\">super(props)</code>u çağırmak, class fields ergonomik bir alternatif sunana kadar, geçici bir çözüm olarak amaçlanmıştı.</p>\n<p>Ama sadece ES2015 özelliklerini kullanan bu örneğe tekrar dönelim:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Neden <code class=\"language-text\">super</code> fonksiyonunu çağırıyoruz? <em>Çağırmasak</em> olmaz mı? Eğer çağırmak zorundaysak, <code class=\"language-text\">props</code> değişkenini göndermezsek ne olur? Başka bir argümanı alıyor mu bu fonksiyon?</strong> Hadi cevapları bulalım.</p>\n<hr>\n<p>JavaScript dilinde, <code class=\"language-text\">super</code> ebeveyn class constructor’a işaret eder. (Bizim örneğimizde, <code class=\"language-text\">React.Component</code> implementasyonuna işaret ediyor.)</p>\n<p>Önemle, bir constructor içerisinde, ebeveyn constructor’ını çağırana kadar, <code class=\"language-text\">this</code>‘i kullanamazsınız. JavaScript izin vermez:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔴 Henüz `this` kullanamazsın</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅ Şimdi kullanabilirsin</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JavaScript’in, <code class=\"language-text\">this</code>‘e dokunmadan önce ebeveyn constructor’ın çalışmasına zorlamasının iyi bir nedeni var. Class hiyerarşisini düşünün:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 Bu engelleniyor, nedeni için aşağıyı okuyun</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Günaydın gençler!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">super</code> fonksiyonunu çağırmadan <code class=\"language-text\">this</code> <em>kullanabildiğimizi</em> düşünün. Bir ay sonra, <code class=\"language-text\">greetColleagues</code> fonksiyonunu, kişinin ismini parametre olarak alacak şekilde değiştirebiliriz:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Günaydın gençler!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Benim adım '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', tanıştığıma memnun oldum!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ancak <code class=\"language-text\">this.greetColleagues()</code> fonksiyonunun, daha <code class=\"language-text\">super()</code> fonksiyonunun <code class=\"language-text\">this.name</code> değerini ayarlamadan çağrıldığını unuttuk. Bu yüzden <code class=\"language-text\">this.name</code> daha tanımlanmamış halde! Gördüğünüz gibi, bunun gibi kod blokları hakkında düşünmek bile zor.</p>\n<p>Bunun gibi sıkıntılardan kurtulmak için, <strong>JavaScript; “eğer constructor içinde <code class=\"language-text\">this</code> kullanmak istiyorsan, önce <code class=\"language-text\">super</code> çağırmak <em>zorundasın</em>” diyor.</strong> Ebeveyni bir bırak, işini halletsin! Ve bu sınırlama aynı şekilde class olarak tanımlanmış React componentleri’ne de uygulanıyor:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅ Buradan sonra `this` kullanabilirsin</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bu bizi başka bir soruya yöneltiyor: neden <code class=\"language-text\">props</code>‘u göndermeliyiz?</p>\n<hr>\n<p><code class=\"language-text\">super</code> fonksiyonuna <code class=\"language-text\">props</code> argümanını göndermem gerekiyor ki <code class=\"language-text\">React.Component</code>‘in constructor fonksiyonu <code class=\"language-text\">this.props</code>‘u oluşturabilsin diye düşünebilirsiniz:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inside React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ve bu düşünce doğruya çok da uzak değil — gerçekten de <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">öyle yapıyor</a>.</p>\n<p>Ama nedense, <code class=\"language-text\">super()</code> fonksiyonunu <code class=\"language-text\">props</code> göndermeden çağırsanız bile, <code class=\"language-text\">render</code> ve diper metodların içinden <code class=\"language-text\">this.props</code>‘a erişebiliyorsunuz. (İnanmıyorsanız kendiniz deneyebilirsiniz!)</p>\n<p>Peki <em>bu</em> nasıl çalışıyor? Meğerse <strong>React <em>sizin</em> constructor fonksiyonunuzdan hemen sonra, <code class=\"language-text\">props</code> parametresini kendi atıyor:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// React'ın içi</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Bu nedenle <code class=\"language-text\">super()</code> içine <code class=\"language-text\">props</code> göndermeyi unutsanız bile, React yine de sonradan onu tanımlayacak. Bunun bir sebebi var.</p>\n<p>React class’lar için destek sağladığı sırada, sadece ES6 class’ları için destek eklemedi. Amaç, olabildiğince geniş alanda class yapılarını desteklemekti. O zamanlar ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript, veya diğer çözümlerin component tanımlamada ne kadar başarılı olacakları <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kesin değildi</a>. Yani React kasıtlı olarak <code class=\"language-text\">super()</code> fonksiyonunun zorunlu olmasında tarafsız kaldı - ES6 zorunlu kılsa da.</p>\n<p>Peki bu <code class=\"language-text\">super(props)</code> yerine sadece <code class=\"language-text\">super()</code> yazabileceğiniz anlamına mı geliyor?</p>\n<p><strong>Büyük ihtimalle hayır çünkü hala biraz kafa karıştırıcı.</strong> Tabi ki, React zaten <code class=\"language-text\">this.props</code> değerini sizin constructor’ınız çalıştıktan <em>sonra</em> atayacaktır. Ancak <code class=\"language-text\">this.props</code> değeri, <code class=\"language-text\">super</code> fonksiyonunu çağırma satırı ve constructor’ınızın sonu <em>arasında</em> tanımlanmamış olacaktır.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// React'ın içi</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Sizin kodunuz</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😬 props'u göndermeyi unuttuk</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ {}</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😬 undefined </span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bu, eğer constructor’ın <em>içinde</em> çağrılan bir metod içinde olursa, debug yapmak daha da zorlaşacaktır. <strong>Ve işte tam olarak bu yüzden, zorunlu olmamasına rağmen, her zaman <code class=\"language-text\">super(props)</code> olarak kullanmayı öneriyorum:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ props'u gönderdik</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bu, <code class=\"language-text\">this.props</code> değerinin, daha constructor ortada bile yokken tanımlı olmasını kesinleştiriyor.</p>\n<hr>\n<p>Uzun zamandır React kullananların merak ettiği son bir nokta olabilir.</p>\n<p>Class’ların içinde Context API’ını (ister eski <code class=\"language-text\">contextTypes</code>, ister React 16.6’da eklenen modern <code class=\"language-text\">contextType</code> API) kullandığınız zaman <code class=\"language-text\">context</code> değişkeninin constructor’a ikinci parametre olarak gönderdiğini farketmişsinizdir.</p>\n<p>O zaman neden <code class=\"language-text\">super(props, context)</code> yazmıyoruz? Yazabiliriz, ama context, props’a göre daha az kullanıldığı için bu problem o kadar da fazla karşımıza çıkmıyor.</p>\n<p><strong>Zaten, class fields önerisiyle beraber bu sıkıntı büyük ölçüde kayboluyor.</strong> Bir constructor olmadan, tüm argümanlar otomatik olarak aşağıya taşınıyor. Bu, <code class=\"language-text\">state = {}</code> gibi bir tanımlamanın <code class=\"language-text\">this.props</code> veya <code class=\"language-text\">this.context</code> değerlerine bir referans taşımasına olanak sağlıyor.</p>\n<p>Hooks ile beraber, <code class=\"language-text\">super</code> veya <code class=\"language-text\">this</code> bile gereksiz kalıyor. Ama bu başka bir günün konusu.</p>","timeToRead":5,"frontmatter":{"title":"Neden super(props) yazıyoruz?","date":"November 30, 2018","spoiler":"Yazı sonunda sürpriz var.","cta":null},"fields":{"slug":"/tr/why-do-we-write-super-props/","langKey":"tr"}}},"pageContext":{"slug":"/tr/why-do-we-write-super-props/","translations":["cs","de","fr","fa","es","hu","it","ja","my","nb","sr","pl","sk","pt-br","nl","th","uk","vi","tr","zh-hant","zh-hans"],"translatedLinks":[]}}}