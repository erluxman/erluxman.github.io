{"componentChunkName":"component---src-templates-blog-post-js","path":"/de/why-isnt-x-a-hook/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"5c51febf-dd09-59ff-b0b4-934fe0cf1d34","html":"<p>Seit der Veröffentlichung der Alpha-Version der <a href=\"https://reactjs.org/hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Hooks</a>, steht die folgende Frage bei Diskussionen im Raum: “Warum ist <em>&#x3C;irgendeine andere API></em> kein Hook?”</p>\n<p>Nur als Erinnerung: Das <em>sind</em> Hooks:</p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useState()</code></a> Lässt dich eine State-Variable deklarieren.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useEffect()</code></a> Lässt dich eine Nebenerscheinung (side effect) deklarieren.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useContext()</code></a> Lässt dich den Context verwenden.</li>\n</ul>\n<p>Es gibt jedoch auch noch andere APIs, wie <code class=\"language-text\">React.memo()</code> und <code class=\"language-text\">&lt;Context.Provider&gt;</code>, die <em>keine</em> Hooks sind. Bereits vorgeschlagene Hookvarianten dieser APIs wären <em>nicht kompositionell</em> oder <em>antimodulär</em>. Dieser Artikel erklärt warum das so ist.</p>\n<p><strong>Hinweis: Dieser Post ist ein tiefer Einblick für Leute, die in Diskussionen über APIs interessiert sind. Seht diesen Artikel nicht als produktive Arbeit mit React an!</strong></p>\n<hr>\n<p>Es gibt zwei wichtige Eigenschaften die wir bei React APIs beibehalten wollen:</p>\n<ol>\n<li><strong>Komposition:</strong> <a href=\"https://reactjs.org/docs/hooks-custom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Eigene Hooks</a> sind der hauptsächliche Grund warum wir uns so auf die Hook API freuen. Wir glauben, dass viele Leute ihre eigenen Hooks bauen werden und wir müssen auch sicher sein, dass diese sich <a href=\"/why-do-hooks-rely-on-call-order/#flaw-4-the-diamond-problem\">nicht widersprechen</a>. (Sind wir nicht alle ein wenig verwöhnt, dass Komponenten so gut zusammen funktionieren und sich nicht gegenseitig zerstören?)</li>\n<li><strong>Debugging:</strong> Wir wollen, dass Bugs <a href=\"/the-bug-o-notation/\">einfach zu finden</a> sind während die Anwendung größer und größer wird. Eines der besten Features von React ist die Tatsache, dass wenn man sieht das etwas falsch gerendert wird, man einfach den Komponentenbaum heruntergehen kann, bis man das Prop oder den State gefunden, der den Fehler hervorgerufen hat.</li>\n</ol>\n<p>Diese beiden Einschränkungen zusammen zeigen uns was ein Hook sein kann und was <em>nicht</em>. Lasst uns zusammen ein paar Beispiele anschauen.</p>\n<hr>\n<h2 id=\"ein-richger-hook-usestate\"><a href=\"#ein-richger-hook-usestate\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ein richger Hook: <code class=\"language-text\">useState()</code></h2>\n<h3 id=\"komposition\"><a href=\"#komposition\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Komposition</h3>\n<p>Mehrere selbsterstellte Hooks, die <code class=\"language-text\">useState()</code> verwenden, haben keine Komplikationen:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Was hier passiert, bleibt hier.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Was hier passiert, bleibt hier.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Das Hinzufügen eines neuen Aufrufs von <code class=\"language-text\">useState()</code> ist immer sicher. Du brauchst dir keine Gedanken über andere Hooks, die bereits von einer Komponente verwendet werden, machen um eine neue State-Variable zu erstellen. Außerdem ist es nicht möglich andere State-Variablen zu zerstören, wenn man eine andere updatet.</p>\n<p><strong>Fazit:</strong> ✅ <code class=\"language-text\">useState()</code> beeinflusst selbsterstellte Hooks nicht.</p>\n<h3 id=\"debugging\"><a href=\"#debugging\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debugging</h3>\n<p>Hooks sind besonders hilfreich, da man Werte <em>zwischen</em> ihnen austauschen kann.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isMobile</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> isMobile <span class=\"token operator\">=</span> width <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MOBILE_VIEWPORT</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span>isMobile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aber was ist, wenn wir einen Fehler machen? Wie funktioniert das Debugging?</p>\n<p>Sagen wir mal, dass die CSS-Klasse die wir von <code class=\"language-text\">theme.comment</code> bekommen, falsch ist. Wie wollen wir das debuggen? Wir könnten einen Breakpoint setzen oder ein paar Logs in den Body der Komponente schreiben.</p>\n<p>Möglicherweise würden wir sehen, dass <code class=\"language-text\">theme</code> falsch ist, aber <code class=\"language-text\">width</code> und <code class=\"language-text\">isMobile</code> richtig sind. Dadurch wissen wir, dass das Problem bei <code class=\"language-text\">useTheme()</code> liegt. Oder vielleicht würden wir sehen, dass <code class=\"language-text\">width</code> selber falsch ist. Das würde uns zeigen, dass wir uns mal <code class=\"language-text\">useWindowWith()</code> anschauen sollten.</p>\n<p><strong>Ein einfacher Blick auf die Zwischenwerte zeigt uns welcher der Hooks den Bug enthält.</strong> Wir brauchen nicht auf <em>alle</em> Implementationen zu schauen.</p>\n<p>Dann können wir auf den Wert, der den Bug enthält, “reinzoomen”.</p>\n<p>Dies wird umso wichtiger, desto verschachtelter die eigenen Hooks werden. Stellen wir uns vor, dass wir 3 Ebenen von verschachtelten selbsterstellten Hooks haben, wobei jede Ebene 3 verschiedene Hooks beinhaltet. Der <a href=\"/the-bug-o-notation/\">Unterschied</a> zwischen der Suche eines Bugs an <strong>3 Stellen</strong> und der Suche an potentiell <strong>3 + 3×3 + 3×3×3 = 39 Stellen</strong> ist riesig. Glücklicherweise kann <code class=\"language-text\">useState()</code> nicht auf magische Weise andere Hooks oder Komponenten “beinflussen”. Ein vergbuggter Wert, der davon zurück zurückgegeben wird, hinterlässt eine Spur so wie jede andere Variable auch 🐛</p>\n<p><strong>Fazit:</strong> ✅ <code class=\"language-text\">useState()</code> verschleiert nicht die Ursache-Wirkungs-Beziehung in unserem Code. Wir können den Brotkrümeln bis zu unserem Bug folgen. (Wie Hänsel und Gretel)</p>\n<hr>\n<h2 id=\"kein-hook-usebailout\"><a href=\"#kein-hook-usebailout\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kein Hook: <code class=\"language-text\">useBailout()</code></h2>\n<p>Als Optimierungsmöglichkeiten können Komponenten, die Hooks verwenden, das Re-Rendering auslassen.</p>\n<p>Eine Möglichkeit besteht darin einen  <a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html#reactmemo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">React.memo()</code></a>-Wrapper um die ganze Komponente zu legen. Dies lässt ein Re-Rendering aus, wenn die Props auf flacher Ebene gleich den Props des letzen Renderings sind. Dies ist ähnlich wie eine <code class=\"language-text\">PureComponent</code>-Klasse.</p>\n<p><code class=\"language-text\">React.memo()</code> nimmt eine Komponente entgegen und gibt eine Komponente zurück:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><strong>Aber warum ist das kein Hook?</strong></p>\n<p>Egal ob man es <code class=\"language-text\">useShouldComponentUpdate()</code>, <code class=\"language-text\">usePure()</code>, <code class=\"language-text\">useSkipRender()</code>, oder <code class=\"language-text\">useBailout()</code>, nennt, die Idee sieht folgendermaßen aus:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ⚠️ Keine echte API</span>\n  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevColor</span> <span class=\"token operator\">=></span> prevColor <span class=\"token operator\">!==</span> color<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'button-'</span> <span class=\"token operator\">+</span> color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      OK\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Es gibt jedoch noch einige weitere Varianten (z.B. ein einfacher <code class=\"language-text\">usePure()</code>-Marker) aber im großen Ganzen haben diese einige Nachteile.</p>\n<h3 id=\"komposition-1\"><a href=\"#komposition-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Komposition</h3>\n<p>Gehen wir davon aus, dass wir versuchen <code class=\"language-text\">useBailout()</code> in zwei selbsterstellten Hooks zu verwenden:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ Keine echte API</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevIsOnline</span> <span class=\"token operator\">=></span> prevIsOnline <span class=\"token operator\">!==</span> isOnline<span class=\"token punctuation\">,</span> isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleStatusChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">status</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ Keine echte API</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevWidth</span> <span class=\"token operator\">=></span> prevWidth <span class=\"token operator\">!==</span> width<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleResize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Was passiert nun, wenn wir versuchen die Beiden in der selben Komponente zu verwenden?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Schreibt...'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Wann rendert es neu?</p>\n<p>Wenn jeder <code class=\"language-text\">useBailout()</code>-Aufruf die Möglichkeit hätte ein Update auszulassen, dann wären die Updates von <code class=\"language-text\">userWindowWidth()</code> durch <code class=\"language-text\">useFriendStatus()</code> geblockt und andersherum. <strong>Diese Hooks würden sich gegenseitig blockieren</strong>.</p>\n<p>Aber wenn <code class=\"language-text\">useBailout()</code> erst dann respektiert werden würde, wenn <em>alle</em> Aufrufe aus einer Komponente das Blocken des Updates akzeptieren würden, dann würde unser <code class=\"language-text\">ChatThread</code> nicht funktionieren und keine Änderungen an dem <code class=\"language-text\">isTyping</code> Props updaten.</p>\n<p>Noch schlimmer ist, dass dies dazu führt das <strong>alle neuen Hooks für <code class=\"language-text\">ChatThread</code> kaputt gehen würden, wenn sie nicht <em>auch</em> <code class=\"language-text\">useBailout()</code> aufrufen würden</strong>. Andererseits können sie sich nicht gegen den Bailout in <code class=\"language-text\">useWindowWith()</code> und <code class=\"language-text\">useFriendStatus()</code> “wehren”.</p>\n<p><strong>Fazit:</strong> 🔴 <code class=\"language-text\">useBailout()</code> zerstört eine gemeinsame Benutzung. Wenn man es zu den Hooks hinzufügt, macht es andere State-Updates in anderen Hooks kaputt. Wir wollen, dass die APIs <a href=\"/optimized-for-change/\">funktionssicher</a> sind und dieses Verhalten ist ziemlich genau das Gegenteil.</p>\n<h3 id=\"debugging-1\"><a href=\"#debugging-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debugging</h3>\n<p>Wie beinflusst ein Hook wie <code class=\"language-text\">useBailout()</code> das Debugging?</p>\n<p>Dafür nutzen wir das gleiche Beispiel:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Schreibt...'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Wir sagen, dass <code class=\"language-text\">Schreibt...</code> nicht dann angezeigt wird wenn wir es erwartet haben, obwohl irgendwie viele Ebenen darüber das Prop sich ändert. Wie debuggen wir das?</p>\n<p><strong>Normalerweise kann man mit voller Überzeugung sagen, dass man bei React einfach <em>nachschaut</em>.</strong> Wenn <code class=\"language-text\">ChatThread</code> keinen neuen <code class=\"language-text\">isTyping</code> Wert bekommt, können wir die Komponente, die <code class=\"language-text\">&lt;ChatThread isTyping={myVar} /&gt;</code> rendert, öffnen und <code class=\"language-text\">myVar</code> checken. Auf einer Ebene werden wir entweder ein verbuggtes <code class=\"language-text\">shouldComponentUpdate()</code> oder einen falschen <code class=\"language-text\">isTyping</code> Wert finden. Ein Blick auf jede Komponente in dieser Kette reicht normalerweise aus, um die Ursache des Problems zu finden.</p>\n<p>Aber wenn jedoch dieser <code class=\"language-text\">useBailout()</code> Hook existieren würde, würde man nie den wahren Grund warum ein Update übersprungen wurde finden bis man <em>jeden einzelnen erstellen Hook</em> (bis in die Tiefe), der von unserem <code class=\"language-text\">ChatThread</code> und Komponenten in seiner Kette verwendet wird, überprüft hätte. Weil jede einzelne Parent-Komponente <em>auch</em> selbsterstellte Hooks benutzen kann, <a href=\"/the-bug-o-notation/\">skaliert</a> diese Suche schrecklich.</p>\n<p>Das ist so, als würde man nach einem Schraubenzieher in einer Kiste voller Schubladen suchen und jede Schublade würde eine Menge kleinerer Kisten voller Schubladen beinhalten und man weiß nicht wie tief diese Höhle weiter geht.</p>\n<p><strong>Fazit:</strong> 🔴 Der <code class=\"language-text\">useBailout()</code> Hook zerstört nicht nur die Komposition, sondern erhöht auch massiv die Anzahl der Schritte, die zum Debugging benötigt werden. Außerdem fordert es eine große geistige Anstregung um einen verbuggten Bailout zu finden - in manchen Fällen sogar exponentiell mehr.</p>\n<hr>\n<p>Wir haben uns gerade mal einen echten Hook, <code class=\"language-text\">useState()</code>, und eine beliebten Vorschlag, der bewusst <em>kein</em> Hook ist, angeschaut. Wir haben diese durch die Facetten von Komposition und Debugging verglichen und darüber diskutiert, warum einer von denen funktioniert und der andere nicht.</p>\n<p>Während es keine “Hook Version” von <code class=\"language-text\">memo()</code> oder <code class=\"language-text\">shouldComponentUpdate()</code> gibt, <em>bietet</em> React einen Hook namens <a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useMemo()</code></a>. Dieser ist für einen ähnlichen Gebrauch, aber seine Bedeutung ist anders genug, um nicht in die oben beschriebenen Fallstricke zu geraten.</p>\n<p><code class=\"language-text\">useBailout()</code> ist nur ein Beispiel von etwas, was nicht als Hook funktioniert. Es gibt jedoch auch noch einige andere - zum Beispiel <code class=\"language-text\">useProvider()</code>, <code class=\"language-text\">useCatch()</code>, oder <code class=\"language-text\">useSuspense()</code>.</p>\n<p>Weißt du warum?</p>\n<p><em>(Flüsternd: Komposition… Debugging…)</em></p>","timeToRead":8,"frontmatter":{"title":"Warum ist X kein Hook?","date":"January 26, 2019","spoiler":"Nur weil wir es können, müssen wir es nicht tun.","cta":null},"fields":{"slug":"/de/why-isnt-x-a-hook/","langKey":"de"}}},"pageContext":{"slug":"/de/why-isnt-x-a-hook/","translations":["de","fr","es","it","ko","pt-br","zh-hans"],"translatedLinks":[]}}}