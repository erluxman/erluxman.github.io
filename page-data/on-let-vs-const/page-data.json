{"componentChunkName":"component---src-templates-blog-post-js","path":"/on-let-vs-const/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"74e2584f-c190-5959-994b-b1c76be2f23c","html":"<p>My <a href=\"/what-is-javascript-made-of/\">previous post</a> included this paragraph:</p>\n<blockquote>\n<p><strong><code class=\"language-text\">let</code> vs <code class=\"language-text\">const</code> vs <code class=\"language-text\">var</code></strong>: Usually you want <code class=\"language-text\">let</code>. If you want to forbid assignment to this variable, you can use <code class=\"language-text\">const</code>. (Some codebases and coworkers are pedantic and force you to use <code class=\"language-text\">const</code> when there is only one assignment.)</p>\n</blockquote>\n<p>This turned out to be very controversial, sparking conversations on Twitter and Reddit. It seems that the majority view (or at least, the most vocally expressed view) is that one should <em>use <code class=\"language-text\">const</code> wherever possible,</em> only falling back to <code class=\"language-text\">let</code> where necessary, as can be enforced with the <a href=\"https://eslint.org/docs/rules/prefer-const\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">prefer-const</code></a> ESLint rule.</p>\n<p>In this post, I will briefly summarize some of the arguments and counter-arguments I’ve encountered, as well as my personal conclusion on this topic.</p>\n<h2 id=\"why-prefer-const\"><a href=\"#why-prefer-const\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why <code class=\"language-text\">prefer-const</code></h2>\n<ul>\n<li><strong>One Way to Do It</strong>: It is mental overhead to have to choose between <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> every time. A rule like “always use <code class=\"language-text\">const</code> where it works” lets you stop thinking about it and can be enforced by a linter.</li>\n<li><strong>Reassignments May Cause Bugs</strong>: In a longer function, it can be easy to miss when a variable is reassigned. This may cause bugs. Particularly in closures, <code class=\"language-text\">const</code> gives you confidence you’ll always “see” the same value.</li>\n<li><strong>Learning About Mutation</strong>: Folks new to JavaScript often get confused thinking <code class=\"language-text\">const</code> implies immutability. However, one could argue that it’s important to learn the difference between variable mutation and assignment anyway, and preferring <code class=\"language-text\">const</code> forces you to confront this distinction early on.</li>\n<li><strong>Meaningless Assignments</strong>: Sometimes, an assignment doesn’t make sense at all. For example, with React Hooks, the values you get from a Hook like <code class=\"language-text\">useState</code> are more like parameters. They flow in one direction. Seeing an error on their assignment helps you learn earlier about the React data flow.</li>\n<li><strong>Performance Benefits</strong>: There are occasional claims that JavaScript engines could make code using <code class=\"language-text\">const</code> run faster due to the knowledge the variable won’t be reassigned.</li>\n</ul>\n<h2 id=\"why-not-prefer-const\"><a href=\"#why-not-prefer-const\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why Not <code class=\"language-text\">prefer-const</code></h2>\n<ul>\n<li><strong>Loss of Intent</strong>: If we force <code class=\"language-text\">const</code> everywhere it can work, we lose the ability to communicate whether it was <em>important</em> for something to not be reassigned.</li>\n<li><strong>Confusion with Immutability</strong>: In every discussion about why you should prefer <code class=\"language-text\">const</code>, someone always confuses with immutability. This is unsurprising, as both assignment and mutation use the same <code class=\"language-text\">=</code> operator. In response, people are usually told that they should “just learn the language”. However, the counter-argument is that if a feature that prevents mostly beginner mistakes is confusing to beginners, it isn’t very helpful. And unfortunately, it doesn’t help prevent mutation mistakes which span across modules and affect everyone.</li>\n<li><strong>Pressure to Avoid Redeclaring</strong>: A <code class=\"language-text\">const</code>-first codebase creates a pressure to not use <code class=\"language-text\">let</code> for conditionally assigned variables. For example, you might write <code class=\"language-text\">const a = cond ? b : c</code> instead of an <code class=\"language-text\">if</code> condition, even if both <code class=\"language-text\">b</code> and <code class=\"language-text\">c</code> branches are convoluted and giving them explicit names is awkward.</li>\n<li><strong>Reassignments May Not Cause Bugs</strong>: There are three common cases when reassignments cause bugs: when the scope is very large (such as module scope or huge functions), when the value is a parameter (so it’s unexpected that it would be equal to something other than what was passed), and when a variable is used in a nested function. However, in many codebases most variables won’t satisfy either of those cases, and parameters can’t be marked as constant at all.</li>\n<li><strong>No Performance Benefits</strong>: It is my understanding that the engines are already aware of which variables are only assigned once — even if you use <code class=\"language-text\">var</code> or <code class=\"language-text\">let</code>. If we insist on speculating, we could just as well speculate that extra checks can <em>create</em> performance cost rather than reduce it. But really, engines are smart.</li>\n</ul>\n<h2 id=\"my-conclusion\"><a href=\"#my-conclusion\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Conclusion</h2>\n<p>I don’t care.</p>\n<p>I would use whatever convention already exists in the codebase.</p>\n<p>If you care, use a linter that automates checking and fixing this so that changing <code class=\"language-text\">let</code> to <code class=\"language-text\">const</code> doesn’t become a delay in code review.</p>\n<p>Finally, remember that linters exist to serve <em>you</em>. If a linter rule annoys you and your team, delete it. It may not be worth it. Learn from your own mistakes.</p>","timeToRead":3,"frontmatter":{"title":"On let vs const","date":"December 22, 2019","spoiler":"So which one should I use?","cta":null},"fields":{"slug":"/on-let-vs-const/","langKey":"en"}}},"pageContext":{"slug":"/on-let-vs-const/","previous":{"fields":{"slug":"/what-is-javascript-made-of/","langKey":"en","directoryName":"what-is-javascript-made-of","maybeAbsoluteLinks":[]},"frontmatter":{"title":"What Is JavaScript Made Of?"}},"next":{"fields":{"slug":"/what-are-the-react-team-principles/","langKey":"en","directoryName":"what-are-the-react-team-principles","maybeAbsoluteLinks":[]},"frontmatter":{"title":"What Are the React Team Principles?"}},"translations":[],"translatedLinks":[]}}}