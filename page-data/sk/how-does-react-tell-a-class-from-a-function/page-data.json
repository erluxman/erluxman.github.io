{"componentChunkName":"component---src-templates-blog-post-js","path":"/sk/how-does-react-tell-a-class-from-a-function/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"87196406-be5f-55d4-8bb4-40fe1aa6ac5c","html":"<p>Predstavme si komponentu <code class=\"language-text\">Greeting</code>, ktorá je definovaná ako funkcia:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ahoj</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Túto komponentu môžeme definovať aj ako triedu:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ahoj</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(<a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Donedávna</a> to bol jediný spôsob, ako mohla komponenta udržiavať svoj vlastný stav.)</p>\n<p>Ak chceme vykresliť <code class=\"language-text\">&lt;Greeting /&gt;</code>, nás nezaujíma, ako je komponenta definovaná:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Buď trieda alebo funkcia</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Ale <em>samotný React</em> sa o to zaujíma!</p>\n<p>Ak je <code class=\"language-text\">Greeting</code> funkcia, React ju musí zavolať:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Váš kód</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ahoj</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Vo vnútri Reactu</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Ahoj&lt;/p></span></code></pre></div>\n<p>Ale ak je <code class=\"language-text\">Greeting</code> trieda, React ju musí inicializovať pomocou operátora <code class=\"language-text\">new</code> a <em>potom</em> spustiť metódu <code class=\"language-text\">render</code> v práve vytvorenej inštancii:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Váš kód</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ahoj</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Vo vnútri Reactu</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greeting {}</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Ahoj&lt;/p></span></code></pre></div>\n<p>V oboch prípadoch je cieľom Reactu sa dostať k vykreslenému objektu (<code class=\"language-text\">&lt;p&gt;Ahoj&lt;/p&gt;</code>). Ale akým spôsobom, záleží od toho, ako je definovaný <code class=\"language-text\">Greeting</code>.</p>\n<p><strong>Tak ako React vie, že či je niečo triedou alebo funkciou?</strong></p>\n<p>Podobne, ako v mojom <a href=\"/why-do-we-write-super-props/\">predchazdajúcom príspevku</a>, <strong>tieto veci <em>nie sú</em> dôležité na to, aby ste boli produktívni pri používaní Reactu.</strong> Ja sám som o tom nevedel niekoľko rokov. Prosím, nepýtajte sa to počas pohovoru. Popravde, tento príspevok je viac o JavaScripte než o Reacte.</p>\n<p>Tento blog je pre zaujatého čitateľa, ktorý chce vedieť, <em>prečo</em> práve tak React funguje. Ste jedným z nich? Pozrime sa na to spolu.</p>\n<p><strong>Pripravte sa, čaká nás dlhá cesta. Tento príspevok sa veľmi nezaoberá Reactom, ale pozrieme sa na <code class=\"language-text\">new</code>, <code class=\"language-text\">this</code>, <code class=\"language-text\">class</code>, skrátené funkcie, <code class=\"language-text\">prototype</code>, <code class=\"language-text\">__proto__</code>, <code class=\"language-text\">instanceof</code>, a ako všetky tie veci fungujú v JavaScripte. Našťastie, ak <em>používate</em> React, na to ani nemusíte myslieť. Ale ak chete implementovať React…</strong></p>\n<p>(Ak chcete skrátenú odpoveď, prejdite ku koncu.)</p>\n<hr>\n<p>Najprv musíme pochopiť prečo je dôležité rozoznať funkcie od tried. Všimnite si, ako sa počas inicializácie používa operátor <code class=\"language-text\">new</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Ak je Greeting funkcia</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Ahoj&lt;/p></span>\n\n<span class=\"token comment\">// Ak je Greeting trieda</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greeting {}</span></span><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Ahoj&lt;/p></span></code></pre></div>\n<p>Pozrime sa, čo robí operátor <code class=\"language-text\">new</code> v JavaScripte.</p>\n<hr>\n<p>Triedy sú v JavaScripte novinkou. Predtým, keď ste chceli niečo podobné, mohli ste urobiť z funkcie triedu tak, že <strong>telo funkcie použijete ako konštruktor novej triedy, a pred názov funkcie dáte slovíčko <code class=\"language-text\">new</code>.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Obyčajná funkcia</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> jan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ján'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Person {name: 'Ján'}</span>\n<span class=\"token keyword\">var</span> richard <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Richard'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 To nepôjde</span></code></pre></div>\n<p>Aj teraz to môžete urobiť! Skúste si to v nástrojoch pre vývojárov. (DevTools / “Preskúmať prvok”)</p>\n<p>Ak spustíte <code class=\"language-text\">Person(&#39;Ján&#39;)</code> <strong>bez</strong> slovíčka <code class=\"language-text\">new</code>, <code class=\"language-text\">this</code> bude v tom kontexte niečo, čo vôbec nesúvisí s <code class=\"language-text\">Person</code> (napríklad <code class=\"language-text\">window</code> alebo <code class=\"language-text\">undefined</code>). Takže náš kód by buď nefungoval, alebo by urobil nejakú hlúposť a nastavil by <code class=\"language-text\">window.name</code>.</p>\n<p>Ak pred spustením dáme slovíčko <code class=\"language-text\">new</code>, prikážeme JavaScriptu, aby predstieral, že <code class=\"language-text\">Person</code> je konštruktorom triedy, <strong>a vytvorí prázdny objekt, nastaví <code class=\"language-text\">this</code> na ten objekt, nastaví <code class=\"language-text\">this.name</code> a vrátí ten upravený objekt.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> jan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ján'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Rovnaký objekt, aký je `this` vo funkcii `Person`</span></code></pre></div>\n<p>Taktiež operátor <code class=\"language-text\">new</code> nastaví premennú <code class=\"language-text\">jan</code> tak, aby mal prístup k <code class=\"language-text\">Person.prototype</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ahoj, volám sa '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">var</span> jan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ján'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">jan<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Takto vývojári imitovali triedy, než boli podporované samotným JavaScriptom.</p>\n<hr>\n<p>Takže operátor <code class=\"language-text\">new</code> je v JavaScripte už nejakú dobu. Ale triedy samy o sebe sú novinkou. Pomocou nich môžeme naznačiť náš zámer:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ahoj, volám sa '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> jan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ján'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njan<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Keď navrhujeme syntax a API, je dôležité myslieť aj na to, ako by vedel vývojár <em>naznačiť zámer kódu</em>.</p>\n<p>Ak sa vytvorí funkcia, JavaScript nevie, že či je tá funkcia jednoduchá a má byť iba spustená ako <code class=\"language-text\">alert()</code>, alebo že či je tá funkcia v skutočnosti konštruktor triedy ako je <code class=\"language-text\">new Person()</code>. Ak niekto zabudne na slovíčko <code class=\"language-text\">new</code> pred funkciou ako je <code class=\"language-text\">Person</code>, môže to vyvolať zmätok.</p>\n<p><strong>Syntaxou vieme naznačiť, že to nie je iba funkcia — ale trieda s konštruktorom.</strong> Ak zabudneme na slovíčko <code class=\"language-text\">new</code>, JavaScript sa bude sťažovať:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> jan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ján'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ✅ Ak je Person funkcia: funguje to</span>\n<span class=\"token comment\">// ✅ Ak je Person trieda: stále to funguje</span>\n\n<span class=\"token keyword\">let</span> richard <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Richard'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Zabudli sme na `new`</span>\n<span class=\"token comment\">// 😳 Ak je Person funkcia podobná triede: zmätok</span>\n<span class=\"token comment\">// 🔴 Ak je Person trieda: nebude to fungovať</span></code></pre></div>\n<p>Vďaka tomu vieme zistiť chyby skôr, než narazíme na nejaký divný problém, kde <code class=\"language-text\">this.name</code> je v skutočnosti <code class=\"language-text\">window.name</code>, a nie <code class=\"language-text\">richard.name</code>.</p>\n<p>To znamená, že React musí použiť slovíčko <code class=\"language-text\">new</code> predtým, než vytvorí inštanciu triedy. Nemôže ju použiť ako obyčajnú funkciu, pretože JavaScript by to bral ako chybu!</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ahoj</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 🔴 To sa nesmie:</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To by bol prúser.</p>\n<hr>\n<p>Predtým, než sa pozrieme na to, ako to rieši React, je dôležité vedieť, že väčšina ľudí používa nástroje, ako je Babel, aby mohli používať moderné funkcie v starších prehliadačoch. Takže musíme brať do úvahy aj kompilátory.</p>\n<p>V prvých verziách Babelu mohli byť triedy spustené bez použitia <code class=\"language-text\">new</code>. Samozrejme, tá chyba bola opravená — stačilo pridať kód navyše:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Skrátená verzia výstpného kódu:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot call a class as a function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// \"Nemožno spustiť triedu ako funkciu\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Náš kód:</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ján'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\n<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Richard'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 🔴 Cannot call a class as a function</span></code></pre></div>\n<p>Podobný kód ste mohli vidieť aj vo výstupe kompilátora. Práve to robí funkcia <code class=\"language-text\">_classCallCheck</code>. (Môžete zmenšiť veľkosť výstupu pomocou voľného režimu (loose mode), ktorý síce nepridáva žiadne kontroly, ale môže skomplikovať prechod na skutočné triedy.)</p>\n<hr>\n<p>Teraz by ste mali vedieť rozdiel medzi použitím <code class=\"language-text\">new</code> a <em>ne</em>použitím <code class=\"language-text\">new</code>:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code class=\"language-text\">new Person()</code></th>\n<th><code class=\"language-text\">Person()</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">class</code></td>\n<td>✅ <code class=\"language-text\">this</code> je inštancia objektu <code class=\"language-text\">Person</code></td>\n<td>🔴 <code class=\"language-text\">TypeError</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">function</code></td>\n<td>✅ <code class=\"language-text\">this</code> je inštancia objektu <code class=\"language-text\">Person</code></td>\n<td>😳 <code class=\"language-text\">this</code> je <code class=\"language-text\">window</code>/<code class=\"language-text\">undefined</code></td>\n</tr>\n</tbody>\n</table>\n<p>Práve preto je dôležité, aby React vedel spustiť komponentu napriamo. <strong>Ak je váša komponenta definovaná ako trieda, React musí pred jej spustením použiť <code class=\"language-text\">new</code>.</strong></p>\n<p>Vie React zistiť, že či je niečo trieda alebo nie?</p>\n<p>Nie je to také jednoduché. Aj keď <a href=\"https://stackoverflow.com/questions/29093396/how-do-you-check-the-difference-between-an-ecmascript-6-class-and-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v JavaScripte vieme rozlíšiť triedu od funkcie</a>, nefunguje to pre triedy, ktoré boli spracované nástrojmi ako sú Babel. Prehliadač si myslí, že sú to obyčajné funkcie. React má smolu.</p>\n<hr>\n<p>Dobre, môže React používať <code class=\"language-text\">new</code> pred každým spustením? Bohužiaľ, nie vždy.</p>\n<p>Keď spustíme obyčajnú funkciu pomocou <code class=\"language-text\">new</code>, získame inštanciu objektu. To chceme pri funkciách, ktoré sú v skutočnosti konštruktorom (akou je už spomínaný <code class=\"language-text\">Person</code>), ale bolo by to mätúce v prípade komponentov, ktoré sme definovali ako funkcie:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Neočákava sa, že tu bude `this` nejakou inštanciou</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ahoj</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aj to by sa ešte dalo tolerovať. Ale existujú <em>ďalšie</em> dva dôvody, prečo to nie je dobrý nápad.</p>\n<hr>\n<p>Prvým dôvodom je, že by operátor <code class=\"language-text\">new</code> nefungoval v skutočných skrátených funkciách (nie tie, ktoré boli kompilované Babelom). Ich spustenie s operátorom <code class=\"language-text\">new</code> vyhodí chybu:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ahoj</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 Greeting is not a constructor (\"Greeting nie je konštruktor\")</span></code></pre></div>\n<p>To nie je chyba, ale vlastnosť skrátených funkcií. Jednou z výhod skrátených funkcií je, že nemá svoje vlastné <code class=\"language-text\">this</code> — namiesto toho preberá <code class=\"language-text\">this</code> od jej najbližšej funkcie:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Friends</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token keyword\">const</span> friends <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> friends<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friend</span> <span class=\"token operator\">=></span>\n      <span class=\"token operator\">&lt;</span>Friend\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token comment\">// `this` je z metódy `render`</span></span><span class=\"gatsby-highlight-code-line\">        size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">}</span></span>        name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n        key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Dobre, takže <strong>skrátené funkcie nemajú svoje vlastné <code class=\"language-text\">this</code>.</strong> To ale znamená, že sú nepoužiteľné ako konštruktor!</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 🔴 To nedáva zmysel!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Práve preto <strong>JavaScript nedovolí spustenie skrátenej funkcie so slovíčkom <code class=\"language-text\">new</code>.</strong> Ak sa to stane, je šanca, že už ste aj tak spravili chybu, a je najlepšie sa o chybách dozvedieť čo najskôr. Z podobného dôvodu JavaScript nedovolí spustiť triedu <em>bez</em> <code class=\"language-text\">new</code>.</p>\n<p>Skvelé, ale to nám kazí plány. React nemôže používať <code class=\"language-text\">new</code> na všetko, pretože potom nemôžeme používať skrátené funkcie! Aj keď vieme zistiť, že či je nejaká funkcia skrátená, lebo ony nemajú <code class=\"language-text\">prototype</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// undefined</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// {constructor: f}</span></code></pre></div>\n<p>Ale to <a href=\"https://github.com/facebook/react/issues/4599#issuecomment-136562930\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nebude fungovať</a> pre funkcie skompilované pomocou nástrojov ako je Babel. Aj keď to nie je až taký problém, je aj ďalší dôvod, prečo to React nemôže robiť.</p>\n<hr>\n<p>Posledným dôvodom je, že by React nemohol podporovať komponenty, ktoré vracajú reťazce alebo iné jednoduché hodnoty.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Ahoj'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 'Ahoj'</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 Greeting {}</span></code></pre></div>\n<p>A to je kvôli tomu, lebo <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">operátor <code class=\"language-text\">new</code></a> vytvára objekt, ktorý bude vo funkcii ako <code class=\"language-text\">this</code>, a vracia nám ten objekt.</p>\n<p>Avšak funkcia, ktorá bola spustená pomocou <code class=\"language-text\">new</code> môže <em>určiť</em> objekt, ktorý bude vo funkcii definovaný ako <code class=\"language-text\">this</code>. Je to užitočné v prípadoch ako je “pooling,” kde jeden objekt môže byť použitý viackrát.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Hodnota bude nastavená neskôr</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> zeroVector <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>zeroVector <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Použi už vytvorenú objekt</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> zeroVector<span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    zeroVector <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😲 b === c</span></span></code></pre></div>\n<p>Ale <code class=\"language-text\">new</code> <em>ignoruje</em> vrátenú hodnotu, ak tá hodnota <em>nie</em> je objektom. Ak funkcia vráti reťazec alebo číslo, <code class=\"language-text\">new</code> sa tvári, ako keby funkcia nevrátila nič.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 42</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 Answer {}</span></code></pre></div>\n<p>Neexistuje žiaden spôsob, ako získať jednoduchú hodnotu (ako je číslo alebo reťazec) z funkcie, ktorá bola spustená pomocou <code class=\"language-text\">new</code>. Takže ak React by stále používal <code class=\"language-text\">new</code>, nemohol by pridať podporu pre komponenty, ktoré vracajú reťazce.</p>\n<p>To nie je prijateľné a práve preto potrebujeme nájsť kompromis.</p>\n<hr>\n<p>Čo sme sa teda naučili? React potrebuje spustiť triedy (vrátane výstupu z Babelu) <em>pomocou</em> <code class=\"language-text\">new</code>, ale funkcie, či obyčajné alebo skrátene, <em>bez</em> <code class=\"language-text\">new</code>. A neexistuje žiaden spoľahlivý spôsob, ako ich rozlíšiť.</p>\n<p><strong>Ak teda nevieme vyriešiť všeobecný problém, čo tak vyriešiť nejaký špecifický?</strong></p>\n<p>Ak definujete komponentu ako triedu, je šanca, že kvôli metódam ako je <code class=\"language-text\">this.setState()</code> rozšírite celú triedu <code class=\"language-text\">React.Component</code>. <strong>Čo keby namiesto toho, aby sme skúšali zistiť, že či je niečo trieda, by sme zisťovali, že či komponent rozširuje <code class=\"language-text\">React.Component</code>?</strong></p>\n<p>Spoiler: práve to React robí.</p>\n<hr>\n<p>Najlepším spôsobom, ako zistiť, že či je <code class=\"language-text\">Greeting</code> React komponenta vytvorená pomocou triedy je, že či <code class=\"language-text\">Greeting.prototype instanceof React.Component</code> vracia <code class=\"language-text\">true</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span>prototype <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>Viem, čo si práve myslíte. Čo sa to práve deje?! Aby bola odpoveď jasná, potrebujeme pochopiť, ako fungujú prototypy v JavaScripte.</p>\n<p>Určite ste počuli o “sieti prototypov.” Každý objekt v JavaScripte má svoj “prototyp.” Keď napíšeme <code class=\"language-text\">jan.sayHi()</code>, ale <code class=\"language-text\">jan</code> nemá vlastnosť <code class=\"language-text\">sayHi</code>, budeme ju hladať v prototype objektu <code class=\"language-text\">jan</code>. Ak ju nenájdeme ani tam, pozrieme sa na ďalší prototyp v sieti — prototyp prototypu objektu <code class=\"language-text\">jan</code>. A tak ďalej.</p>\n<p><strong>Avšak vlastnosť <code class=\"language-text\">prototype</code> <em>nie je</em> prototypom triedy alebo funkcie.</strong> Nie, nerobím si srandu.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🤪 Nie je prototyp objektu Person</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 Prototyp objektu Person</span></code></pre></div>\n<p>Takže tá “sieť prototypov” je skôr <code class=\"language-text\">__proto__.__proto__.__proto__</code>, než <code class=\"language-text\">prototype.prototype.prototype</code>. Trvalo mi to niekoľko rokov, než som to pochopil.</p>\n<p>Čo znamená vo funkcii alebo v triede vlastnosť <code class=\"language-text\">prototype</code>? <strong>Je to vlastne vlastnosť, ktorá je v inicializovaných objektoch nastavená ako <code class=\"language-text\">__proto__</code>!</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ahoj, volám sa '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> jan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ján'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Nastaví `jan.__proto__` na `Person.prototype`</span></span></code></pre></div>\n<p>JavaScript získava vlastnosti práve cez <code class=\"language-text\">__proto__</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">jan<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1. Má jan vlastnosť sayHi? Nie.</span>\n<span class=\"token comment\">// 2. Má jan.__proto__ vlastnosť sayHi? Áno. Spusti ju!</span>\n\njan<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1. Má jan vlastnosť toString? Nie.</span>\n<span class=\"token comment\">// 2. Má jan.__proto__ vlastnosť toString? Nie.</span>\n<span class=\"token comment\">// 3. Má jan.__proto__.__proto__ vlastnosť toString? Áno. Spusti ju!</span></code></pre></div>\n<p>V skutočnosti by ste nemali používať <code class=\"language-text\">__proto__</code>. Jedine ak hľadáte nejakú chybu, ktorá súvisí so sieťou prototypov. Ak chcete mať nejaké vlastnosti v <code class=\"language-text\">jan.__proto__</code>, mali by byť v <code class=\"language-text\">Person.prototype</code>. Aspoň to tak bolo pôvodne myslené.</p>\n<p>Vlastnosť <code class=\"language-text\">__proto__</code> vlastne nemala byť dostupná používateľom, pretože sieť prototypov bol považovaný za vnútorný koncept. Ale niektoré prehliadače pridali pre ňu podporu a vlastnosť bola štandardizovaná. (Ale je považovaná za zastaralú, a mala by sa používať funkcia <code class=\"language-text\">Object.getPrototypeOf()</code>.)</p>\n<p><strong>Stále nechápem prečo vlastnosť, ktorá sa nazýva <code class=\"language-text\">prototype</code> nevracia prototyp danej hodnoty</strong> (v tomto prípade <code class=\"language-text\">jan.prototype</code> nie je definovaný, pretože <code class=\"language-text\">jan</code> nie je funkcia). Ja si myslím, že toto je najväčším dôvodom prečo aj väčšina skúsených vývojárov nerozumie prototypom v JavaScripte.</p>\n<hr>\n<p>Ten príspevok je ale dlhý. Ale už sme na konci. To dáte.</p>\n<p>Keď spustíme <code class=\"language-text\">obj.foo</code>, JavaScript bude hľadať <code class=\"language-text\">foo</code> v premenných <code class=\"language-text\">obj</code>, <code class=\"language-text\">obj.__proto</code>, <code class=\"language-text\">obj.__proto__.__proto__</code>, a tak ďalej.</p>\n<p>Aj keď sa pomocou tried priamo nepripájate do siete, <code class=\"language-text\">extends</code> vo vnútri stále funguje na starej známej sieti prototypov. Vďaka tomu má komponenta v Reacte, ktorá bola vytvorená pomocou triedy prístup k metódam ako je <code class=\"language-text\">setState</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Ahoj</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greeting.prototype</span>\n<span class=\"gatsby-highlight-code-line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// React.Component.prototype</span></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object.prototype</span>\n\nc<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Nájdené v c.__proto__ (Greeting.prototype)</span>\n<span class=\"gatsby-highlight-code-line\">c<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Nájdené v c.__proto__.__proto__ (React.Component.prototype)</span></span>c<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Nájdené v c.__proto__.__proto__.__proto__ (Object.prototype)</span></code></pre></div>\n<p>Inými slovami, <strong>hierarchia triedy je podobná sieti prototypov:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// sieť rozširovania triedy cez `extends`</span>\nGreeting\n  → React<span class=\"token punctuation\">.</span>Component\n    → <span class=\"token function\">Object</span> <span class=\"token punctuation\">(</span>implicitly<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// sieť prototypov</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  → <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype\n    → React<span class=\"token punctuation\">.</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype\n      → <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype</code></pre></div>\n<hr>\n<p>Pretože sieť prototypov odzrkadľuje hierarchiu tried, máme možnosť zistiť, že či <code class=\"language-text\">Greeting</code> rozširuje <code class=\"language-text\">React.Component</code> tak, že začneme od <code class=\"language-text\">Greeting.prototype</code> a pokračujeme cez sieť prototypov:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// `__proto__` chain</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  → <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// 🕵️ Začíname</span></span><span class=\"gatsby-highlight-code-line\">    → React<span class=\"token punctuation\">.</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// ✅ Tu je!</span></span>      → <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype</code></pre></div>\n<p>Našťastie, <code class=\"language-text\">x instanceof Y</code> robí presne to isté. Hľadá <code class=\"language-text\">Y.prototype</code> v sieti prototypov <code class=\"language-text\">x.__proto__</code>.</p>\n<p>Obyčajne sa ten kód používa na to, aby sa zistilo, že či je niečo inštanciou triedy:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// greeting (🕵️‍ Začíname)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype (✅ Tu je!)</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype </span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// greeting (🕵️‍ Začíname)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype (✅ Tu je!)</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// greeting (🕵️‍ Začíname)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype (✅ Tu je!)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Banana</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// greeting (🕵️‍ Začíname)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype </span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype (🙅‍ Nenašli sme!)</span></code></pre></div>\n<p>Ale funguje aj v prípadoch, keď chceme zistiť, že či trieda rozširuje inú triedu:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// greeting</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype (🕵️‍ Začíname)</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype (✅ Tu je!)</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span></code></pre></div>\n<p>A takto vieme zistiť, že či je React komponenta trieda alebo obyčajná funkcia.</p>\n<hr>\n<p>Dobre, v skutočnosti React nepoužíva toto riešenie. 😳</p>\n<p>Problém s takýmto riešením je, že nefunguje ak je na stránke viac verzií Reactu, a komponenta, ktorú kontrolujeme, rozširuje <code class=\"language-text\">React.Component</code> <em>inej</em> verzie Reactu. Nie je dobré miešať viacero verzií Reactu z rôznych dôvodov, ale snažíme sa vyhnúť čo najviac možným chybám. (S funkciou Hooks ale budeme ale musieť <a href=\"https://github.com/facebook/react/issues/13991\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vynútiť používanie iba jednej verzie</a>)</p>\n<p>Mohli by sme skontrolovať, že či je v prototype metóda <code class=\"language-text\">render</code>. Ale vtedy <a href=\"https://github.com/facebook/react/issues/4599#issuecomment-129714112\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nebolo jasné</a>, že ako sa vyvinie API komponentu. Každá kontrola stojí niečo, a nechceli sme pridávať viac ako jednu. Taktiež by to nefungovalo, ak je metóda <code class=\"language-text\">render</code> definovaná ako metóda inštancie, ako je v prípade kódu s vlastnosťami triedy.</p>\n<p>Namiesto toho React <a href=\"https://github.com/facebook/react/pull/4663\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pridal</a> značku do základnej triedy. React skontroluje, že či tá komponenta má značku, a tak React vie, že či je niečo React komponenta definovaná pomocou triedy alebo nie.</p>\n<p>Najprv bola tá značka v samotnej triede <code class=\"language-text\">React.Component</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Vo vnútri Reactu</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nComponent<span class=\"token punctuation\">.</span>isReactClass <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Takto môžeme skontrolovať jej existenciu</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Greeting<span class=\"token punctuation\">.</span>isReactClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Áno</span></code></pre></div>\n<p>Avšak niektoré implementácie, na ktoré sme mysleli, <a href=\"https://github.com/scala-js/scala-js/issues/1900\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nekopírovali</a> statické vlastnosti (alebo nenastavovali <code class=\"language-text\">__proto__</code>), takže tá značka začala miznúť.</p>\n<p>To je dôvod, prečo v Reacte bola táto značka <a href=\"https://github.com/facebook/react/pull/5021\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">presunutá</a> do <code class=\"language-text\">React.Component.prototype</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Vo vnútri Reactu</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Takto môžeme skontrolovať jej existenciu</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Áno</span></code></pre></div>\n<p><strong>A to je doslova všetko.</strong></p>\n<p>Možno premýšľate nad tým, že prečo je táto vlastnosť objektom, a nie binárnou hodnotou. V skutočnosti je to jedno, ale v skorších verziách testovacieho frameworku Jest (predtým, než bol Jest vôbec dobrý™) bolo automatické simulovanie objektov automaticky zapnuté. Simulované objekty nemali v sebe vlastnosti s jednoduchými hodnotami, <a href=\"https://github.com/facebook/react/pull/4663#issuecomment-136533373\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a tak tá kontrola nefungovala vôbec</a>. Díky, Jest.</p>\n<p>V Reacte sa táto kontrola <a href=\"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/react-reconciler/src/ReactFiber.js#L297-L300\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">používa doteraz</a>.</p>\n<p>Ak nerozšírite <code class=\"language-text\">React.Component</code>, v prototype nebude <code class=\"language-text\">isReactComponent</code>, a nebude si myslieť, že táto komponenta je definovaná pomocou triedy. Teraz viete, prečo riešenie na chybu <code class=\"language-text\">Cannot call a class as a function</code> je použiť <code class=\"language-text\">extends React.Component</code>. <a href=\"https://stackoverflow.com/a/42680526/458193\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Táto odpoveď má v Stack Overflow najviac hlasov.</a> Nakoniec bolo <a href=\"https://github.com/facebook/react/pull/11168\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pridané upozornenie</a>, ktoré sa objaví, ak existuje <code class=\"language-text\">prototype.render</code>, ale nie <code class=\"language-text\">prototype.isReactComponent</code>.</p>\n<hr>\n<p>Možno si myslíte, že tým príbehom som vás nejako oklamal. <strong>V skutočnosti je to riešenie dosť jednoduché, ale taktiež som vám vysvetlil <em>prečo</em> React používa takéto riešenie, a aké boli iné možnosti.</strong></p>\n<p>Podľa vlastných skúsenosti vám viem povedať, že toto je stály problém s API knižníc. Aby sa API používalo jednoducho, taktiež potrebujete myslieť na rôzne vlastnosti jazyka (alebo jazykov, vrátane ich vízie), ich výkon, “ergonómiu” používania bez aj s kompiláciou, stav ekosystému a rôznych riešení systémov na inštaláciu závislostí, skoré upozornenia, atď. Konečný výsledok nemusí byť vždy elegantný, ale musí byť praktický.</p>\n<p><strong>Aby bolo konečné API úspešné, <em>užívatelia</em> nemusia myslieť na ten proces.</strong> Namiesto toho môžu tvoriť aplikácie.</p>\n<p>Ale ak ste zvedavý… je dobré vedieť, ako to funguje.</p>","timeToRead":15,"frontmatter":{"title":"Ako vie React rozoznať triedu od funkcie?","date":"December 02, 2018","spoiler":"V tomto článku hovorím o triedach, new, instanceof, sieti prototypov, a dizajne API.","cta":null},"fields":{"slug":"/sk/how-does-react-tell-a-class-from-a-function/","langKey":"sk"}}},"pageContext":{"slug":"/sk/how-does-react-tell-a-class-from-a-function/","translations":["es","fr","hu","ja","nl","pt-br","sk","zh-hans","zh-hant"],"translatedLinks":["/why-do-we-write-super-props/"]}}}