{"componentChunkName":"component---src-templates-blog-post-js","path":"/sk/why-do-we-write-super-props/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"2dcbb80a-f81f-56e3-acf8-d10124177ba6","html":"<p>Vraj je funkcia <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> v Reacte trendy. Ale blog zaƒç√≠nam vysvetlen√≠m ako funguj√∫ komponenty vytvoren√© pomocou <em>triedy</em>.</p>\n<p><strong>Tieto veci <em>nie s√∫</em> d√¥le≈æit√© na to, aby ste boli produkt√≠vni pri pou≈æ√≠van√≠ Reactu. Ale budete radi ak viete, ako veci funguj√∫.</strong></p>\n<p>Tu je prv√Ω pr√≠spevok.</p>\n<hr>\n<p>Do k√≥du som nap√≠sal <code class=\"language-text\">super(props)</code> toƒækokr√°t, ≈æe u≈æ to ani ner√°tam:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Samozrejme, nemus√≠me to robi≈•, keƒè pou≈æijeme <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vlastnosti triedy</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Syntax podobn√° tomuto bola v Reacte <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pl√°novan√°</a> u≈æ vo verzii 0.13, ktor√Ω pridal podporu pre triedy v roku 2015. Pou≈æitie kon≈°truktora a <code class=\"language-text\">super(props)</code> bolo len doƒçasn√Ωm rie≈°en√≠m dokiaƒæ vlastnosti triedy neposkytli pohodlnej≈°iu alternat√≠vu.</p>\n<p>Ale vr√°≈•me sa k pr√≠kladu, ktor√Ω pou≈æ√≠va iba funkcie ≈°tandardu ES2015:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Preƒço vlastne pou≈æ√≠vame funkciu <code class=\"language-text\">super</code>? M√¥≈æeme ju <em>ne</em>pou≈æ√≠va≈•? Ak ju mus√≠me pou≈æ√≠va≈•, ƒço sa stane keƒè jej neposkytneme <code class=\"language-text\">props</code>? Pou≈æ√≠vaj√∫ sa aj in√© parametre?</strong> Pozrime sa na to‚Ä¶</p>\n<hr>\n<p>V JavaScripte je funkcia <code class=\"language-text\">super</code> kon≈°truktor triedy, ktor√∫ roz≈°irujeme. (V tomto pr√≠klade sa jedn√° o implement√°ciu <code class=\"language-text\">React.Component</code>.)</p>\n<p>Je d√¥le≈æit√© vedie≈•, ≈æe v kon≈°truktore nem√¥≈æeme pou≈æ√≠va≈• <code class=\"language-text\">this</code> dovtedy, <em>pok√Ωm</em> nepou≈æijeme funkciu <code class=\"language-text\">super</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// üî¥ Nem√¥≈æeme pou≈æ√≠va≈• `this`</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ‚úÖ A≈æ teraz m√¥≈æeme pou≈æ√≠va≈• `this`</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Existuje dobr√Ω d√¥vod, preƒço JavaScript chce, aby sme zavolali kon≈°truktor roz≈°irovanej triedy <em>predt√Ωm</em>, ne≈æ pou≈æijeme <code class=\"language-text\">this</code>. Predstavme si hierarchiu:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üî¥ Toto sa nesmie</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dobr√Ω de≈à, priatelia!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Teraz si predstavme, ≈æe pou≈æijeme <code class=\"language-text\">this</code> pred funkciou <code class=\"language-text\">super</code>. O mesiac nesk√¥r chceme zmeni≈• funkciu <code class=\"language-text\">greetColleagues</code> tak, aby v spr√°ve bolo meno dotyƒçnej osoby:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dobr√Ω de≈à, priatelia!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Te≈°√≠ ma, vol√°m sa '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Dovtedy sme u≈æ aj zabudli, ≈æe funkcia <code class=\"language-text\">this.greetColleagues()</code> bola pou≈æit√° predt√Ωm, ne≈æ funkcia <code class=\"language-text\">super()</code> definovala <code class=\"language-text\">this.name</code>. To znamen√°, ≈æe vlastnos≈• <code class=\"language-text\">this.name</code> nie je definovan√°! Ako vid√≠te, pri takom k√≥de sa veƒæmi ≈•a≈æko prem√Ω≈°ƒæa.</p>\n<p>Preto <strong>JavaScript chce, aby sme zavolali <code class=\"language-text\">super</code> <em>predt√Ωm</em>, ne≈æ pou≈æijeme¬†<code class=\"language-text\">this</code>.</strong> Nech si trieda, ktor√° bola roz≈°√≠ren√°, rob√≠ ƒço len chce! To obmedzenie plat√≠ aj na komponenty, ktor√© s√∫ definovan√© pomocou triedy:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ‚úÖ A≈æ teraz m√¥≈æeme pou≈æ√≠va≈• `this`</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Z toho vypl√Ωva ƒèal≈°ia ot√°zka: preƒço poskytujeme funkcii <code class=\"language-text\">super</code> parameter <code class=\"language-text\">props</code>?</p>\n<hr>\n<p>Aby mohol kon≈°truktor triedy <code class=\"language-text\">React.Component</code> nastavi≈• <code class=\"language-text\">this.props</code>, mali by sme poskytn√∫≈• <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">funkcii <code class=\"language-text\">super</code> parameter <code class=\"language-text\">props</code></a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Vo vn√∫tri Reactu</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ale aj keby sme zavolali funkciu <code class=\"language-text\">super()</code> bez parametra <code class=\"language-text\">props</code>, st√°le by sme vedeli pou≈æ√≠va≈• <code class=\"language-text\">this.props</code> v met√≥dach ako je <code class=\"language-text\">render</code> a podobne. (Never√≠te? Vysk√∫≈°ajte to!)</p>\n<p>Ako to je mo≈æn√©, ≈æe <em>to</em> funguje? <strong>React nastavuje <code class=\"language-text\">props</code> hneƒè potom, ako pou≈æije <em>v√°≈°</em> kon≈°truktor:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Vo vn√∫tri Reactu</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tak≈æe aj keƒè zabudneme poskytn√∫≈• <code class=\"language-text\">props</code> funkcii <code class=\"language-text\">super()</code>, React ich nastav√≠. Aj na to je d√¥vod.</p>\n<p>Keƒè React pridal podporu pre triedy, nepridal podporu iba pre ES6. Cieƒæom bolo prida≈• podporu pre ƒço najviac abstrakcii triedy. A vtedy <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nebolo jasn√©</a>, ako √∫spe≈°n√© bud√∫ jazyky ako s√∫ ClojureScript, CoffeeScript, ES6, Fable, Scala.js alebo TypeScript. React bol z√°merne nestrann√Ω, a nevy≈æadoval pou≈æitie funkcie <code class=\"language-text\">super()</code> ‚Äî aj keƒè s√∫ triedy ≈°tandardu ES6 in√©.</p>\n<p>Znamen√° to, ≈æe m√¥≈æeme pou≈æ√≠va≈• <code class=\"language-text\">super()</code> namiesto <code class=\"language-text\">super(props)</code>?</p>\n<p><strong>Ani nie, preto≈æe je to m√§t√∫ce.</strong> √Åno, React nastav√≠ <code class=\"language-text\">this.props</code> <em>potom</em>, ako bol v√°≈° kon≈°truktor spusten√Ω. Len≈æe <em>od</em> zavolania funkcie <code class=\"language-text\">super</code> <em>a≈æ</em> po koniec kon≈°truktora nebude <code class=\"language-text\">this.props</code> definovan√Ω:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Vo vn√∫tri Reactu</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Vo va≈°om k√≥de</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üò¨ Zabudli sme na props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ‚úÖ {}</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üò¨ undefined </span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A je v√Ωzvou opravi≈• chybu, ktor√° nastane, keƒè je nejak√° funkcia volan√° <em>v kon≈°truktore</em>. <strong>Pr√°ve preto v≈ædy odpor√∫ƒçam pou≈æ√≠va≈• <code class=\"language-text\">super(props)</code>:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‚úÖ Posktyli sme props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ‚úÖ {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‚úÖ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vƒèaka tomu bude <code class=\"language-text\">this.props</code> dostupn√Ω e≈°te predt√Ωm, ne≈æ bude kon≈°truktor ukonƒçen√Ω.</p>\n<hr>\n<p>Je e≈°te jedna vec, o ktor√∫ sa m√¥≈æu zauj√≠ma≈• dlhodob√≠ pou≈æ√≠vatelia Reactu.</p>\n<p>Mohli ste si v≈°imn√∫≈•, ≈æe keƒè sa v triede pou≈æije Context API (ƒçi u≈æ pomocou zastaral√©ho <code class=\"language-text\">contextTypes</code> alebo modern√©ho <code class=\"language-text\">contextType</code>, pridan√©ho vo verzii 16.6), <code class=\"language-text\">context</code> je druh√Ωm parametrom kon≈°truktora.</p>\n<p>Preƒço teda nepou≈æ√≠vame <code class=\"language-text\">super(props, context)</code>? M√¥≈æeme, ale <code class=\"language-text\">context</code> sa nepou≈æ√≠va a≈æ tak ƒçasto.</p>\n<p><strong>Vƒèaka vlastnostiam triedy je tento probl√©m vyrie≈°en√Ω.</strong> Bez dan√©ho kon≈°truktora s√∫ v≈°etky parametre dan√© roz≈°irovanej triede. Kv√¥li tomu m√¥≈æe <code class=\"language-text\">state = {}</code> pou≈æi≈• <code class=\"language-text\">this.props</code> alebo <code class=\"language-text\">this.context</code>.</p>\n<p>Keƒè pou≈æ√≠vame funkciu Hooks, nepou≈æ√≠vame ani <code class=\"language-text\">super</code>, ani <code class=\"language-text\">this</code>. Ale to je t√©ma do bud√∫cna.</p>","timeToRead":4,"frontmatter":{"title":"Preƒço pou≈æ√≠vame super(props)?","date":"November 30, 2018","spoiler":"Koniec bude prekvapuj√∫ci.","cta":null},"fields":{"slug":"/sk/why-do-we-write-super-props/","langKey":"sk"}}},"pageContext":{"slug":"/sk/why-do-we-write-super-props/","translations":["cs","de","es","fa","fr","hu","it","ja","my","nb","nl","pl","pt-br","sk","sr","th","tr","vi","uk","zh-hant","zh-hans"],"translatedLinks":[]}}}