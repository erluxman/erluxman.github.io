{"componentChunkName":"component---src-templates-blog-post-js","path":"/how-does-setstate-know-what-to-do/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"9dab8e7c-b69c-55e7-9304-d0462ed3daa0","html":"<p>When you call <code class=\"language-text\">setState</code> in a component, what do you think happens?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Thanks</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me!</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sure, React re-renders the component with the next <code class=\"language-text\">{ clicked: true }</code> state and updates the DOM to match the returned <code class=\"language-text\">&lt;h1&gt;Thanks&lt;/h1&gt;</code> element.</p>\n<p>Seems straightforward. But wait, does <em>React</em> do it? Or <em>React DOM</em>?</p>\n<p>Updating the DOM sounds like something React DOM would be responsible for. But we’re calling <code class=\"language-text\">this.setState()</code>, not something from React DOM. And our <code class=\"language-text\">React.Component</code> base class is defined inside React itself.</p>\n<p>So how can <code class=\"language-text\">setState()</code> inside <code class=\"language-text\">React.Component</code> update the DOM?</p>\n<p><strong>Disclaimer: Just like <a href=\"/why-do-react-elements-have-typeof-property/\">most</a> <a href=\"/how-does-react-tell-a-class-from-a-function/\">other</a> <a href=\"/why-do-we-write-super-props/\">posts</a> on this blog, you don’t actually <em>need</em> to know any of that to be productive with React. This post is for those who like to see what’s behind the curtain. Completely optional!</strong></p>\n<hr>\n<p>We might think that the <code class=\"language-text\">React.Component</code> class contains DOM update logic.</p>\n<p>But if that were the case, how can <code class=\"language-text\">this.setState()</code> work in other environments? For example, components in React Native apps also extend <code class=\"language-text\">React.Component</code>. They call <code class=\"language-text\">this.setState()</code> just like we did above, and yet React Native works with Android and iOS native views instead of the DOM.</p>\n<p>You might also be familiar with React Test Renderer or Shallow Renderer. Both of these testing strategies let you render normal components and call <code class=\"language-text\">this.setState()</code> inside them. But neither of them works with the DOM.</p>\n<p>If you used renderers like <a href=\"https://github.com/facebook/react/tree/master/packages/react-art\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React ART</a>, you might also know that it’s possible to use more than one renderer on the page. (For example, ART components work inside a React DOM tree.) This makes a global flag or variable untenable.</p>\n<p>So somehow <strong><code class=\"language-text\">React.Component</code> delegates handling state updates to the platform-specific code.</strong> Before we can understand how this happens, let’s dig deeper into how packages are separated and why.</p>\n<hr>\n<p>There is a common misconception that the React “engine” lives inside the <code class=\"language-text\">react</code> package. This is not true.</p>\n<p>In fact, ever since the <a href=\"https://reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html#two-packages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">package split in React 0.14</a>, the <code class=\"language-text\">react</code> package intentionally only exposes APIs for <em>defining</em> components. Most of the <em>implementation</em> of React lives in the “renderers”.</p>\n<p><code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-dom/server</code>, <code class=\"language-text\">react-native</code>, <code class=\"language-text\">react-test-renderer</code>, <code class=\"language-text\">react-art</code> are some examples of renderers (and you can <a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/README.md#practical-examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">build your own</a>).</p>\n<p>This is why the <code class=\"language-text\">react</code> package is useful regardless of which platform you target. All its exports, such as <code class=\"language-text\">React.Component</code>, <code class=\"language-text\">React.createElement</code>, <code class=\"language-text\">React.Children</code> utilities and (eventually) <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a>, are independent of the target platform. Whether you run React DOM, React DOM Server, or React Native, your components would import and use them in the same way.</p>\n<p>In contrast, the renderer packages expose platform-specific APIs like <code class=\"language-text\">ReactDOM.render()</code> that let you mount a React hierarchy into a DOM node. Each renderer provides an API like this. Ideally, most <em>components</em> shouldn’t need to import anything from a renderer. This keeps them more portable.</p>\n<p><strong>What most people imagine as the React “engine” is inside each individual renderer.</strong> Many renderers include a copy of the same code — we call it the <a href=\"https://github.com/facebook/react/tree/master/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“reconciler”</a>. A <a href=\"https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html#migrating-to-google-closure-compiler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">build step</a> smooshes the reconciler code together with the renderer code into a single highly optimized bundle for better performance. (Copying code is usually not great for bundle size but the vast majority of React users only needs one renderer at a time, such as <code class=\"language-text\">react-dom</code>.)</p>\n<p>The takeaway here is that the <code class=\"language-text\">react</code> package only lets you <em>use</em> React features but doesn’t know anything about <em>how</em> they’re implemented. The renderer packages (<code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-native</code>, etc) provide the implementation of React features and platform-specific logic. Some of that code is shared (“reconciler”) but that’s an implementation detail of individual renderers.</p>\n<hr>\n<p>Now we know why <em>both</em> <code class=\"language-text\">react</code> and <code class=\"language-text\">react-dom</code> packages need to be updated for new features. For example, when React 16.3 added the Context API, <code class=\"language-text\">React.createContext()</code> was exposed on the React package.</p>\n<p>But <code class=\"language-text\">React.createContext()</code> doesn’t actually <em>implement</em> the context feature. The implementation would need to be different between React DOM and React DOM Server, for example. So <code class=\"language-text\">createContext()</code> returns a few plain objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// A bit simplified</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">defaultValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    _currentValue<span class=\"token operator\">:</span> defaultValue<span class=\"token punctuation\">,</span>\n    Provider<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    Consumer<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Provider <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.provider'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.context'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When you use <code class=\"language-text\">&lt;MyContext.Provider&gt;</code> or <code class=\"language-text\">&lt;MyContext.Consumer&gt;</code> in the code, it’s the <em>renderer</em> that decides how to handle them. React DOM might track context values in one way, but React DOM Server might do it differently.</p>\n<p><strong>So if you update <code class=\"language-text\">react</code> to 16.3+ but don’t update <code class=\"language-text\">react-dom</code>, you’d be using a renderer that isn’t yet aware of the special <code class=\"language-text\">Provider</code> and <code class=\"language-text\">Consumer</code> types.</strong> This is why an older <code class=\"language-text\">react-dom</code> would <a href=\"https://stackoverflow.com/a/49677020/458193\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fail saying these types are invalid</a>.</p>\n<p>The same caveat applies to React Native. However, unlike React DOM, a React release doesn’t immediately “force” a React Native release. They have an independent release schedule. The updated renderer code is <a href=\"https://github.com/facebook/react-native/commits/master/Libraries/Renderer/oss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">separately synced</a> into the React Native repository once in a few weeks. This is why features become available in React Native on a different schedule than in React DOM.</p>\n<hr>\n<p>Okay, so now we know that the <code class=\"language-text\">react</code> package doesn’t contain anything interesting, and the implementation lives in renderers like <code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-native</code>, and so on. But that doesn’t answer our question. How does <code class=\"language-text\">setState()</code> inside <code class=\"language-text\">React.Component</code> “talk” to the right renderer?</p>\n<p><strong>The answer is that every renderer sets a special field on the created class.</strong> This field is called <code class=\"language-text\">updater</code>. It’s not something <em>you</em> would set — rather, it’s something React DOM, React DOM Server or React Native set right after creating an instance of your class:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inside React DOM</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMUpdater<span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// Inside React DOM Server</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMServerUpdater<span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// Inside React Native</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactNativeUpdater<span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Looking at the <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactBaseClasses.js#L58-L67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">setState</code> implementation in <code class=\"language-text\">React.Component</code></a>, all it does is delegate work to the renderer that created this component instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// A bit simplified</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">partialState<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use the `updater` field to talk back to the renderer!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updater<span class=\"token punctuation\">.</span><span class=\"token function\">enqueueSetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> partialState<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React DOM Server <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRenderer.js#L442-L448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">might want to</a> ignore a state update and warn you, whereas React DOM and React Native would let their copies of the reconciler <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberClassComponent.js#L190-L207\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handle it</a>.</p>\n<p>And this is how <code class=\"language-text\">this.setState()</code> can update the DOM even though it’s defined in the React package. It reads <code class=\"language-text\">this.updater</code> which was set by React DOM, and lets React DOM schedule and handle the update.</p>\n<hr>\n<p>We know about classes now, but what about Hooks?</p>\n<p>When people first look at the <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks proposal API</a>, they often wonder: how does <code class=\"language-text\">useState</code> “know what to do”? The assumption is that it’s more “magical” than a base <code class=\"language-text\">React.Component</code> class with <code class=\"language-text\">this.setState()</code>.</p>\n<p>But as we have seen today, the base class <code class=\"language-text\">setState()</code> implementation has been an illusion all along. It doesn’t do anything except forwarding the call to the current renderer. And <code class=\"language-text\">useState</code> Hook <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactHooks.js#L55-L56\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">does exactly the same thing</a>.</p>\n<p><strong>Instead of an <code class=\"language-text\">updater</code> field, Hooks use a “dispatcher” object.</strong> When you call <code class=\"language-text\">React.useState()</code>, <code class=\"language-text\">React.useEffect()</code>, or another built-in Hook, these calls are forwarded to the current dispatcher.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// In React (simplified a bit)</span>\n<span class=\"token keyword\">const</span> React <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Real property is hidden a bit deeper, see if you can find it!</span>\n  __currentDispatcher<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And individual renderers set the dispatcher before rendering your component:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// In React DOM</span>\n<span class=\"token keyword\">const</span> prevDispatcher <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">React<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> ReactDOMDispatcher<span class=\"token punctuation\">;</span></span><span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> <span class=\"token function\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Restore it back</span></span><span class=\"gatsby-highlight-code-line\">  React<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> prevDispatcher<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>For example, the React DOM Server implementation is <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L340-L354\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>, and the reconciler implementation shared by React DOM and React Native is <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberHooks.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>This is why a renderer such as <code class=\"language-text\">react-dom</code> needs to access the same <code class=\"language-text\">react</code> package that you call Hooks from. Otherwise, your component won’t “see” the dispatcher! This may not work when you have <a href=\"https://github.com/facebook/react/issues/13991\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">multiple copies of React</a> in the same component tree. However, this has always led to obscure bugs so Hooks force you to solve the package duplication before it costs you.</p>\n<p>While we don’t encourage this, you can technically override the dispatcher yourself for advanced tooling use cases. (I lied about  <code class=\"language-text\">__currentDispatcher</code> name but you can find the real one in the React repo.) For example, React DevTools will use <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-debug-tools/src/ReactDebugHooks.js#L203-L214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a special purpose-built dispatcher</a> to introspect the Hooks tree by capturing JavaScript stack traces. <em>Don’t repeat this at home.</em></p>\n<p>This also means Hooks aren’t inherently tied to React. If in the future more libraries want to reuse the same primitive Hooks, in theory the dispatcher could move to a separate package and be exposed as a first-class API with a less “scary” name. In practice, we’d prefer to avoid premature abstraction until there is a need for it.</p>\n<p>Both the <code class=\"language-text\">updater</code> field and the <code class=\"language-text\">__currentDispatcher</code> object are forms of a generic programming principle called <em>dependency injection</em>. In both cases, the renderers “inject” implementations of features like <code class=\"language-text\">setState</code> into the generic React package to keep your components more declarative.</p>\n<p>You don’t need to think about how this works when you use React. We’d like React users to spend more time thinking about their application code than abstract concepts like dependency injection. But if you’ve ever wondered how <code class=\"language-text\">this.setState()</code> or <code class=\"language-text\">useState()</code> know what to do, I hope this helps.</p>\n<hr>","timeToRead":9,"frontmatter":{"title":"How Does setState Know What to Do?","date":"December 09, 2018","spoiler":"Dependency injection is nice if you don’t have to think about it.","cta":"react"},"fields":{"slug":"/how-does-setstate-know-what-to-do/","langKey":"en"}}},"pageContext":{"slug":"/how-does-setstate-know-what-to-do/","previous":{"fields":{"slug":"/my-wishlist-for-hot-reloading/","langKey":"en","directoryName":"my-wishlist-for-hot-reloading","maybeAbsoluteLinks":[]},"frontmatter":{"title":"My Wishlist for Hot Reloading"}},"next":{"fields":{"slug":"/optimized-for-change/","langKey":"en","directoryName":"optimized-for-change","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Optimized for Change"}},"translations":["es","fr","ja","ko","pt-br","tr","zh-hans"],"translatedLinks":[]}}}