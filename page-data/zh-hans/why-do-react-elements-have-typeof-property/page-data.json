{"componentChunkName":"component---src-templates-blog-post-js","path":"/zh-hans/why-do-react-elements-have-typeof-property/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"c6cb2aeb-474e-559f-a947-edc59a168018","html":"<p>你觉得你在写 JSX：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>marquee</span> <span class=\"token attr-name\">bgcolor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#ffa7c4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">hi</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>marquee</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>其实，你在调用一个方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/* type */</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* props */</span> <span class=\"token punctuation\">{</span> bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* children */</span> <span class=\"token string\">'hi'</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>之后方法会返回一个对象给你，我们称此对象为React的 <em>元素</em>（element），它告诉 React 下一个要渲染什么。你的组件（component）返回一个它们组成的树（tree）。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 🧐是谁</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果你用过 React，对 <code class=\"language-text\">type</code>、 <code class=\"language-text\">props</code>、 <code class=\"language-text\">key</code>、 和 <code class=\"language-text\">ref</code> 应该熟悉。 <strong>但 <code class=\"language-text\">$$typeof</code> 是什么？为什么用 <code class=\"language-text\">Symbol()</code> 作为它的值</strong>？</p>\n<p>这又是一个与你学习使用 React 不 <em>相关</em> 的点，但了解后你会觉得舒坦。这篇文章里也提到了些关于安全的提示，你可能会感兴趣。也许有一天你会有自己的UI库，这些都会派上用场的，我真的希望如此。</p>\n<hr>\n<p>在客户端 UI 库变得普遍且具有基本保护作用之前，应用程序代码通常是先构建 HTML，然后把它插入 DOM 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> messageEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessageEl<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;p>'</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/p>'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样看起来没什么问题，但当你 <code class=\"language-text\">message.text</code> 的值类似 <code class=\"language-text\">&#39;&lt;img src onerror=&quot;stealYourPassword()&quot;&gt;&#39;</code> 时，<strong>你不会希望别人写的内容在你应用的 HTML 中逐字显示的。</strong></p>\n<p>（有趣的是：如果你只是在前端渲染，这里为 <code class=\"language-text\">&lt;script&gt;</code> 标签，JavaScript 代码不会被运行。但<a href=\"https://gomakethings.com/preventing-cross-site-scripting-attacks-when-using-innerhtml-in-vanilla-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">不要因此</a>让你陷入已经安全的错觉。）</p>\n<p>为什么防止此类攻击，你可以用只处理文本的 <code class=\"language-text\">document.createTextNode()</code> 或者 <code class=\"language-text\">textContent</code>等安全的 API。你也可以事先将用户输入的内容，用转义符把潜在危险字符（<code class=\"language-text\">&lt;</code>、<code class=\"language-text\">&gt;</code>等）替换掉。</p>\n<p>尽管如此，这个问题的成本代价很高，且很难做到用户每次输入都记得转换一次。<strong>因此像React等新库会默认进行文本转义：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如果 <code class=\"language-text\">message.text</code> 是一个带有 <code class=\"language-text\">&lt;img&gt;</code> 或其他标签的恶意字符串，它不会被当成真的 <code class=\"language-text\">&lt;img&gt;</code> 标签处理，React 会先进行转义 <em>然后</em> 插入 DOM 里。所以 <code class=\"language-text\">&lt;img&gt;</code> 标签会以文本的形式展现出来。</p>\n<p>要在 React 元素中渲染任意 HTML，你不得不写 <code class=\"language-text\">dangerouslySetInnerHTML={{ __html: message.text }}</code>。<strong>其实这种愚蠢的写法是一个功能</strong>，在 code reviews 和代码库审核时，你可以非常清晰的定位到代码。</p>\n<hr>\n<p><strong>这意味着React完全不惧注入攻击了吗？不</strong>，HTML 和 DOM 暴露了<a href=\"https://github.com/facebook/react/issues/3473#issuecomment-90594748\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">大量攻击点</a>，对 React 或者其他 UI 库来说，要减轻伤害太难或进展缓慢。大部分存在的攻击方向涉及到属性，例如，如果你渲染 <code class=\"language-text\">&lt;a href={user.website}</code>，要提防用户的网址是 <code class=\"language-text\">&#39;javascript: stealYourPassword()&#39;</code>。 像 <code class=\"language-text\">&lt;div {...userData}&gt;</code> 写法几乎不受用户输入影响，但也有危险。</p>\n<p>React <a href=\"https://github.com/facebook/react/issues/10506\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">可以</a>逐步提供更多保护，但在很多情况下，威胁是服务器产生的，这不管怎样都<a href=\"https://github.com/facebook/react/issues/3473#issuecomment-91327040\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">应该</a>要避免。</p>\n<p>不过，转义文本这第一道防线可以拦下许多潜在攻击，知道这样的代码是安全的就够了吗？</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 自动转义</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>好吧，也不总是有效的</strong>。这就是 <code class=\"language-text\">$$typeof</code> 的用武之地了。</p>\n<hr>\n<p>React 元素（elements）是设计好的 <em>plain object</em>：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>虽然通常用 <code class=\"language-text\">React.createElement()</code> 创建它，但这不是必须的。有一些 React 用例来证实像上面这样的 <em>plain object</em> 元素是有效的。当然，你不会<em>想</em>这样写的，但这<a href=\"https://github.com/facebook/react/pull/3583#issuecomment-90296667\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">可以用来</a>优化编译器，在 workers 之间传递 UI 元素，或者将 JSX 从 React 包解耦出来。</p>\n<p>但是，如果你的服务器有允许用户存储任意 JSON 对象的漏洞，而前端需要一个字符串，这可能会发生一个问题：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 服务端允许用户存储 JSON</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> expectedTextButGotJSON <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  type<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    dangerouslySetInnerHTML<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      __html<span class=\"token operator\">:</span> <span class=\"token string\">'/* 把你想的搁着 */'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ...</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> text<span class=\"token operator\">:</span> expectedTextButGotJSON <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// React 0.13 中有风险</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在这个例子中，React 0.13<a href=\"http://danlec.com/blog/xss-via-a-spoofed-react-element\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">很容易</a>受到 XSS 攻击。再次声明，<strong>这个攻击是服务端存在漏洞导致的</strong>。不过，React 会为了大家的安全做更多工作。从 React 0.14 开始，它做到了。</p>\n<p>React 0.14 修复手段是用 Symbol 标记每个 React 元素（element）：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这是个有效的办法，因为JSON不支持 <code class=\"language-text\">Symbol</code> 类型。<strong>所以即使服务器存在用JSON作为文本返回安全漏洞，JSON 里也不包含 <code class=\"language-text\">Symbol.for(&#39;react.element&#39;)</code></strong>。React 会检测 <code class=\"language-text\">element.$$typeof</code>，如果元素丢失或者无效，会拒绝处理该元素。</p>\n<p>特意用 <code class=\"language-text\">Symbol.for()</code> 的好处是 <strong>Symbols 通用于 iframes 和 workers 等环境中</strong>。因此无论在多奇怪的条件下，这方案也不会影响到应用不同部分传递可信的元素。同样，即使页面上有很多个 React 副本，它们也 「接受」 有效的 <code class=\"language-text\">$$typeof</code> 值。</p>\n<hr>\n<p>如果浏览器不支持 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Symbols</a> 怎么办？</p>\n<p>唉，那这种保护方案就无效了。React仍然会加上 <code class=\"language-text\">$$typeof</code> 字段以保证一致性，但只是<a href=\"https://github.com/facebook/react/blob/8482cbe22d1a421b73db602e1f470c632b09f693/packages/shared/ReactSymbols.js#L14-L16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">设置一个数字</a>而已 —— <code class=\"language-text\">0xeac7</code>。</p>\n<p>为什么是这个数字？因为 <code class=\"language-text\">0xeac7</code> 看起来有点像 「React」。</p>","timeToRead":5,"frontmatter":{"title":"为什么React元素有一个$$typeof属性？","date":"December 03, 2018","spoiler":"有些部分是关于安全的。","cta":null},"fields":{"slug":"/zh-hans/why-do-react-elements-have-typeof-property/","langKey":"zh-hans"}}},"pageContext":{"slug":"/zh-hans/why-do-react-elements-have-typeof-property/","translations":["es","fr","ja","pt-br","zh-hans"],"translatedLinks":[]}}}