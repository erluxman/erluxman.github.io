{"componentChunkName":"component---src-templates-blog-post-js","path":"/zh-hans/the-bug-o-notation/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"a24ab7af-f41f-59e5-b455-e75acf8504e5","html":"<p>当你在写一些关乎性能的代码时，最好时刻注意它的算法复杂度。算法复杂度通常会用<a href=\"https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">大 O 表示法</a>来体现。</p>\n<p>大 O 表示法是一种衡量指标：当传入的数据越来越大时，你的代码会变得多慢。举个例子，如果一个排序算法有 O(<i>n<sup>2</sup></i>) 复杂度，对原来量级 50 倍的元素排序，你的代码大约会慢 50<sup>2</sup> = 2,500 倍。大 O 表示法不会给你一个确切的数值，但它能让你更好地理解你的算法的伸缩性。</p>\n<p>一些例子：O(<i>n</i>)、O(<i>n</i> log <i>n</i>)、O(<i>n<sup>2</sup></i>) 和 O(<i>n!</i>)。</p>\n<p>然而，<strong>这篇文章不是关于算法和性能的</strong>，而是关于 APIs 和调试的。事实证明，设计 API 时也需要考虑类似的事情。</p>\n<hr>\n<p>我们绝大多数时间都在为我们的代码找 bug 和修 bug。大多数开发者也希望能更快地找到 bug。即便最后 bug 找到了，舒服了，但它也可能消耗了我们一整天的时间，有这个时间都够你完成几个 roadmap 上的事情了。</p>\n<p>调试的体验受我们选择的抽象、库和工具的影响。有的 API 和语言设计就能让我们避免一整类的错误，但有的则会制造无尽的麻烦。<strong>但你怎么区分它们呢？</strong></p>\n<p>网上许多关于 APIs 的讨论都主要集中在审美上，但那真的<a href=\"/optimized-for-change/\">对实际使用它时的感受没有太大影响</a>。</p>\n<p><strong>关于这件事有一个衡量指标，我称它为 <em>Bug-O</em> 表示法:</strong></p>\n<p><font size=\"40\">🐞(<i>n</i>)</font></p>\n<p>大 O 表示法描述随着数据量增大，你的算法会变得多慢。<em>Bug-O</em> 表示法描述随着代码量的增大，这个 API 会让<strong>你</strong>做一件事变得多慢。</p>\n<hr>\n<p>来看一个例子，假设下面的代码每次都通过像 <code class=\"language-text\">node.appendChild()</code> 和 <code class=\"language-text\">node.removeChild()</code> 这样命令式的操作来手动更新 DOM，并且没有明确的组织结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Section 1</span>\n  <span class=\"token keyword\">let</span> spinner <span class=\"token operator\">=</span> <span class=\"token function\">createSpinner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token comment\">// Section 2</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> successMessage <span class=\"token operator\">=</span> <span class=\"token function\">createSuccessMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>successMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token comment\">// Section 3</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token function\">createErrorMessage</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> retryButton <span class=\"token operator\">=</span> <span class=\"token function\">createRetryButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span>\n    retryButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Section 4</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>问题不在于代码丑不丑，我们暂且不谈代码的美观性。<strong>问题是如果现在这个代码里出现了一个 bug，我都不知道从哪查起。</strong></p>\n<p><strong>取决于回调和事件触发的顺序，整个程序中代码运行的路径组合会非常多，</strong>其中有些能产生正确的结果，有些我可能会看到多个进度条或者什么奇怪的现象，有的时候甚至程序直接就崩溃了。</p>\n<p>这个函数有 4 个不同的部分，并且顺序没有保证。根据我粗略的计算，它们的运行顺序大约有 4×3×2×1 = 24 种。如果我们在代码里再添加一些东西，可能会有 8×7×6×5×4×3×2×1 — <em>四万</em>多种组合。你就慢慢调试去吧…</p>\n<p><strong>换句话说，它的 Bug-O 是 🐞(<i>n!</i>)</strong>，其中 <em>n</em> 是修改 DOM 的代码片段数。是的，它是阶乘级的。当然，我这里可能不是很严谨。实际情况下不是所有的组合都会发生。不过另一方面，这些代码片段可能会执行多次，whatever… 总之这个代码就是不怎么样，我们可以做得更好。</p>\n<hr>\n<p>为了改进这个代码的 Bug-O，我们可以限制可能的状态和结果数量。我们不需要使用任何库，只要强化一下代码的结构。比如这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> currentState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  step<span class=\"token operator\">:</span> <span class=\"token string\">'initial'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 'initial' | 'pending' | 'success' | 'error'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Don't allow to submit twice</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Clear all existing children</span>\n  formStatus<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  currentState <span class=\"token operator\">=</span> nextState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'initial'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'pending'</span><span class=\"token operator\">:</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'success'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">let</span> successMessage <span class=\"token operator\">=</span> <span class=\"token function\">createSuccessMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>successMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'error'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token function\">createErrorMessage</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> retryButton <span class=\"token operator\">=</span> <span class=\"token function\">createRetryButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      retryButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> trySubmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看起来可能差异不大，甚至更啰嗦了，但是它却戏剧性地让调试变得更简单了。因为这几行：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Clear all existing children</span>\n<span class=\"gatsby-highlight-code-line\">  formStatus<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token comment\">// ... the code adding stuff to formStatus ...</span></code></pre></div>\n<p>通过在做任何操作前清空表单状态，我们保证了所有 DOM 操作都从新开始。这就是为什么我们可以战胜必然发生的<a href=\"/the-elements-of-ui-engineering/\">墒变</a>，通过<em>不让错误积累</em>。这个代码的做法有点像“把它关掉然后再打开”，就是这么神奇。</p>\n<p><strong>如果结果有错误，我们只需要往回想一步，看一下上次的 <code class=\"language-text\">setState</code> 调用。</strong> 调试渲染结果的 Bug-O 是 🐞(<em>n</em>) 其中 <em>n</em> 是渲染相关的代码路径数，在这里即为 4（因为 <code class=\"language-text\">switch</code> 里有 4 种情况）。</p>\n<p>我们可能仍然会在<em>设置</em>状态的时候遇到竞态，但是调试它会比之前更简单，因为每个中间状态都可以被日志记录和检查。我们也可以显式地阻止一些非预期的状态变化：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Don't allow to submit twice</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，每次都重置 DOM 也有利有弊。简单地移除然后重建 DOM 会销毁它们的内部状态，让它们失去焦点，在更大型的应用里也会造成严重的性能问题。</p>\n<p>这也就是为什么像 React 这样的库会很有帮助了，因为它们只需要让你思考如何从零开始搭建 UI，实际上库的内部却并不是这样做的：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FormStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    step<span class=\"token operator\">:</span> <span class=\"token string\">'initial'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Don't allow to submit twice</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> content<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'pending'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Spinner</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'success'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SuccessMessage</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'error'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorMessage</span></span> <span class=\"token attr-name\">error</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RetryButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>代码看起来可能不太一样，但是原则是相同的。组件的抽象强化了指责的边界，因此你不知道其他页面上能影响 DOM 和状态的代码。组件化有助于降低 Bug-O。</p>\n<p>事实上，如果一个 React 应用里有任何值在 DOM 上看起来不太对，你都可以跟踪它是从哪里来的，通过一个一个地查看在它之上的组件的代码。不论你的应用有多大，跟踪一个渲染出来的值是 🐞(<em>tree height</em>) 的。</p>\n<p><strong>下一次你看到一个有关 API 的讨论，首先考虑：它的常规调试任务的 🐞(<em>n</em>) 是多少？</strong> 现有你十分熟悉的 APIs 和开发原则怎么样？Redux、CSS、继承… 它们都有自己的 Bug-O。</p>\n<hr>","timeToRead":6,"frontmatter":{"title":"“Bug-O” 表示法","date":"January 25, 2019","spoiler":"你的 API 的 🐞(<i>n</i>) 是什么？","cta":null},"fields":{"slug":"/zh-hans/the-bug-o-notation/","langKey":"zh-hans"}}},"pageContext":{"slug":"/zh-hans/the-bug-o-notation/","translations":["es","fr","ja","ko","uk","zh-hans","zh-hant"],"translatedLinks":["/optimized-for-change/","/the-elements-of-ui-engineering/"]}}}