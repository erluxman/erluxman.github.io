{"componentChunkName":"component---src-templates-blog-post-js","path":"/ja/how-does-setstate-know-what-to-do/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"ea2e91f7-ff0f-508c-b1dc-d793bf1d5bcf","html":"<p>コンポーネントの中で <code class=\"language-text\">setState</code>を呼び出すとき、何が起こると思いますか？</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Thanks</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me!</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>そう、次の <code class=\"language-text\">{clicked：true}</code>の状態でReactはコンポーネントを再レンダリングし、返された <code class=\"language-text\">&lt;h1&gt; Thanks &lt;/h1&gt;</code>要素と一致するようにDOMを更新します。</p>\n<p>簡単そうに見えますね。しかし待ってくださいこれは <em>React</em> がしますか？それとも <em>React DOM</em> ？</p>\n<p>DOMを更新することは、React DOMの責務のように思えます。しかし、React DOMのものではない、<code class=\"language-text\">this.setState()</code>を呼び出しています。 そして私たちの <code class=\"language-text\">React.Component</code>クラスはReactの内部で定義されています。</p>\n<p>ならどうやって <code class=\"language-text\">React.Component</code>内の<code class=\"language-text\">setState()</code>がDOMを更新することができるのでしょうか。</p>\n<p><strong>免責事項：このブログの他のほとんど(<a href=\"/why-do-react-elements-have-typeof-property/\">これとか</a>, <a href=\"/how-does-react-tell-a-class-from-a-function/\">これとか</a>, <a href=\"/why-do-we-write-super-props/\">これ</a>)の投稿と同じように、Reactを効率的に使うために知る必要はありません。この記事は、カーテンの裏に何があるのかを知りたい人のためのものです。 完全にオプション！</strong></p>\n<hr>\n<p><code class=\"language-text\">React.Component</code>クラスはDOM更新ロジックを含んでいると思うかもしれません。</p>\n<p>しかし、そうであれば、 <code class=\"language-text\">this.setState()</code>は他の環境でどのように機能するのでしょうか？ 例えば、React Nativeアプリケーションのコンポーネントは <code class=\"language-text\">React.Component</code>も継承しています。これらは上記と同じように <code class=\"language-text\">this.setState()</code>を呼び出しますが、React NativeはDOMの代わりにAndroidおよびiOSのネイティブビューで動作します。</p>\n<p>React Test RendererまたはShallow Rendererについても知っているかもしれませんが、 どちらのテスト方法でも通常のコンポーネントをレンダリングしてその中で <code class=\"language-text\">this.setState()</code>を呼び出すことができますが、どちらもDOMとは連携できません。</p>\n<p><a href=\"https://github.com/facebook/react/tree/master/packages/react-art\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React ART</a>のようなレンダラーを使用した場合は、ページ上で複数のレンダラーを使用することが可能です。(たとえば、ARTコンポーネントはReact DOMツリー内で機能します。)これにより、グローバルフラグまたは変数が保持できなくなります。</p>\n<p>だからどういうわけか <strong><code class=\"language-text\">React.Component</code>は状態の更新を扱うことをプラットフォーム固有のコードに委任します。</strong> これがどのように起こるかを理解する前にパッケージがどのように分離されるか、そしてその理由を深く掘り下げましょう。</p>\n<hr>\n<p>Reactの「エンジン」は <code class=\"language-text\">react</code>パッケージの中にあるという一般的な誤解があります。 これは事実と異なります。</p>\n<p>実際、パッケージが<a href=\"https://reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html#two-packages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 0.14</a>で分割されて以来、<code class=\"language-text\">react</code>パッケージは意図的にコンポーネントを定義するためのAPIのみを公開しています。 Reactの実装の大部分は「レンダラー」にあります。</p>\n<p><code class=\"language-text\">react-dom</code>、<code class=\"language-text\">react-dom / server</code>、 <code class=\"language-text\">react-native</code>、<code class=\"language-text\">react-test-renderer</code>、 <code class=\"language-text\">react-art</code>はレンダラーの例です（そして<a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/README.md#practical-examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">自分で作ることもできます</a>）。</p>\n<p>これはあなたがどのプラットフォームをターゲットにしているかに関わらず <code class=\"language-text\">react</code>パッケージが便利だからです。 すべてのエクスポートは以下のとおりです。<code class=\"language-text\">React.Component</code>、<code class=\"language-text\">React.createElement</code>、 <code class=\"language-text\">React.Children</code>そして（最終的には）<a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> これらはターゲットプラットフォームから独立しています。React DOM、React DOM Server、React Nativeのいずれを実行しても、コンポーネントはインポートして同じ方法で使用します。</p>\n<p>対照的に、レンダラパッケージはReact階層をDOMノードにマウントすることを可能にする <code class=\"language-text\">ReactDOM.render()</code>のようなプラットフォーム特有のAPIを公開します。各レンダラーはこのようなAPIを提供します。\n理想的には、ほとんどのコンポーネントはレンダラーから何かをインポートする必要はありません。 これにより、移植性が高まります。</p>\n<p><strong>ほとんどの人がReactの「エンジン」として想像しているのは、個々のレンダラーの内部にあります。</strong> 多くのレンダラーには同じコードのコピーが含まれています - これを<a href=\"https://github.com/facebook/react/tree/master/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“reconciler”</a>と呼びます。 <a href=\"https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html#migrating-to-google-closure-compiler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ビルドステップ</a> では、reconcilerのコードとレンダラーコードをスムーズにまとめて、パフォーマンスを向上させるための高度に最適化された単一のバンドルにします。\n(コードのコピーはバンドルサイズ的には良いものではありませんが、Reactユーザーの大多数は一度に1つのレンダラーしか必要としません（例えば <code class=\"language-text\">react-dom</code>)</p>\n<p>ここで重要なのは、 <code class=\"language-text\">react</code>パッケージはReactの機能を使うだけで、実装されている方法については何も知らないということです。\nレンダラパッケージ（ <code class=\"language-text\">react-dom</code>、<code class=\"language-text\">react-native</code>など）はReact機能とプラットフォーム固有のロジックの実装を提供します。\nそのコードの一部は共有されていますが(“reconciler”)、個々のレンダラーの実装の詳細です。</p>\n<hr>\n<p>これで新機能のために <code class=\"language-text\">react</code>と<code class=\"language-text\">react-dom</code>パッケージの両方を更新する必要がある理由がわかりましたね。\n例えば、React 16.3がContext APIを追加したとき、 <code class=\"language-text\">React.createContext()</code>がReactパッケージに公開されました。</p>\n<p>しかし <code class=\"language-text\">React.createContext()</code>は実際にはコンテキスト機能を実装していません。 たとえば、React DOMとReact DOM Serverでは実装が異なる必要があります。 そのため <code class=\"language-text\">createContext()</code>はいくつかのプレーンなオブジェクトを返します。:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 少し簡略化しています</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">defaultValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    _currentValue<span class=\"token operator\">:</span> defaultValue<span class=\"token punctuation\">,</span>\n    Provider<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    Consumer<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Provider <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.provider'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.context'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>コード内で<code class=\"language-text\">&lt;MyContext.Provider&gt;</code>または<code class=\"language-text\">&lt;MyContext.Consumer&gt;</code>を使用する場合、それらをどのように処理するかを決定するのはレンダラーです。\nReact DOMはある方法でコンテキスト値を追跡するかもしれませんが、React DOM Serverはそれを別の方法で行うかもしれません。</p>\n<p><strong>したがって、「react」を16.3以降に更新しても、「react-dom」を更新しない場合は、特別な「Provider」型と「Consumer」型をまだ認識していないレンダラーを使用することになります。</strong> これが、古い <code class=\"language-text\">react-dom</code>が<a href=\"https://stackoverflow.com/a/49677020/458193\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">これらの型が無効だと言って失敗</a>する理由です。</p>\n<p>同じ警告がReact Nativeにも当てはまります。 ただし、React DOMとは異なり、ReactリリースはすぐにはReact Nativeリリースを「強制」しません。独立したリリーススケジュールを持っています。更新されたレンダラーコードは、数週間に1回、React Nativeリポジトリに<a href=\"https://github.com/facebook/react-native/commits/master/Libraries/Renderer/oss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">個別に同期</a>されます。\nこれが、React DOMとは異なるスケジュールでReact Nativeの機能が利用可能になる理由です。</p>\n<hr>\n<p>さて、これで <code class=\"language-text\">react</code>パッケージにはおもしろいものは何も含まれていないってことがわかりましたね。そして実装は<code class=\"language-text\">react-dom</code>や <code class=\"language-text\">react-native</code>のようなレンダラーにあります。しかし、これでは質問に答えていませんね。 <code class=\"language-text\">React.Component</code>内の<code class=\"language-text\">setState()</code>はどのようにして正しいレンダラーと「対話」しますか？</p>\n<p><strong>答えは、すべてのレンダラーが、作成されたクラスに特別なフィールドを設定することです。</strong> このフィールドは「updater」と呼ばれています。\nそれはあなたが設定するものではありません - むしろ、それはあなたのクラスのインスタンスを作成した直後にReact React DOM ServerまたはReact Nativeがセットするものです：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// React DOM 内部</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMUpdater<span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// React DOM Server 内部</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMServerUpdater<span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// React Native 内部</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactNativeUpdater<span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactBaseClasses.js#L58-L67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">React.Component</code>の<code class=\"language-text\">setState</code>の実装</a>を見てください。このコンポーネントインスタンスを作成したレンダラーに作業を委任するだけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 少し簡略化しています</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">partialState<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// レンダラーと「対話」するには `updater`フィールドを使って!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updater<span class=\"token punctuation\">.</span><span class=\"token function\">enqueueSetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> partialState<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React DOMサーバーは状態の更新を無視して<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRenderer.js#L442-L448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">警告しようとするかもしれません。</a> 一方、React DOMとReact Nativeはそれらの”reconciler”のコピーにそれを<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberClassComponent.js#L190-L207\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">処理させる</a>でしょう。</p>\n<p>これが、Reactパッケージで定義されている場合でも、<code class=\"language-text\">this.setState()</code>がDOMを更新する方法です。React DOMによって設定された <code class=\"language-text\">this.updater</code>を読み、React DOMに更新をスケジュールさせ処理させます。</p>\n<hr>\n<p>クラスについてはわかりましたが、フックについてはどうですか？</p>\n<p>初めて<a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks proposal API</a>を見たとき、しばしば疑問に思うようです「<code class=\"language-text\">useState</code>はどのようにしたらよいのでしょうか?」仮定として、これが <code class=\"language-text\">this.setState()</code>を使った<code class=\"language-text\">React.Component</code>クラスよりも「魔法的」であることです。\nしかし、今日見たように、クラスの<code class=\"language-text\">setState()</code>の実装は初めからずっと「幻想的」です。 現在のレンダラーを呼び出すこと以外は何もしません。</p>\n<p>そして <code class=\"language-text\">useState</code>フックは<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactHooks.js#L55-L56\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">全く同じことをします。</a></p>\n<p><strong><code class=\"language-text\">updater</code>フィールドの代わりに、フックは”dispatcher”オブジェクトを使います。</strong> <code class=\"language-text\">React.useState()</code>,<code class=\"language-text\">React.useEffect()</code>あるいは他の組み込みHookを呼び出すと、これらの呼び出しは現在のディスパッチャに転送されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// React内 (少し簡略化しています)</span>\n<span class=\"token keyword\">const</span> React <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 本当のプロパティはもう少し深くに隠されています。見つけられたら見てください！</span>\n  __currentDispatcher<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>そして個々のレンダラーはコンポーネントをレンダリングする前にディスパッチャーを設定します：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// React DOM内</span>\n<span class=\"token keyword\">const</span> prevDispatcher <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">React<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> ReactDOMDispatcher<span class=\"token punctuation\">;</span></span><span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> <span class=\"token function\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// 元に戻す</span></span><span class=\"gatsby-highlight-code-line\">  React<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> prevDispatcher<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>例えば、React DOM Serverの実装は<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L340-L354\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">こちら</a>です。\nそしてReact DOMとReact Nativeが共有する”reconciler”の実装は<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberHooks.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ここ</a>です。</p>\n<p>これが <code class=\"language-text\">react-dom</code>のようなレンダラーがHooksを呼ぶのと同じ<code class=\"language-text\">react</code>パッケージにアクセスする理由です。\nそうでなければ、あなたのコンポーネントはディスパッチャーを「見る」ことができません！\n同じコンポーネントツリーに<a href=\"https://github.com/facebook/react/issues/13991\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">複数のReactのコピー</a>がある場合、これはうまく機能しない可能性があります。しかし、これは常にあいまいなバグを引き起こすので、Hooksはパッケージの重複を解決することを強制します。</p>\n<p>これはお勧めできませんが、高度なツールのユースケースでは、技術的にディスパッチャを上書きすることができます。(<code class=\"language-text\">__currentDispatcher</code>の名前について嘘をつきましたが、本物をReactリポジトリで見つけることができます。)例えばReact DevToolsは<a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-debug-tools/src/ReactDebugHooks.js#L203-L214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">特定のディスパッチャ</a>を使用してJavaScriptスタックトレースのキャプチャによってHooksツリーを観察します。<em>良い子は真似しないでください</em></p>\n<p>これは、フックが本質的にReactと結び付いていないことも意味します。 将来もっと多くのライブラリが同じ原始的なフックを再利用したいならば、\n理論的には、ディスパッチャーは別のパッケージに移動し、「怖くない」名前のファーストクラスAPIとして公開される可能性があります。\n実際には、それが必要になるまで早期の抽象化は避けますが。</p>\n<p><code class=\"language-text\">updater</code>フィールドと<code class=\"language-text\">__currentDispatcher</code>オブジェクトはどちらも <em>dependency injection</em> と呼ばれる一般的なプログラミング原則の形式です。 どちらの場合も、レンダラーは <code class=\"language-text\">setState</code>のような機能の実装を一般的なReactパッケージに「注入」して、コンポーネントの宣言性を高めます。</p>\n<p>Reactを使うときにこれがどのように機能するかを考える必要はありません。\n<em>dependency injection</em> のような抽象的な概念よりも、Reactユーザーは自分のアプリケーションのコードについてもっと時間をかけて欲しいと思います。\nしかし、<code class=\"language-text\">this.setState()</code>や<code class=\"language-text\">useState()</code>がどうやって何をすべきか判断するのかを疑問に思ったことがあるなら、これが役に立つことを願っています。</p>\n<hr>","timeToRead":12,"frontmatter":{"title":"setStateはどうやって何をすべきか判断するの？","date":"December 09, 2018","spoiler":"詳細を知る必要がない場合、依存性の注入は有効です。","cta":null},"fields":{"slug":"/ja/how-does-setstate-know-what-to-do/","langKey":"ja"}}},"pageContext":{"slug":"/ja/how-does-setstate-know-what-to-do/","translations":["es","fr","ja","ko","pt-br","tr","zh-hans"],"translatedLinks":["/why-do-react-elements-have-typeof-property/","/how-does-react-tell-a-class-from-a-function/","/why-do-we-write-super-props/"]}}}