{"componentChunkName":"component---src-templates-blog-post-js","path":"/ja/why-do-react-elements-have-typeof-property/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"65c8e5a8-8635-5c89-8ba4-eb6ae2d894e0","html":"<p>あなたはJSXを書いていると思うかもしれません：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>marquee</span> <span class=\"token attr-name\">bgcolor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#ffa7c4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">hi</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>marquee</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>しかし実際には関数を呼び出しています。:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/* type */</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* props */</span> <span class=\"token punctuation\">{</span> bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* children */</span> <span class=\"token string\">'hi'</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>そしてこの関数はオブジェクトを返します。このオブジェクトをReact <em>element</em> と呼びます。次に何をレンダリングするかReactに指示します。あなたの書いたコンポーネントはそれらのツリーを返します。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 🧐 これ誰</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Reactを使ったことがあれば<code class=\"language-text\">type</code>, <code class=\"language-text\">props</code>, <code class=\"language-text\">key</code>,<code class=\"language-text\">ref</code>フィールドは知っているかもしれませんが、\n<strong><code class=\"language-text\">$$typeof</code>ってなんだ？しかもなぜ値に<code class=\"language-text\">Symbol()</code>が入っているんだ？</strong></p>\n<p>これはReactを使うことにおいては知る必要がないことですが、この記事にはセキュリティについてのいくつかのヒントがあります。 いつかあなたはUIライブラリを書くでしょう、その時これは役に立つかもしれません。\n私はそう望んでいます。</p>\n<hr>\n<p>クライアントサイドのUIライブラリが一般的になる前はアプリケーションコードにHTMLを構築してDOMに挿入するのが一般的でした。:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> messageEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessageEl<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;p>'</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/p>'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> <code class=\"language-text\">message.text</code>が<code class=\"language-text\">&#39;&lt;img src onerror = &quot;stealYourPassword()&quot;&gt;&#39;</code>のようなものである場合を除いて、それは問題なく動作します。 <strong>見知らぬ人によって書かれたものが、アプリケーションのレンダリングされたHTMLにそのまま表示されることを望まないでください。</strong></p>\n<p>(面白い事実：クライアントサイドでのレンダリングだけを行うのであれば、<code class=\"language-text\">&lt;script&gt;</code>タグを使ってもJavaScriptを実行<a href=\"https://gomakethings.com/preventing-cross-site-scripting-attacks-when-using-innerhtml-in-vanilla-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">できません。</a>)</p>\n<p>そのような攻撃から保護するために、テキストだけを扱う <code class=\"language-text\">document.createTextNode()</code>や <code class=\"language-text\">textContent</code>のような安全なAPIを使うことができます。 また、ユーザーが指定したテキスト内の <code class=\"language-text\">&lt;</code>、 <code class=\"language-text\">&gt;</code>などの潜在的に危険な文字を置き換えることによって、入力を率先してにエスケープすることもできます。</p>\n<p>それでも、間違いのコストは高く、ユーザーが作成した文字列を出力に挿入するたびに保護しなければいけないのは面倒です。\n<strong>これが、Reactのような最新のライブラリがデフォルトで文字列のテキストコンテンツをエスケープする理由です。</strong> :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">message.text</code>が <code class=\"language-text\">&lt;img&gt;</code>や他のタグを含む悪意のある文字列である場合、それは本当の<code class=\"language-text\">&lt;img&gt;</code>タグにはなりません。 ReactはコンテンツをエスケープしてDOMに挿入します。 そのため <code class=\"language-text\">&lt;img&gt;</code>タグを見る代わりに、そのマークアップを見るだけです。</p>\n<p>React elements内に任意のHTMLを描画するには、 <code class=\"language-text\">dangerouslySetInnerHTML = {{__html：message.text}}</code>と書く必要があります。 <strong>ぎこちない感じに書くというのが特徴です</strong> コードレビューやコードベース監査で確認できるように、見やすくすることを目的としています。</p>\n<hr>\n<p><strong>Reactがインジェクション攻撃から完全に安全であるということですか？ 違います。</strong> HTMLとDOMは<a href=\"https://github.com/facebook/react/issues/3473#issuecomment-90594748\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">たくさんの攻撃対象領域</a>を提供しますが、Reactや他のUIライブラリがそれを軽減するには難しすぎるか遅すぎます。他の攻撃手法の大部分は属性を含みます。 たとえば、 <code class=\"language-text\">&lt;a href={user.website}&gt;</code>をレンダリングする場合は、Webサイトが <code class=\"language-text\">&#39;javascript：stealYourPassword()&#39;</code>であるユーザーに注意してください。 <code class=\"language-text\">&lt;div {... userData}&gt;</code>のようにユーザの情報を展開することはまれですが危険です。</p>\n<p>Reactは時間をかけてより多くの保護を<a href=\"https://github.com/facebook/react/issues/10506\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">提供することができますが</a>、多くの場合、これらは<a href=\"https://github.com/facebook/react/issues/3473#issuecomment-91327040\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">修正されるべき</a>サーバーの問題の結果です。</p>\n<p>それでも、テキストコンテンツのエスケープは、多くの潜在的な攻撃をキャッチする合理的な防御の第一線です。 このようなコードが安全であることを知っておくのはいいことではありませんか？</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 自動でエスケープされます</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>まあ、必ずしも安全ではないですが。</strong> そこで <code class=\"language-text\">$$typeof</code>が登場します。</p>\n<hr>\n<p>React elementsは、設計上、単純なオブジェクトです。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通常、それらを <code class=\"language-text\">React.createElement()</code>で作成しますが、必須ではありません。上で行ったように書かれたオブジェクトをサポートするReactための有効な使用例があります。もちろん、このように記述したくないと思うかもしれません - しかし、<a href=\"https://github.com/facebook/react/pull/3583#issuecomment-90296667\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">これは</a>最適化コンパイラ、ワーカー間でのUI要素の受け渡し、またはReactパッケージからのJSXの分離に役立ちます。</p>\n<p>しかしながら、<strong>サーバーに任意のJSONオブジェクトを保存するための口がある場合</strong> クライアントコードは文字列を期待します、これは問題になるかもしれません：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// サーバーにユーザー情報のJSONを許可する口がある場合</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> expectedTextButGotJSON <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  type<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    dangerouslySetInnerHTML<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      __html<span class=\"token operator\">:</span> <span class=\"token string\">'/* ここに悪いコードを置く */'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ...</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> text<span class=\"token operator\">:</span> expectedTextButGotJSON <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// React 0.13で危険</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>その場合、React 0.13はXSS攻撃に対して<a href=\"http://danlec.com/blog/xss-via-a-spoofed-react-element\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">脆弱</a>になります。\nさらに明確にすると、<strong>この攻撃は既存のサーバーホールに依存しています</strong>。\nそれでも、Reactはその問題に対して人々を保護するためのより良い仕事をすることができました。 React 0.14から始まっています。</p>\n<p>React 0.14での修正は、<a href=\"https://github.com/facebook/react/pull/4832\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">すべてのReact要素にシンボルを付ける</a>です。:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>JSONには単に<code class=\"language-text\">Symbol</code>を入れることができないので、これはうまくいきます。 <strong>そのため、サーバーにセキュリティホールがあり、テキストではなくJSONを返す場合でも、そのJSONには <code class=\"language-text\">Symbol.for( &#39;react.element&#39;)</code>を含めることができません。</strong> Reactは<code class=\"language-text\">element.$$typeof</code>をチェックします。そしてそれがない場合もしくは無効な場合に要素の処理を拒否します。</p>\n<p>特に<code class=\"language-text\">Symbol.for()</code>を使うことのいいところは、<strong>シンボルはiframeやワーカーのような環境間でグローバルであるということです。</strong>\nそのため、この修正によって、よりエキゾチックな状況でも、アプリのさまざまな部分の間で信頼できる要素を渡すことが妨げられることはありません。\n同様に、たとえページ上にReactのコピーが複数あっても、それらは有効な <code class=\"language-text\">$$typeof</code>の値に「同意する」ことができます。</p>\n<hr>\n<p>Symbolsを<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">サポートしていない</a>ブラウザーについてはどうですか？</p>\n<p>ああ、彼らはこの特別な保護を受けていません。Reactは一貫性のためにまだ要素上に <code class=\"language-text\">$$typeof</code>フィールドを含んでいますが、それは<a href=\"https://github.com/facebook/react/blob/8482cbe22d1a421b73db602e1f470c632b09f693/packages/shared/ReactSymbols.js#L14-L16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">数値に設定</a>されています — <code class=\"language-text\">0xeac7</code>。</p>\n<p>なぜこの数字なの？ <code class=\"language-text\">0xeac7</code>はちょっと“React”のように見えますねぇ。</p>","timeToRead":7,"frontmatter":{"title":"なぜReact Elementは$$typeofプロパティを持っているの？","date":"December 03, 2018","spoiler":"セキュリティと関係があります。","cta":null},"fields":{"slug":"/ja/why-do-react-elements-have-typeof-property/","langKey":"ja"}}},"pageContext":{"slug":"/ja/why-do-react-elements-have-typeof-property/","translations":["es","ja","fr","pt-br","zh-hans"],"translatedLinks":[]}}}