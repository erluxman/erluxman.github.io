{"componentChunkName":"component---src-templates-blog-post-js","path":"/ja/how-are-function-components-different-from-classes/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"af773d85-06cf-5b2f-88c0-60ac1e841cfd","html":"<p>Reactの関数コンポーネントはReactのクラスとどう違うのでしょう？</p>\n<p>しばらくの間、その標準的な回答は、クラスは（stateのような）より多くの機能へのアクセスを提供する、というものでした。<a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a>によって、それはもう正しい回答ではなくなりました。</p>\n<p>そのどちらかがパフォーマンスにおいて優れてる、と聞いたことがあるかもしれません。どちらのことでしょう？それらのベンチマークの多くには<a href=\"https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f?source=your_stories_page---------------------------\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">不備がある</a>ので、私はその<a href=\"https://github.com/ryardley/hooks-perf-issues/pull/2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">結論を下す</a>のに慎重です。パフォーマンスは、関数を選ぶかクラスを選ぶかということよりも、むしろ主としてそのコードがしていることに依存しています。私たちの見てきた限り、最適化の戦略は少々<a href=\"https://reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">異なる</a>とはいえ、そのパフォーマンスの違いはわずかです。</p>\n<p>どちらのケースであれ、その他に理由があるか、アーリーアダプターであることを気にしない限りは、すでに存在しているコンポーネントを書き直すことは<a href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-hooks-classes-or-a-mix-of-both\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">推奨していません</a>。Hooksは（2014年のReactがそうだったように）未だ新しく、「ベストプラクティス」のいくつかは、どうチュートリアルに組み込むべきかまだ見つけられていないのです。</p>\n<p>では私たちに何ができるのでしょう？Reactの関数とクラスに何か根本的な違いはあるのでしょうか？もちろんあります — それはメンタルモデルにあるのです。<strong>このポストでは、それらの最も大きな違いについて見ていきます。</strong>それは2015年に関数コンポーネントが<a href=\"https://reactjs.org/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">導入された</a>時から存在したものですが、多くの場合見落とされてきました:</p>\n<blockquote>\n<p><strong>関数コンポーネントはレンダリングされた値を捕獲します。</strong></p>\n</blockquote>\n<p>この意味を紐解いていきましょう。</p>\n<hr>\n<p><strong>注: このポストはクラスあるいは関数に対する価値判断を行うものではありません。私はReactにおけるそれら2つのプログラミングモデルの違いを説明しているだけです。関数をより広く採用することに関する質問については、<a href=\"https://reactjs.org/docs/hooks-faq.html#adoption-strategy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooksについてのよくある質問</a>を参照してください。</strong></p>\n<hr>\n<p>以下のコンポーネントについて考えてください:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProfilePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>このコンポーネントは、ネットワークリクエストを<code class=\"language-text\">setTimeout</code>によってシミュレートして、確認のアラートを出すボタンを表示します。例えば、もし<code class=\"language-text\">props.user</code>が<code class=\"language-text\">&#39;Dan&#39;</code>なら、3秒後に<code class=\"language-text\">&#39;Followed Dan&#39;</code>と表示します。シンプルです。</p>\n<p><em>(上記の例でアロー関数式を使うかfunction式を使うかというのは問題ではありません。<code class=\"language-text\">function handleClick()</code>は全く同じように動くでしょう。)</em></p>\n<p>ではこれをクラスとしてはどのように書くでしょう？単純に変換すると以下のようになります:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>これら2つのコードのスニペットは一般的に同等のものだと考えられています。人々は多くの場合、これらのパターン間を自由にリファクタします。それが引き起こす結果に気がつかずに:</p>\n<p><img src=\"/1d3c7a341ee3fcadc79df00e7d872e4b/wtf.gif\" alt=\"2つのバージョンの違いを突き止める\"></p>\n<p><strong>しかし、これらの2つのスニペットは微妙に異なるものなのです。</strong>よく見てください。もうその違いがわかりましたか？個人的には、気がつくまでにしばらく時間がかかりました。</p>\n<p><strong>この先にネタバレがあります。自分で解き明かしたい人のために、<a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ライブデモ</a> を用意しました。</strong>この記事の残りはその違いとなぜそれが問題なのか、を説明しています。</p>\n<hr>\n<p>ここから先を続ける前に、ここで説明する違いはReactのHooksと本質的には何も関係がない、ということを強調しておきたいです。上記の例に至ってはHooksを使ってすらいません！</p>\n<p>以下は全てReactにおける関数とクラスの違いについてです。もしあなたがReactのアプリケーションでより頻繁に関数を使うつもりなら、理解するとよいと思います。</p>\n<hr>\n<p><strong>Reactのアプリケーションで一般的に見られるバグを用いてその違いを解説しましょう。</strong></p>\n<p>この<a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">サンプルのサンドボックス</a>を開いて見てください。現在のプロフィールのためのセレクタがあり、上に記載した2種類の実装の<code class=\"language-text\">ProfilePage</code>が、それぞれフォローボタンをレンダリングしています。</p>\n<p>以下の一連の動作をそれぞれのボタンで試して見てください:</p>\n<ol>\n<li>フォローボタンのどちらか1つを<strong>クリックする</strong>。</li>\n<li>3秒以内にプロフィールの選択を<strong>変更する</strong>。</li>\n<li>アラートのテキストを<strong>読む</strong>。</li>\n</ol>\n<p>妙な違いに気がつくでしょう:</p>\n<ul>\n<li><strong>関数</strong>の<code class=\"language-text\">ProfilePage</code>の場合、 Danのプロフィールでフォローをクリックして、Sophieのプロフィールに移動しても、アラートは <code class=\"language-text\">&#39;Followed Dan&#39;</code>のままです。</li>\n<li><strong>クラス</strong>の<code class=\"language-text\">ProfilePage</code>の場合、アラートは <code class=\"language-text\">&#39;Followed Sophie&#39;</code>となります:</li>\n</ul>\n<p><img src=\"/386a449110202d5140d67336a0ade5a0/bug.gif\" alt=\"それらのステップのデモンストレーション\"></p>\n<hr>\n<p>この例では、最初の挙動が正しいものです。<strong>もし私がある人をフォローして、その後別の人のプロフィールに移動したとしても、コンポーネントは私が誰をフォローしたのか間違えてはいけません。</strong>このクラスの実装は明らかにバグっています。</p>\n<p><em>(当然<a href=\"https://mobile.twitter.com/sophiebits\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sophieをフォロー</a>すべきだとは思いますが。)</em></p>\n<hr>\n<p>ではクラスの例はなぜこのように振る舞うのでしょう？</p>\n<p>クラス内の<code class=\"language-text\">showMessage</code>メソッドをよく見てましょう:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>このクラスメソッドは<code class=\"language-text\">this.props.user</code>を読み取っています。propsはReactにおいてはイミュータブルなので、変化しません。<strong>しかし、<code class=\"language-text\">this</code>は<em>今ここでは</em>、そしてこれまでも、ミュータブルなのです。</strong></p>\n<p>実際、それこそがクラスにおける<code class=\"language-text\">this</code>の目的なのです。React自体がそれを時に応じて書き換えることで、<code class=\"language-text\">render</code>やライフサイクルメソッドの中でその新鮮なバージョンを読み取ることができるのです。</p>\n<p>なので、リクエストの送信中にコンポーネントが再度レンダリングすると、<code class=\"language-text\">this.props</code>は変化します。そして<code class=\"language-text\">showMessage</code>メソッドは「新しすぎる」<code class=\"language-text\">props</code>から<code class=\"language-text\">user</code>を読み取ることになります。</p>\n<p>これはユーザインタフェースの性質における興味深い知見を明らかにしています。もし、UIが概念的にはアプリケーションの現在の状態を表す機能である、とすると、<strong>イベントハンドラは、その見た目上の結果同様、レンダリング結果の一部です。</strong>イベントハンドラは特定のpropsとstateを用いた特定のrenderに「属しています」。</p>\n<p>しかし、<code class=\"language-text\">this.props</code>を読み取るコールバックを持ったtimeoutをスケジューリングすることは、この連携を破壊します。<code class=\"language-text\">showMessage</code>というコールバックはいずれのrenderとも「紐づく」ことがなく、正しいpropsを「見失ってしまう」のです。<code class=\"language-text\">this</code>からの読み取りがそれらの連結を切り離します。</p>\n<hr>\n<p><strong>関数コンポーネントが存在しないとしましょう。</strong> どうやってこの問題を解決できるでしょう？</p>\n<p>正しいpropsを用いた<code class=\"language-text\">render</code>とそれらのpropsを読み取る<code class=\"language-text\">showMessage</code>コールバックとの連結をどうにか「修復」したいです。どこか途中で<code class=\"language-text\">props</code>は道に迷ってしまっています。</p>\n<p>その方法の1つは<code class=\"language-text\">this.props</code>をイベントの早い地点で読み取り、timeoutを完成させるハンドラにそれらを明示的に渡すことです:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></span>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>これは<a href=\"https://codesandbox.io/s/3q737pw8lq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">うまくいきます</a>。しかし、このアプローチはコードをかなり冗長にし、時間が経つにつれにエラーを起こしやすくします。もし1つ以上のpropが必要になったらどうなるでしょう？もしstateにアクセスする必要もでてきたら？<strong>もし<code class=\"language-text\">showMessage</code>が別のメソッドを呼んで、そしてそのメソッドが<code class=\"language-text\">this.props.something</code>や<code class=\"language-text\">this.state.something</code>を読み取るのだとしたら、全く同じ問題に再度直面することになります。</strong>そして<code class=\"language-text\">showMessage</code>から呼ばれている全てのメソッドに<code class=\"language-text\">this.props</code>と<code class=\"language-text\">this.state</code>を引数として渡さなければならなくなるでしょう。</p>\n<p>そうすることはクラスが通常もたらすはずの人間工学を打ち負かすことになります。また、こうすることを覚えていたり強制するのは難しいことです。だから多くの場合は代わりにバグを作ることで手を打つことになるのです。</p>\n<p>同じように、<code class=\"language-text\">handleClick</code>の内部に<code class=\"language-text\">alert</code>をインライン化することはより大きな問題への回答になりません。私たちは、より多くのメソッドに分割できるようなやり方で、<em>そしてそれだけではなく</em>、その呼び出しに関連するrenderに対応するpropsとstateを読み取れるようなやり方で、コードを構築したいのです。<strong>この問題はReactに特有の問題ではありません。 - <code class=\"language-text\">this</code>のようなミュータブルなオブジェクトにデータを置くあらゆるUIライブラリでも再現できる問題です。</strong></p>\n<p>もしかして、メソッドをコンストラクタ内で<em>bind</em>できるでしょうか？</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>いえ、これは何も修復していません。問題は<code class=\"language-text\">this.props</code>から読み取るのが遅すぎることにあるのを思い出してください。どのシンタックスを使っているのかが問題ではないのです！<strong>しかし、この問題は私たちがJavaScriptのクロージャに完全に頼ってしまえば消え去るのです。</strong></p>\n<p>クロージャは多くの場合避けられています。なぜなら時間の経過と共に書き換えられ得る値について考えるのは<a href=\"https://wsvincent.com/javascript-closure-settimeout-for-loop/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">困難</a>だからです。しかしReactでは、propsとstateはイミュータブルです！（あるいは少なくとも、そうであることが強く推奨されています。）このことはクロージャにおける主要なfootgunを取り除きます。</p>\n<p>これは、もし特定のrenderで発生したpropsやstateを閉じ込めれば、それらがいつでも同じものだとみなせることを意味します:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// propsを捕獲しましょう!</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></span>\n    <span class=\"token comment\">// 注: ここは*render内部*です。</span>\n    <span class=\"token comment\">// なのでこれらはクラスメソッドではありません。</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>あなたはrenderの瞬間のpropsを「捕獲した」のです:</strong></p>\n<p><img src=\"/fa483dd5699aac1350c57591770a49be/pokemon.gif\" alt=\"ポケモンを捕獲する\"></p>\n<p>こうすることで、（<code class=\"language-text\">showMessage</code>を含む）この内部のあらゆるコードは、特定のrenderのためのpropsを見ることが保証されます。もうReactが「チーズを消してしまう」ことはありません。</p>\n<p><strong>その上で、その内部にヘルパー関数を好きなだけ追加することできます。それらは全て捕獲されたpropsとstateを使います。</strong>レスキュー(解放)へと通じるクロージャ(閉鎖)なのです！</p>\n<hr>\n<p><a href=\"https://codesandbox.io/s/oqxy9m7om5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上記の例</a>は正しいのですが、中途半端に見えます。もしクラスメソッドを使う代わりに<code class=\"language-text\">render</code>内部に関数を定義するなら、クラスを持つことの意義は何でしょうか？</p>\n<p>確かに、その周りのクラスという「殻」を取り除くことで、コードをシンプルにすることが可能です:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProfilePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>先に挙げた例のように、<code class=\"language-text\">props</code>は捕獲されています - Reactがそれらを引数として渡します。<strong><code class=\"language-text\">this</code>とは異なり、<code class=\"language-text\">props</code>オブジェクト自体はReactによって書き換えられることはありません。</strong></p>\n<p>関数定義内で<code class=\"language-text\">props</code>を分割すると、このことがもう少し明白になります:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProfilePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>親コンポーネントが別のpropsで<code class=\"language-text\">ProfilePage</code>をレンダリングする時、Reactは<code class=\"language-text\">ProfilePage</code>関数を再度呼び出します。しかし私たちが既にクリックしたそのイベントハンドラはそれ以前のrenderに「属して」います。そしてそちらは独自の<code class=\"language-text\">user</code>の値を使っており、その<code class=\"language-text\">showMessage</code>コールバックはその値を読み取っています。それらはそのまま残っているのです。</p>\n<p>これが、この関数バージョンの<a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">デモ</a>において、Sophieのプロフィールにてフォローをクリックして、その後Sunilに選択を変えても<code class=\"language-text\">&#39;Followed Sophie&#39;</code>とアラートがでる理由です:</p>\n<p><img src=\"/84396c4b3982827bead96912a947904e/fix.gif\" alt=\"正しい挙動のデモ\"></p>\n<p>この挙動は正しいものです。<em>(<a href=\"https://mobile.twitter.com/threepointone\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sunilもフォロー</a>した方がいいと思うのですが！)</em></p>\n<hr>\n<p>これでReactにおける関数とクラスの大きな違いを理解できました:</p>\n<blockquote>\n<p><strong>関数コンポーネントはレンダリングされた値を捕獲します。</strong></p>\n</blockquote>\n<p><strong>Hooksを使えば、同じ原則がstateにも適応できます。</strong>以下の例を考えてみて下さい:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MessageThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You said: '</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSendClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleMessageChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleMessageChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSendClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Send</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(こちらが <a href=\"https://codesandbox.io/s/93m5mz9w24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ライブデモ</a>です。)</p>\n<p>これはよくできたメッセージアプリのUIではありませんが、同じポイントを説明しています: もし私が特定のメッセージを送る場合、そのコンポーネントはどのメッセージが送られたかを間違えるべきではありません。この関数コンポーネントの<code class=\"language-text\">message</code>は、ブラウザに呼び出されたクリックハンドラを返却したrenderに「属する」stateを捕獲します。なので<code class=\"language-text\">message</code>は私が「Send」をクリックした時の入力にあったものになります。</p>\n<hr>\n<p>Reactの関数がデフォルトでpropsとstateを捕獲することはわかったと思います。<strong>しかし、もし私たちが、その特定のrenderに属していない最新のpropsもしくはstateを読み取り<em>たい</em>場合はどうなるでしょう？</strong>もし私たちが<a href=\"https://dev.to/scastiel/react-hooks-get-the-current-state-back-to-the-future-3op2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">「未来からそれらを読み取りたい」</a>場合はどうでしょう？</p>\n<p>クラスにおいては、<code class=\"language-text\">this.props</code>もしくは<code class=\"language-text\">this.state</code>を読み取ることでそれができるでしょう。なぜなら<code class=\"language-text\">this</code>自体がミュータブルだからです。Reactがそれを書き換えます。関数コンポーネントにおいても、あらゆるコンポーネントのrenderに共有されるミュータブルな値を持つことが可能です。それは「ref」と呼ばれています:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// `ref.current`の読み取り、もしくは、書き込みが可能です。</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>しかしながら、refはあなたが自分で管理する必要があります。</p>\n<p>refはインスタンスフィールドと<a href=\"https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">同じ役割を持ちます</a>。それはミュータブルで命令型の世界への脱出口です。「DOMのref」という考えに馴染みがあるかもしれませんが、そのコンセプトははるかに汎用的です。それは中に何かを入れるための単なる入れ物なのです。</p>\n<p>視覚的にも、<code class=\"language-text\">this.something</code>は<code class=\"language-text\">something.current</code>の鏡のようです。それらは同じコンセプトを表しています。</p>\n<p>デフォルトでは、Reactが関数コンポーネント内で最新のpropsやstateのためのrefを作ることはありません。多くの場合それらは必要ありませんし、それらをアサインするのは無駄な仕事でしょう。しかし、もしそうしたければその値を手動で追跡することは可能です:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MessageThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> latestMessage <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You said: '</span> <span class=\"token operator\">+</span> latestMessage<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSendClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleMessageChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    latestMessage<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">showMessage</code>内の<code class=\"language-text\">message</code>を読み取ると、Sendボタンを押した時のmessageを見ることになるでしょう。しかし<code class=\"language-text\">latestMessage.current</code>を読み取ると、たとえSendボタンが押された後にタイピングし続けたとしても、その最新の値が取得されます。</p>\n<p>自分でその違いを見たければ、この<a href=\"https://codesandbox.io/s/93m5mz9w24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2つ</a>の<a href=\"https://codesandbox.io/s/ox200vw8k9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">デモ</a>を比較できます。refはレンダリングの一貫性を「オプトアウト」する方法であり、場合によっては便利なものです。</p>\n<p>一般的に、レンダリングの途中でrefを読み取ったりセットしたりすることは避けるべきです。なぜならそれはミュータブルだからです。私たちはレンダリングを予測可能なものに保ちたいと思っています。<strong>しかし、もし特定のpropやstateの最新の値を取得したいなら、手動でrefを更新するのは面倒でしょう。</strong>副作用(effect)を使うことでそれを自動化することが可能です:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MessageThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// 最新の値を追跡し続ける</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> latestMessage <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    latestMessage<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You said: '</span> <span class=\"token operator\">+</span> latestMessage<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(<a href=\"https://codesandbox.io/s/yqmnz7xy8x\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">デモ</a>はこちら。)</p>\n<p>DOMが更新された後にのみrefの値が変化するように、副作用の<em>内部</em>でアサインを行います。このことはレンダリングが割り込み可能であることに依存している<a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Time SlicingやSuspense</a>のような機能を、この書き換えが壊さないことを保証します。</p>\n<p>このような形でrefを使うことはあまり必要になりません。<strong>通常の場合propsやstateを捕獲することがより良いデフォルトです。</strong>しかし、intervalsやsubscriptionsのような<a href=\"/making-setinterval-declarative-with-react-hooks/\">命令型のAPI</a>を扱う時には、これは便利なものになり得ます。<em>どのような</em>値でも追跡できる、ということを覚えておいてください。1つのprop、state変数、propsオブジェクト全体、あるいは関数でさえも、です。</p>\n<p>このパターンは、<code class=\"language-text\">useCallback</code>の中身が頻繁に変わるような場合などでの、最適化においても有用です。ただ、<a href=\"https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reducerを使うこと</a>が多くの場合は<a href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">より良いソリューション</a>です。（これは今後のブログポストのトピックです！）</p>\n<hr>\n<p>このポストでは、クラスにおける一般的な壊れ方のパターンを、そしてクロージャがそれを修復するのにどれだけ役立つかを見てきました。しかし依存する配列を指定することでHooksを最適化しようとすると、クロージャが古くなってしまうというバグに遭遇し得ることに気づいたかもしれません。これはクロージャが問題だということでしょうか？私はそうは思いません。</p>\n<p>ここまでで見てきたように、クロージャは気がつくのが難しい繊細な問題を実際に<em>修復します</em>。同様に、<a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">並列モード</a>で正しく動くコードを書くのをはるかに容易にします。これが可能になるのは、そのコンポーネントのロジックがレンダリングされた時の正しいpropsとstateを閉じ込めるからです。</p>\n<p>私がこれまで見てきたあらゆるケースにおいて、<strong>「古くなったクロージャ」問題は「関数は変化しない」や「propsは常に同じだ」という誤った想定のせいで起きています。</strong>なので、このポストがそれをはっきり説明することの助けになればと望むのですが、クロージャが問題だというのは正しくありません。</p>\n<p>関数はそのpropsとstateを閉じ込めます - だからそれらが一貫していることは同様に重要なことなのです。これはバグではなく、関数コンポーネントの機能です。関数は、例えば<code class=\"language-text\">useEffect</code>や<code class=\"language-text\">useCallback</code>の「依存する配列」から除外されるべきではありません。（適切な修正は通常<code class=\"language-text\">useReducer</code>か上記の<code class=\"language-text\">useRef</code>というソリューションです - このどちらを選ぶべきかについては近いうちにドキュメント化します。）</p>\n<p>Reactの大半のコードを関数で書く時、私たちは<a href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">コードの最適化</a>や<a href=\"https://github.com/facebook/react/issues/14920\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">時間の経過と共に変わる値</a>についての自分の直感を調整する必要がでてきます。</p>\n<p><a href=\"https://mobile.twitter.com/EphemeralCircle/status/1099095063223812096\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fredrikが書いたように</a>:</p>\n<blockquote>\n<p>これまでで気がついたHooksを使う際のベストなメンタルルールは「あらゆる値があらゆる時に変わり得るかのようにコードを書く」だ。</p>\n</blockquote>\n<p>関数もこのルールの例外ではありません。これがReactの学習資料で共通のナレッジになるには時間がかかるでしょう。クラスのマインドセットからの調整も必要になります。でも、この記事がそのことを新鮮な目で見ることの助けになればと思っています。</p>\n<p>Reactの関数は常にその値を捕獲します - そして、それがなぜだかをもうわかったでしょう。</p>\n<p><img src=\"/fc3bddf6d4ca14bc77917ac0cfad3608/pikachu.gif\" alt=\"笑顔のピカチュー\"></p>\n<p>彼らは完全に別種のポケモンなのです。</p>","timeToRead":19,"frontmatter":{"title":"関数コンポーネントはクラスとどう違うのか?","date":"March 03, 2019","spoiler":"それらは全く別種のポケモンなのです。","cta":null},"fields":{"slug":"/ja/how-are-function-components-different-from-classes/","langKey":"ja"}}},"pageContext":{"slug":"/ja/how-are-function-components-different-from-classes/","translations":["fr","es","ja","ko","pl","zh-hans","pt-br"],"translatedLinks":[]}}}