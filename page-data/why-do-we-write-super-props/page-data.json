{"componentChunkName":"component---src-templates-blog-post-js","path":"/why-do-we-write-super-props/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"0db881d8-bc2b-5e65-92a8-10a17f6ca4d3","html":"<p>I heard <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> are the new hotness. Ironically, I want to start this blog by describing fun facts about <em>class</em> components. How about that!</p>\n<p><strong>These gotchas are <em>not</em> important for using React productively. But you might find them amusing if you like to dig deeper into how things work.</strong></p>\n<p>Hereâ€™s the first one.</p>\n<hr>\n<p>I wrote <code class=\"language-text\">super(props)</code> more times in my life than Iâ€™d like to know:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course, the <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class fields proposal</a> lets us skip the ceremony:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A syntax like this was <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">planned</a> when React 0.13 added support for plain classes in 2015. Defining <code class=\"language-text\">constructor</code> and calling <code class=\"language-text\">super(props)</code> was always intended to be a temporary solution until class fields provide an ergonomic alternative.</p>\n<p>But letâ€™s get back to this example using only ES2015 features:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Why do we call <code class=\"language-text\">super</code>? Can we <em>not</em> call it? If we have to call it, what happens if we donâ€™t pass <code class=\"language-text\">props</code>? Are there any other arguments?</strong> Letâ€™s find out.</p>\n<hr>\n<p>In JavaScript, <code class=\"language-text\">super</code> refers to the parent class constructor. (In our example, it points to the <code class=\"language-text\">React.Component</code> implementation.)</p>\n<p>Importantly, you canâ€™t use <code class=\"language-text\">this</code> in a constructor until <em>after</em> youâ€™ve called the parent constructor. JavaScript wonâ€™t let you:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ðŸ”´ Canâ€™t use `this` yet</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// âœ… Now itâ€™s okay though</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Thereâ€™s a good reason for why JavaScript enforces that parent constructor runs before you touch <code class=\"language-text\">this</code>. Consider a class hierarchy:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ðŸ”´ This is disallowed, read below why</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Good morning folks!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Imagine using <code class=\"language-text\">this</code> before <code class=\"language-text\">super</code> call <em>was</em> allowed. A month later, we might change <code class=\"language-text\">greetColleagues</code> to include the personâ€™s name in the message:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Good morning folks!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', nice to meet you!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>But we forgot that <code class=\"language-text\">this.greetColleagues()</code> is called before the <code class=\"language-text\">super()</code> call had a chance to set up <code class=\"language-text\">this.name</code>. So <code class=\"language-text\">this.name</code> isnâ€™t even defined yet! As you can see, code like this can be very difficult to think about.</p>\n<p>To avoid such pitfalls, <strong>JavaScript enforces that if you want to use <code class=\"language-text\">this</code> in a constructor, you <em>have to</em> call <code class=\"language-text\">super</code> first.</strong> Let the parent do its thing! And this limitation applies to React components defined as classes too:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// âœ… Okay to use `this` now</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This leaves us with another question: why pass <code class=\"language-text\">props</code>?</p>\n<hr>\n<p>You might think that passing <code class=\"language-text\">props</code> down to <code class=\"language-text\">super</code> is necessary so that the base <code class=\"language-text\">React.Component</code> constructor can initialize <code class=\"language-text\">this.props</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inside React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And thatâ€™s not far from truth â€” indeed, thatâ€™s <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">what it does</a>.</p>\n<p>But somehow, even if you call <code class=\"language-text\">super()</code> without the <code class=\"language-text\">props</code> argument, youâ€™ll still be able to access <code class=\"language-text\">this.props</code> in the <code class=\"language-text\">render</code> and other methods. (If you donâ€™t believe me, try it yourself!)</p>\n<p>How does <em>that</em> work? It turns out that <strong>React also assigns <code class=\"language-text\">props</code> on the instance right after calling <em>your</em> constructor:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// Inside React</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>So even if you forget to pass <code class=\"language-text\">props</code> to <code class=\"language-text\">super()</code>, React would still set them right afterwards. There is a reason for that.</p>\n<p>When React added support for classes, it didnâ€™t just add support for ES6 classes alone. The goal was to support as wide range of class abstractions as possible. It was <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">not clear</a> how relatively successful would ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript, or other solutions be for defining components. So React was intentionally unopinionated about whether calling <code class=\"language-text\">super()</code> is required â€” even though ES6 classes are.</p>\n<p>So does this mean you can just write <code class=\"language-text\">super()</code> instead of <code class=\"language-text\">super(props)</code>?</p>\n<p><strong>Probably not because itâ€™s still confusing.</strong> Sure, React would later assign <code class=\"language-text\">this.props</code> <em>after</em> your constructor has run. But <code class=\"language-text\">this.props</code> would still be undefined <em>between</em> the <code class=\"language-text\">super</code> call and the end of your constructor:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inside React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Inside your code</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ðŸ˜¬ We forgot to pass props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// âœ… {}</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ðŸ˜¬ undefined </span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It can be even more challenging to debug if this happens in some method thatâ€™s called <em>from</em> the constructor. <strong>And thatâ€™s why I recommend always passing down <code class=\"language-text\">super(props)</code>, even though it isnâ€™t strictly necessary:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// âœ… We passed props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// âœ… {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// âœ… {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This ensures <code class=\"language-text\">this.props</code> is set even before the constructor exits.</p>\n<hr>\n<p>Thereâ€™s one last bit that longtime React users might be curious about.</p>\n<p>You might have noticed that when you use the Context API in classes (either with the legacy <code class=\"language-text\">contextTypes</code> or the modern <code class=\"language-text\">contextType</code> API added in React 16.6), <code class=\"language-text\">context</code> is passed as a second argument to the constructor.</p>\n<p>So why donâ€™t we write <code class=\"language-text\">super(props, context)</code> instead? We could, but context is used less often so this pitfall just doesnâ€™t come up as much.</p>\n<p><strong>With the class fields proposal this whole pitfall mostly disappears anyway.</strong> Without an explicit constructor, all arguments are passed down automatically. This is what allows an expression like <code class=\"language-text\">state = {}</code> to include references to <code class=\"language-text\">this.props</code> or <code class=\"language-text\">this.context</code> if necessary.</p>\n<p>With Hooks, we donâ€™t even have <code class=\"language-text\">super</code> or <code class=\"language-text\">this</code>. But thatâ€™s a topic for another day.</p>","timeToRead":5,"frontmatter":{"title":"Why Do We Write super(props)?","date":"November 30, 2018","spoiler":"Thereâ€™s a twist at the end.","cta":null},"fields":{"slug":"/why-do-we-write-super-props/","langKey":"en"}}},"pageContext":{"slug":"/why-do-we-write-super-props/","previous":{"fields":{"slug":"/0001-kotlin-data-class-my-love-at-first-sight-with-kotlin/","langKey":"en","directoryName":"0001-kotlin-data-class-my-love-at-first-sight-with-kotlin","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Kotlin Data Classâ€Š-â€ŠMy Love at First Sight withÂ Kotlin"}},"next":{"fields":{"slug":"/why-isnt-x-a-hook/","langKey":"en","directoryName":"why-isnt-x-a-hook","maybeAbsoluteLinks":["/the-bug-o-notation/","/optimized-for-change/"]},"frontmatter":{"title":"Why Isnâ€™t X a Hook?"}},"translations":["cs","de","es","fa","fr","hu","it","my","ja","nl","nb","pl","pt-br","sk","sr","th","tr","uk","vi","zh-hans","zh-hant"],"translatedLinks":[]}}}