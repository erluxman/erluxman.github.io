{"componentChunkName":"component---src-templates-blog-post-js","path":"/he/optimized-for-change/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"d4c31666-9724-52a5-9fe5-76c523b3b718","html":"<p>איך לעשות API מעולה?</p>\n<p>עיצוב <em>טוב</em> של API הוא כזה שקל לזכור אותו וחד משמעי. הוא מעודד קריאות, נכונות וביצועים, ועוזר למפתחים ליפול ל״בור ההצלחה” <a href=\"https://blog.codinghorror.com/falling-into-the-pit-of-success/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the pit of success</a></p>\n<p>אני קורא להיבט הזה של העיצוב “במקום הראשון” מכיוון שאלה הדברים הראשונים אליהם מפתח/ת ספרייה נוטה לשים לב. אולי תהיו צריכים להתפשר על חלקם ולשקלל יתרונות וחסרונות, אבל לפחות הם תמיד יהיו במחשבה שלכם.</p>\n<p>למרות זאת, אלא אם כן את/ה שולח/ת חללית למאדים, הקוד שלך ככל הנראה ישתנה לאורך הזמן. וכך גם הקוד של צרכני ה API שלך.</p>\n<p>מעצבי ה API הכי טובים שאני מכיר, לא עוצרים בהיבטים של ״במקום האשון״ כמו קריאות. הם מקדישים מאמץ באותה מידה, אם לא אף יותר, למה שאני קורא עיצוב API ״במקום השני״: <strong>איך קוד המשתמש ב API יתפתח לאורך הזמן.</strong></p>\n<p>שינוי קטן בדרישות יכול לגרום להפלה של הקוד הכי אלגנטי שיש.</p>\n<p><em>API</em> מעולה צופה את זה. הם צופים את זה שתרצה להזיז חלק מהקוד. להעתיק ולהדביק חלקים. לשנות שמות. לאחד מקרים מיוחדים לעזר גנרי רב פעמי. להתיר הפשטה בחזרה למקרים ספציפים. לקצץ. לאפטם צווארי בקבוק. לזרוק חלקים ולהתחיל אותם מחדש. לעשות טעויות. לתמרן בין הסיבה והתוצאה. לתקן באג. לסקור את התיקון.   </p>\n<p>APIs מעולים לא רק נותנים לך ליפול ל״בור ההצלחה״, הם גם עוזרים לך <em>להישאר</em> שם.</p>\n<p>הם מאופטמים לשינוי.</p>","timeToRead":1,"frontmatter":{"title":"מאופטם לשינוי","date":"December 12, 2018","spoiler":"איך לעשות API מעולה?","cta":null},"fields":{"slug":"/he/optimized-for-change/","langKey":"he"}}},"pageContext":{"slug":"/he/optimized-for-change/","translations":["bg","ar","de","fa","he","id","es","fr","pt-br","nl","ru","pl","zh-hant","zh-hans","uk","tr"],"translatedLinks":[]}}}