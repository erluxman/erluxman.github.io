{"componentChunkName":"component---src-templates-blog-post-js","path":"/fa/why-do-we-write-super-props/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"f4ad3796-d7ce-5005-be81-fd01e73e6f4c","html":"<p>شنیدم که <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> موضوع داغه روزه جدیدن. شاید باورتون نشه ولی میخوام که این وبلاگو با توضیح دادن یه سری از چیزای باحال <em>class</em> کامپوننت‌ها شروع کنم. چطوره؟!</p>\n<p><strong>این چیزایی که اینجا می‌نویسم چیزایی <em>نیستن</em> که شما باهاش بتونید ری‌اکت رو بهتر بنویسید. ولی اگه دوست دارید که در مورد ری‌اکت عمیق‌تر بدونید که چیزای مختلف چجوری کار می‌کنه ممکنه براتون جالب باشه.</strong></p>\n<p>خب بریم سراغ اولین پست.</p>\n<hr>\n<p>من توی زندگیم خیلی بیشتر از چیزی که دونسته باشم ‍<code class=\"language-text\">super(props)</code> نوشتم:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>قطعن که <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">پروپوزال class fields</a> بهمون این اجازه رو میده که درگیر این داستان نشیم:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>سینتکسی شبیه به این <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">برنامه‌ریزی</a> شده بود وقتی که ری‌اکت ورژن 0.13 پشتیبانی از کلاس‌ها رو اضافه کرد. تعریف کردن <code class=\"language-text\">constructor</code> و صدا زدن <code class=\"language-text\">super(props)</code> همیشه یک راه موقت در نظر گرفته شده بود تا زمانی که class fields یک راه مشابه بهتری رو ارائه رو بده خودش.</p>\n<p>ولی بذارید برگردیم به مثالمون و فقط از خود ES2015 استفاده کنیم:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>چرا ما <code class=\"language-text\">super</code> رو صدا می‌زنیم؟ آیا می‌تونیم که صداش نزنیم؟ اگه که باید صداش بزنیم چی میشه اگه <code class=\"language-text\">props</code> رو پاس ندیم بهش؟ آیا پارامترهای دیگه‌ای هم هست؟</strong></p>\n<hr>\n<p>توی جاوااسکریپت <code class=\"language-text\">super</code> به کلاس پدرش (کلاسی که از اون داره ارث می‌بره) اشاره می‌کنه. (توی مثال ما super داره به <code class=\"language-text\">React.Component</code> اشاره می‌کنه.)</p>\n<p>و یک نکته‌ی مهمی که هست اینه که شما نمی‌تونی از <code class=\"language-text\">this</code> توی یک <code class=\"language-text\">constructor</code> استفاده کنی تا قبل اینکه constructor کلاس پدرش رو صدا نزده باشی. یعنی جاوااسکریپت بهتون این اجازه رو نمیده:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔴 Can’t use `this` yet</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅ Now it’s okay though</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>البته دلایل خوبی پشت این قضیس که جاوااسکریپت مجبورتون می‌کنه که constructor کلاس پدر باید قبل اینکه از <code class=\"language-text\">this</code> استفاده کنید اجرا بشه. این کلاس‌ها رو در نظر بگیرید:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 This is disallowed, read below why</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Good morning folks!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>تصور کنید که می‌تونستید از <code class=\"language-text\">this</code> استفاده کنید. یک ماه بعد میومدیم که <code class=\"language-text\">greetCollegues</code> رو یکم تغییر می‌دادیم و اسم شخص رو هم توی متن پیام اضافه می‌کردیم:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Good morning folks!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', nice to meet you!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>ولی فراموش کردیم که <code class=\"language-text\">this.greetColleagues()</code> داره قبل اینکه <code class=\"language-text\">super()</code> بخواد <code class=\"language-text\">this.name</code> رو ست کنه صدا زده می‌شه. بنابراین اصلن <code class=\"language-text\">this.name</code> هنوز تعریف نشده! همونطور که می‌بینید کدای اینطوری فکر کردن بهشون می‌تونه خیلی سخت باشه.</p>\n<p>برای جلوگیری از مشکلات و داستان‌های اینطوری <strong>جاوااسکریپت مجبورتون می‌کنه که اگه از <code class=\"language-text\">this</code> می‌خواید توی constructor استفاده کنید <em>باید</em> <code class=\"language-text\">super</code> رو اول از همه صدا بزنید.</strong> بذارید که پدر کارشو بکنه! و این محدودیت هم توی ری‌اکت و کامپوننت‌های که با کلاس می‌نویسید هستش.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅ Okay to use `this` now</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>یک سوال دیگه‌ای که به وجود میاد: چرا <code class=\"language-text\">props</code> رو پاس می‌دیم؟</p>\n<hr>\n<p>ممکنه که فکر کنید که پاس دادن <code class=\"language-text\">props</code> به <code class=\"language-text\">super</code> لازمه که constructor <code class=\"language-text\">React.Component</code> بتونه <code class=\"language-text\">this.props</code> رو مقداردهی اولیه کنه.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inside React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>که خب خیلی هم بیراه نیست. در اصل <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">این طوری هستش که انجام میده</a></p>\n<p>ولی یجورایی اگه حتی شما <code class=\"language-text\">super()</code> رو بدون پارامتر <code class=\"language-text\">props</code> هم صدا بزنید می‌بینید که توی <code class=\"language-text\">render</code> هنوز به <code class=\"language-text\">this.props</code> دسترسی دارید. (اگه باورتون نمیشه خودتون امتحان کنید!)</p>\n<p>چطوری این مدلی کار می‌کنه؟ به این برمی‌گرده که <strong>ری‌اکت <code class=\"language-text\">props</code> رو هم به instance اضافه می‌کنه بعد از اینکه constructorـتون رو صدا می‌زنید.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// Inside React</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>پس حتی وقتی که شما فراموش کردید که <code class=\"language-text\">props</code> رو به <code class=\"language-text\">super()</code> پاس بدید، ری‌اکت خودش بعدش ستش می‌کنه. یک دلیلی هم برای این کار هست.</p>\n<p>وقتی که ری‌اکت پشتیبانی از کلاس‌ها رو اضافه کرد، فقط پشتیبانی از خود کلاس‌های ES6 نبود. هدف این بود که یک بخش زیادی از abstraction‌های کلاس‌ها هم تا جایی که ممکن بود پشتیبانی کنه. برای تعریف کردن کامپوننت <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">مشخص نبود</a> که چقدر این قابل قبول خواهد بود توی ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript یا چیزای دیگه. بنابراین ری‌اکت برای صدا زدن <code class=\"language-text\">super()</code> (که توی کلاس‌های ES6 اجباریه) هیچ اجباری نداشت.</p>\n<p>خب پس همین کافیه که بنویسیم <code class=\"language-text\">super()</code> به جای اینکه بنویسیم <code class=\"language-text\">super(props)</code>؟</p>\n<p><strong>شاید به خاطر اینکه گیج‌کنندس، نه.</strong> درسته که خود ری‌اکت <code class=\"language-text\">this.props</code> رو ست می‌کنه بعد این که constructorـتون اجرا می‌شه. ولی خب <code class=\"language-text\">this.props</code> از جایی که <code class=\"language-text\">super</code> تا انتهای constructorـتون undefined خواهد بود:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inside React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Inside your code</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😬 We forgot to pass props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ {}</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😬 undefined</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>حتی می‌تونه چالش‌های بیشتری رو داشته باشه برای ایرادیابی و دیباگ کردن اگه که این اتفاق توی متدهایی بیفته که دارن از constructor صدا زده می‌شن. <strong>و به همین خاطر هستش که توصیه می‌کنم که همیشه <code class=\"language-text\">super(props)</code> استفاده کنید حتی اگه جاهایی که فکر می‌کنید نیاز به این کار نیست خیلی:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ We passed props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>اینطوری مطمئن میشیم که <code class=\"language-text\">this.props</code> ست شده حتی قبل اینکه constructorـیی وجود داشته باشه.</p>\n<hr>\n<p>آخرین چیزی که میخوام بگم چیزیه که کاربرای ری‌اکت از خیلی وقت پیش ممکنه در موردش کنجکاو باشن.</p>\n<p>ممکنه وقتی از Context API توی کلاس‌ها استقاده می‌کنید (چه نسخه‌ی <code class=\"language-text\">contextTypes</code> قدیمی چه مدرنش که توی ورژن ۱۶.۶ اضافه شده) توجه کرده باشید، <code class=\"language-text\">context</code> به عنوان پارامتر دوم پاس داده میشه به constructor.</p>\n<p>خب چرا ما نباید جاش <code class=\"language-text\">super(props, context)</code> بنویسیم؟ می تونیم این کارم بکنیم ولی context اغلب کمتر استفاده می‌شه و این داستانایی که پیش میاد خیلی به چشم نمیاد برای context.</p>\n<p><strong>با پروپوزال class fields کل این مشکلات و داستانا از بین می‌رن در هر صورت.</strong> بدون نوشتن constructor، همه‌ی پارامترها خودکار ست می‌شن. این چیزیه که به اکسپرشنی مثل <code class=\"language-text\">state = {}</code> اجازه این رو می‌ده که <code class=\"language-text\">this.props</code> یا <code class=\"language-text\">this.context</code> به درستی رفرنس بدن اگه نیاز شد.</p>\n<p>با Hooks ما حتی به <code class=\"language-text\">super</code> و <code class=\"language-text\">this</code> نیاز نداریم به کل. ولی این یک بحث دیگس که بعدن بهش می‌پردازیم.</p>","timeToRead":6,"frontmatter":{"title":"چرا super(props) رو می‌نویسیم؟","date":"November 30, 2018","spoiler":"آخرش یک تغییر غیر منتظرس.","cta":null},"fields":{"slug":"/fa/why-do-we-write-super-props/","langKey":"fa"}}},"pageContext":{"slug":"/fa/why-do-we-write-super-props/","translations":["cs","de","es","fr","fa","it","ja","hu","my","nl","nb","sk","pl","sr","pt-br","vi","tr","th","uk","zh-hans","zh-hant"],"translatedLinks":[]}}}