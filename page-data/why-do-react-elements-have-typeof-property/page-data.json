{"componentChunkName":"component---src-templates-blog-post-js","path":"/why-do-react-elements-have-typeof-property/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"2ffa9821-9ead-5169-b92e-91532ece0046","html":"<p>You might think you‚Äôre writing JSX:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>marquee</span> <span class=\"token attr-name\">bgcolor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#ffa7c4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">hi</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>marquee</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>But really, you‚Äôre calling a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/* type */</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* props */</span> <span class=\"token punctuation\">{</span> bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* children */</span> <span class=\"token string\">'hi'</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>And that function gives you back an object. We call this object a React <em>element</em>. It tells React what to render next. Your components return a tree of them.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// üßê Who dis</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you used React you might be familiar with <code class=\"language-text\">type</code>, <code class=\"language-text\">props</code>, <code class=\"language-text\">key</code>, and <code class=\"language-text\">ref</code> fields. <strong>But what is <code class=\"language-text\">$$typeof</code>? And why does it have a <code class=\"language-text\">Symbol()</code> as a value?</strong></p>\n<p>That‚Äôs another one of those things that you don‚Äôt <em>need</em> to know to use React, but that will make you feel good when you do. There‚Äôs also some tips about security in this post that you might want to know. Maybe one day you‚Äôll write your own UI library and all of this will come in handy. I certainly hope so.</p>\n<hr>\n<p>Before client-side UI libraries became common and added basic protection, it was common for app code to construct HTML and insert it into the DOM:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> messageEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessageEl<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;p>'</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/p>'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That works fine, except when your <code class=\"language-text\">message.text</code> is something like <code class=\"language-text\">&#39;&lt;img src onerror=&quot;stealYourPassword()&quot;&gt;&#39;</code>. <strong>You don‚Äôt want things written by strangers to appear verbatim in your app‚Äôs rendered HTML.</strong></p>\n<p>(Fun fact: if you only do client-side rendering, a <code class=\"language-text\">&lt;script&gt;</code> tag here wouldn‚Äôt let you run JavaScript. But <a href=\"https://gomakethings.com/preventing-cross-site-scripting-attacks-when-using-innerhtml-in-vanilla-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">don‚Äôt let this</a> lull you into a false sense of security.)</p>\n<p>To protect against such attacks, you can use safe APIs like <code class=\"language-text\">document.createTextNode()</code> or <code class=\"language-text\">textContent</code> that only deal with text. You can also preemptively ‚Äúescape‚Äù inputs by replacing potentially dangerous characters like <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">&gt;</code> and others in any user-provided text.</p>\n<p>Still, the cost of a mistake is high and it‚Äôs a hassle to remember it every time you interpolate a user-written string into your output. <strong>This is why modern libraries like React escape text content for strings by default:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>If <code class=\"language-text\">message.text</code> is a malicious string with an <code class=\"language-text\">&lt;img&gt;</code> or another tag, it won‚Äôt turn into a real <code class=\"language-text\">&lt;img&gt;</code> tag. React will escape the content and <em>then</em> insert it into the DOM. So instead of seeing the <code class=\"language-text\">&lt;img&gt;</code> tag you‚Äôll just see its markup.</p>\n<p>To render arbitrary HTML inside a React element, you have to write <code class=\"language-text\">dangerouslySetInnerHTML={{ __html: message.text }}</code>. <strong>The fact that it‚Äôs clumsy to write is a <em>feature</em>.</strong> It‚Äôs meant to be highly visible so that you can catch it in code reviews and codebase audits.</p>\n<hr>\n<p><strong>Does it mean React is entirely safe from injection attacks? No.</strong> HTML and DOM offer <a href=\"https://github.com/facebook/react/issues/3473#issuecomment-90594748\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">plenty of attack surface</a> that is too difficult or slow for React or other UI libraries to mitigate against. Most of the remaining attack vectors involve attributes. For example, if you render <code class=\"language-text\">&lt;a href={user.website}&gt;</code>, beware of the user whose website is <code class=\"language-text\">&#39;javascript: stealYourPassword()&#39;</code>. Spreading user input like <code class=\"language-text\">&lt;div {...userData}&gt;</code> is rare but also dangerous.</p>\n<p>React <a href=\"https://github.com/facebook/react/issues/10506\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">could</a> provide more protection over time but in many cases these are consequences of server issues that <a href=\"https://github.com/facebook/react/issues/3473#issuecomment-91327040\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">should</a> be fixed there anyway.</p>\n<p>Still, escaping text content is a reasonable first line of defence that catches a lot of potential attacks. Isn‚Äôt it nice to know that code like this is safe?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Escaped automatically</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>Well, that wasn‚Äôt always true either.</strong> And that‚Äôs where <code class=\"language-text\">$$typeof</code> comes in.</p>\n<hr>\n<p>React elements are plain objects by design:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>While normally you create them with <code class=\"language-text\">React.createElement()</code>, it is not required. There are valid use cases for React to support plain element objects written like I just did above. Of course, you probably wouldn‚Äôt <em>want</em> to write them like this ‚Äî but this <a href=\"https://github.com/facebook/react/pull/3583#issuecomment-90296667\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">can be</a> useful for an optimizing compiler, passing UI elements between workers, or for decoupling JSX from the React package.</p>\n<p>However, <strong>if your server has a hole that lets the user store an arbitrary JSON object</strong> while the client code expects a string, this could become a problem:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Server could have a hole that lets user store JSON</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> expectedTextButGotJSON <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  type<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    dangerouslySetInnerHTML<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      __html<span class=\"token operator\">:</span> <span class=\"token string\">'/* put your exploit here */'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ...</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> text<span class=\"token operator\">:</span> expectedTextButGotJSON <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Dangerous in React 0.13</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In that case, React 0.13 would be <a href=\"http://danlec.com/blog/xss-via-a-spoofed-react-element\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vulnerable</a> to an XSS attack. To clarify, again, <strong>this attack depends on an existing server hole</strong>. Still, React could do a better job of protecting people against it. And starting with React 0.14, it does.</p>\n<p>The fix in React 0.14 was to <a href=\"https://github.com/facebook/react/pull/4832\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tag every React element with a Symbol</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>This works because you can‚Äôt just put <code class=\"language-text\">Symbol</code>s in JSON. <strong>So even if the server has a security hole and returns JSON instead of text, that JSON can‚Äôt include <code class=\"language-text\">Symbol.for(&#39;react.element&#39;)</code>.</strong> React will check <code class=\"language-text\">element.$$typeof</code>, and will refuse to process the element if it‚Äôs missing or invalid.</p>\n<p>The nice thing about using <code class=\"language-text\">Symbol.for()</code> specifically is that <strong>Symbols are global between environments like iframes and workers.</strong> So this fix doesn‚Äôt prevent passing trusted elements between different parts of the app even in more exotic conditions. Similarly, even if there are multiple copies of React on the page, they can still ‚Äúagree‚Äù on the valid <code class=\"language-text\">$$typeof</code> value.</p>\n<hr>\n<p>What about the browsers that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">don‚Äôt support</a> Symbols?</p>\n<p>Alas, they don‚Äôt get this extra protection. React still includes the <code class=\"language-text\">$$typeof</code> field on the element for consistency, but it‚Äôs <a href=\"https://github.com/facebook/react/blob/8482cbe22d1a421b73db602e1f470c632b09f693/packages/shared/ReactSymbols.js#L14-L16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">set to a number</a> ‚Äî <code class=\"language-text\">0xeac7</code>.</p>\n<p>Why this number specifically? <code class=\"language-text\">0xeac7</code> kinda looks like ‚ÄúReact‚Äù.</p>","timeToRead":5,"frontmatter":{"title":"Why Do React Elements Have a $$typeof Property?","date":"December 03, 2018","spoiler":"It has something to do with security.","cta":"react"},"fields":{"slug":"/why-do-react-elements-have-typeof-property/","langKey":"en"}}},"pageContext":{"slug":"/why-do-react-elements-have-typeof-property/","previous":{"fields":{"slug":"/why-do-we-write-super-props/","langKey":"en","directoryName":"why-do-we-write-super-props","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Why Do We Write super(props)?"}},"next":{"fields":{"slug":"/why-do-hooks-rely-on-call-order/","langKey":"en","directoryName":"why-do-hooks-rely-on-call-order","maybeAbsoluteLinks":["/how-does-setstate-know-what-to-do/","/optimized-for-change/"]},"frontmatter":{"title":"Why Do React Hooks Rely on Call Order?"}},"translations":["es","pt-br","fr","ja","zh-hans"],"translatedLinks":[]}}}