{"componentChunkName":"component---src-templates-blog-post-js","path":"/the-bug-o-notation/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"fdbde717-3081-5888-9c1b-c7c434812054","html":"<p>When you write performance-sensitive code, it‚Äôs a good idea to keep in mind its algorithmic complexity. It is often expressed with the <a href=\"https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Big-O notation</a>.</p>\n<p>Big-O is a measure of <strong>how much slower the code will get as you throw more data at it</strong>. For example, if a sorting algorithm has O(<i>n<sup>2</sup></i>) complexity, sorting √ó50 times more items will be roughly 50<sup>2</sup> = 2,500 times slower. Big O doesn‚Äôt give you an exact number, but it helps you understand how an algorithm <em>scales</em>.</p>\n<p>Some examples: O(<i>n</i>), O(<i>n</i> log <i>n</i>), O(<i>n<sup>2</sup></i>), O(<i>n!</i>).</p>\n<p>However, <strong>this post isn‚Äôt about algorithms or performance</strong>. It‚Äôs about APIs and debugging. It turns out, API design involves very similar considerations.</p>\n<hr>\n<p>A significant part of our time goes into finding and fixing mistakes in our code. Most developers would like to find bugs faster. As satisfactory as it may be in the end, it sucks to spend the whole day chasing a single bug when you could have implemented something from your roadmap.</p>\n<p>Debugging experience influences our choice of abstractions, libraries, and tools. Some API and language designs make a whole class of mistakes impossible. Some create endless problems. <strong>But how can you tell which one is which?</strong></p>\n<p>Many online discussions about APIs are primarily concerned with aesthetics. But that <a href=\"/optimized-for-change/\">doesn‚Äôt say much</a> about what it feels like to use an API in practice.</p>\n<p><strong>I have a metric that helps me think about this. I call it the <em>Bug-O</em> notation:</strong></p>\n<p><font size=\"40\">üêû(<i>n</i>)</font></p>\n<p>The Big-O describes how much an algorithm slows down as the inputs grow. The <em>Bug-O</em> describes how much an API slows <em>you</em> down as your codebase grows.</p>\n<hr>\n<p>For example, consider this code that manually updates the DOM over time with imperative operations like <code class=\"language-text\">node.appendChild()</code> and <code class=\"language-text\">node.removeChild()</code> and no clear structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Section 1</span>\n  <span class=\"token keyword\">let</span> spinner <span class=\"token operator\">=</span> <span class=\"token function\">createSpinner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token comment\">// Section 2</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> successMessage <span class=\"token operator\">=</span> <span class=\"token function\">createSuccessMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>successMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token comment\">// Section 3</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token function\">createErrorMessage</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> retryButton <span class=\"token operator\">=</span> <span class=\"token function\">createRetryButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span>\n    retryButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Section 4</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The problem with this code isn‚Äôt that it‚Äôs ‚Äúugly‚Äù. We‚Äôre not talking about aesthetics. <strong>The problem is that if there is a bug in this code, I don‚Äôt know where to start looking.</strong></p>\n<p><strong>Depending on the order in which the callbacks and events fire, there is a combinatorial explosion of the number of codepaths this program could take.</strong> In some of them, I‚Äôll see the right messages. In others, I‚Äôll see multiple spinners, failure and error messages together, and possibly crashes.</p>\n<p>This function has 4 different sections and no guarantees about their ordering. My very non-scientific calculation tells me there are 4√ó3√ó2√ó1 = 24 different orders in which they could run. If I add four more code segments, it‚Äôll be 8√ó7√ó6√ó5√ó4√ó3√ó2√ó1 ‚Äî <em>forty thousand</em> combinations. Good luck debugging that.</p>\n<p><strong>In other words, the Bug-O of this approach is üêû(<i>n!</i>)</strong> where <em>n</em> is the number of code segments touching the DOM. Yeah, that‚Äôs a <em>factorial</em>. Of course, I‚Äôm not being very scientific here. Not all transitions are possible in practice. But on the other hand, each of these segments can run more than once. <span style=\"word-break: keep-all\">üêû(<em>¬Ø\\_(„ÉÑ)_/¬Ø</em>)</span> might be more accurate but it‚Äôs still pretty bad. We can do better.</p>\n<hr>\n<p>To improve the Bug-O of this code, we can limit the number of possible states and outcomes. We don‚Äôt need any library to do this. It‚Äôs just a matter of enforcing some structure on our code. Here is one way we could do it:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> currentState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  step<span class=\"token operator\">:</span> <span class=\"token string\">'initial'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 'initial' | 'pending' | 'success' | 'error'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Don't allow to submit twice</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Clear all existing children</span>\n  formStatus<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  currentState <span class=\"token operator\">=</span> nextState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'initial'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'pending'</span><span class=\"token operator\">:</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'success'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">let</span> successMessage <span class=\"token operator\">=</span> <span class=\"token function\">createSuccessMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>successMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'error'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token function\">createErrorMessage</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> retryButton <span class=\"token operator\">=</span> <span class=\"token function\">createRetryButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      retryButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> trySubmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code might not look too different. It‚Äôs even a bit more verbose. But it is <em>dramatically</em> simpler to debug because of this line:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Clear all existing children</span>\n<span class=\"gatsby-highlight-code-line\">  formStatus<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token comment\">// ... the code adding stuff to formStatus ...</span></code></pre></div>\n<p>By clearing out the form status before doing any manipulations, we ensure that our DOM operations always start from scratch. This is how we can fight the inevitable <a href=\"/the-elements-of-ui-engineering/\">entropy</a> ‚Äî by <em>not</em> letting the mistakes accumulate. This is the coding equivalent of ‚Äúturning it off and on again‚Äù, and it works amazingly well.</p>\n<p><strong>If there is a bug in the output, we only need to think <em>one</em> step back ‚Äî to the previous <code class=\"language-text\">setState</code> call.</strong> The Bug-O of debugging a rendering result is üêû(<em>n</em>) where <em>n</em> is the number of rendering code paths. Here, it‚Äôs just four (because we have four cases in a <code class=\"language-text\">switch</code>).</p>\n<p>We might still have race conditions in <em>setting</em> the state, but debugging those is easier because each intermediate state can be logged and inspected. We can also disallow any undesired transitions explicitly:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Don't allow to submit twice</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course, always resetting the DOM comes with a tradeoff. Na√Øvely removing and recreating the DOM every time would destroy its internal state, lose focus, and cause terrible performance problems in larger applications.</p>\n<p>That‚Äôs why libraries like React can be helpful. They let you <em>think</em> in the paradigm of always recreating the UI from scratch without necessarily doing it:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FormStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    step<span class=\"token operator\">:</span> <span class=\"token string\">'initial'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Don't allow to submit twice</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> content<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'pending'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Spinner</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'success'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SuccessMessage</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'error'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorMessage</span></span> <span class=\"token attr-name\">error</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RetryButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The code may look different, but the principle is the same. The component abstraction enforces boundaries so that you know no <em>other</em> code on the page could mess with its DOM or state. Componentization helps reduce the Bug-O.</p>\n<p>In fact, if <em>any</em> value looks wrong in the DOM of a React app, you can trace where it comes from by looking at the code of components above it in the React tree one by one. No matter the app size, tracing a rendered value is üêû(<em>tree height</em>).</p>\n<p><strong>Next time you see an API discussion, consider: what is the üêû(<em>n</em>) of common debugging tasks in it?</strong> What about existing APIs and principles you‚Äôre deeply familiar with? Redux, CSS, inheritance ‚Äî they all have their own Bug-O.</p>\n<hr>","timeToRead":6,"frontmatter":{"title":"The ‚ÄúBug-O‚Äù Notation","date":"January 25, 2019","spoiler":"What is the üêû(<i>n</i>) of your API?","cta":null},"fields":{"slug":"/the-bug-o-notation/","langKey":"en"}}},"pageContext":{"slug":"/the-bug-o-notation/","previous":{"fields":{"slug":"/preparing-for-tech-talk-part-2-what-why-and-how/","langKey":"en","directoryName":"preparing-for-tech-talk-part-2-what-why-and-how","maybeAbsoluteLinks":["/preparing-for-tech-talk-part-1-motivation/","/preparing-for-tech-talk-part-3-content/"]},"frontmatter":{"title":"Preparing for a Tech Talk, Part¬†2: What, Why, and How"}},"next":{"fields":{"slug":"/why-isnt-x-a-hook/","langKey":"en","directoryName":"why-isnt-x-a-hook","maybeAbsoluteLinks":["/the-bug-o-notation/","/optimized-for-change/"]},"frontmatter":{"title":"Why Isn‚Äôt X a Hook?"}},"translations":["fr","es","ja","ko","uk","zh-hans","zh-hant"],"translatedLinks":[]}}}