{"componentChunkName":"component---src-templates-blog-post-js","path":"/es/the-bug-o-notation/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"4c4de536-50a5-5132-bb36-8ec2c21f344c","html":"<p>Cuando escribes c√≥digo prestando especial atenci√≥n al rendimiento, es generalmente una buena idea tener en cuenta su complejidad algor√≠tmica. A menudo la complejidad se expresa por medio de la <a href=\"https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">notaci√≥n Big-O</a>.</p>\n<p>La notaci√≥n Big-O mide <strong>cu√°n lento ser√° el c√≥digo a medida que le a√±ades m√°s datos.</strong>. Por ejemplo, si un algoritmo de ordenaci√≥n tiene una complejidad de O(<i>n<sup>2</sup></i>), la incorporaci√≥n de 50 veces m√°s elementos a dicho algoritmo, supondr√° que este sea 50<sup>2</sup> = 2,500 veces m√°s lento. La Big-O no te proporciona un n√∫mero exacto, pero s√≠ ayuda a entender c√≥mo <em>escala</em> un algoritmo.</p>\n<p>Sirvan como ejemplo: O(<i>n</i>), O(<i>n</i> log <i>n</i>), O(<i>n<sup>2</sup></i>), O(<i>n!</i>).</p>\n<p>Sin embargo, <strong>este post no trata sobre algoritmos o rendimiento</strong>. Se centra en APIs y depuraci√≥n. Resulta que el dise√±o de una API implica consideraciones muy similares.</p>\n<hr>\n<p>Dedicamos una parte importante de nuestro tiempo a encontrar y corregir errores del c√≥digo. A la mayor√≠a de los desarrolladores les encantar√≠a encontrar errores m√°s r√°pido. Por muy satisfactorio que sea al final, es una pena pasar todo el d√≠a persiguiendo un solo error cuando realmente podr√≠as haber implementado una soluci√≥n a tu plan de trabajo.</p>\n<p>La experiencia que adquirimos corrigiendo errores influye en la elecci√≥n de abstracciones, bibliotecas y herramientas. Algunas APIs y los dise√±os de los lenguajes hacen imposible cometer ciertas clases de errores. Otras por el contrario, provocan un sinf√≠n de problemas. <strong>Pero, ¬øc√≥mo puedes saber cu√°ndo te encuentras en una situaci√≥n o en otra?</strong></p>\n<p>Muchas discusiones online sobre APIs versan principalmente sobre su est√©tica. Lo cual, <a href=\"/optimized-for-change/\">no nos dice mucho</a> sobre lo que uno siente al utilizar una API.</p>\n<p><strong>Tengo una m√©trica que me ayuda a pensar sobre esto. La llamo la notaci√≥n <em>Bug-O</em>:</strong></p>\n<p><font size=\"40\">üêû(<i>n</i>)</font></p>\n<p>La Big-O describe cu√°nto se ralentiza un algoritmo a medida que crecen los datos introducidos. La <em>Bug-O</em> describe cu√°nto te ralentiza una API a medida que crece tu base de c√≥digo.</p>\n<hr>\n<p>Por ejemplo, considera el siguiente c√≥digo que actualiza manualmente el DOM a lo largo del tiempo, con operaciones imperativas como <code class=\"language-text\">node.appendChild()</code> y <code class=\"language-text\">node.removeChild()</code> sin una estructura clara:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Secci√≥n 1</span>\n  <span class=\"token keyword\">let</span> spinner <span class=\"token operator\">=</span> <span class=\"token function\">createSpinner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token comment\">// Secci√≥n 2</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> successMessage <span class=\"token operator\">=</span> <span class=\"token function\">createSuccessMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>successMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token comment\">// Secci√≥n 3</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token function\">createErrorMessage</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> retryButton <span class=\"token operator\">=</span> <span class=\"token function\">createRetryButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span>\n    retryButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Secci√≥n 4</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El problema con este c√≥digo no es que sea ‚Äúfeo‚Äù. No estamos hablando de est√©tica. <strong>El problema es que si hay un error en este c√≥digo, no s√© por d√≥nde empezar a buscar</strong>.</p>\n<p><strong>Dependiendo del orden en que se activen las devoluciones de llamada (callbacks) y los eventos, existe una explosi√≥n combinatoria del n√∫mero de rutas de c√≥digo que este programa podr√≠a tomar.</strong> En algunas de ellas, ver√© los mensajes correctos. En otras, ver√© ruletas (spinners), mensajes de error y errores, y posiblemente ca√≠das de la aplicaci√≥n.</p>\n<p>La funci√≥n citada anteriormente tiene 4 secciones diferentes y no hay garant√≠as acerca de su ejecuci√≥n. Mi c√°lculo (no cient√≠fico) me dice que hay 4√ó3√ó2√ó1 = 24 operaciones diferentes que podr√≠an ejecutarse. Si agrego cuatro segmentos de c√≥digo m√°s, ser√°n 8√ó7√ó6√ó5√ó4√ó3√ó2√ó1 ‚Äî <em>cuarenta mil</em> combinaciones. Buena suerte depurando eso.</p>\n<p><strong>En otras palabras, la Bug-O de este enfoque es üêû(<i>n!</i>)</strong> donde <em>n</em> es el n√∫mero de segmentos de c√≥digo que tocan el DOM. S√≠, eso es un <em>an√°lisis factorial</em>. Por supuesto, no estoy siendo muy riguroso aqu√≠. En la pr√°ctica, no todas las operaciones son posibles. Por otro lado, cada uno de estos segmentos puede ejecutarse m√°s de una vez. La Bug-O <span style=\"word-break: keep-all\">üêû(<em>¬Ø\\_(„ÉÑ)_/¬Ø</em>)</span> podr√≠a ser m√°s precisa, pero aun as√≠ es bastante mala. Podemos hacerlo mejor.</p>\n<hr>\n<p>Para mejorar la Bug-O de este c√≥digo podemos limitar la cantidad de estados y resultados posibles. No necesitamos ninguna biblioteca para hacerlo. Es solo una cuesti√≥n de hacer cumplir alguna estructura en nuestro c√≥digo. A continuaci√≥n se muestra una manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> currentState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  step<span class=\"token operator\">:</span> <span class=\"token string\">'initial'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 'initial' | 'pending' | 'success' | 'error'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// No permitir enviar (submit) dos veces</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Borrar todos los hijos (children) existentes</span>\n  formStatus<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  currentState <span class=\"token operator\">=</span> nextState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'initial'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'pending'</span><span class=\"token operator\">:</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>spinner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'success'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">let</span> successMessage <span class=\"token operator\">=</span> <span class=\"token function\">createSuccessMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>successMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'error'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token function\">createErrorMessage</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> retryButton <span class=\"token operator\">=</span> <span class=\"token function\">createRetryButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formStatus<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>retryButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      retryButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> trySubmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este c√≥digo puede no parecer muy diferente. Es incluso un poco m√°s detallado. Pero es <em>mucho m√°s</em> sencillo de depurar debido a esta l√≠nea:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Borrar todos los hijos (children) existentes</span>\n<span class=\"gatsby-highlight-code-line\">  formStatus<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token comment\">// ... c√≥digo que a√±ade algo a formStatus ...</span></code></pre></div>\n<p>Al borrar el estado del formulario antes de realizar cualquier manipulaci√≥n, nos aseguramos de que nuestras operaciones contra el DOM siempre comiencen desde cero. As√≠ podemos combatir la inevitable <a href=\"/the-elements-of-ui-engineering/\">entrop√≠a</a> ‚Äî al <em>evitar</em> que los errores se acumulen. Este es el equivalente en c√≥digo a ‚Äúapagar y encender de nuevo‚Äú, y funciona sorprendentemente bien.</p>\n<p><strong>Si hay un error en la emisi√≥n, solo tenemos que pensar en <em>el paso previo</em> ‚Äî la llamada <code class=\"language-text\">setState</code> anterior.</strong> La Bug-O de depurar un resultado de renderizaci√≥n es üêû(<em>n</em>) donde <em>n</em> es el n√∫mero de rutas de renderizaci√≥n. En este caso, son solo cuatro (porque tenemos cuatro casos en el <code class=\"language-text\">switch</code>).</p>\n<p>Es posible que a√∫n tengamos condiciones de carrera para <em>establecer</em> el valor del state, pero depurar dichas condiciones es m√°s sencillo porque cada estado intermedio se puede evaluar e inspeccionar. Tambi√©n podemos rechazar expl√≠citamente cualquier operaci√≥n no deseada:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">trySubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// No permitir enviar (submit) dos veces</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por supuesto, recomponer el DOM viene con una contrapartida. Eliminar y volver a crear ingenuamente el DOM cada vez, destruir√≠a su estado interno (internal state), se perder√≠a el foco (focus) y causar√≠a terribles problemas de rendimiento en aplicaciones grandes.</p>\n<p>Es por eso que las bibliotecas como React pueden ser √∫tiles. Te permiten <em>pensar</em> en el paradigma de recrear siempre la interfaz de usuario desde cero sin necesariamente hacerlo:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">FormStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    step<span class=\"token operator\">:</span> <span class=\"token string\">'initial'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>step <span class=\"token operator\">===</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// No permitir enviar (submit) dos veces</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> step<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> content<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'pending'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Spinner</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'success'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SuccessMessage</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'error'</span><span class=\"token operator\">:</span>\n      content <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorMessage</span></span> <span class=\"token attr-name\">error</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RetryButton</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El c√≥digo puede parecer diferente, pero el principio es el mismo. La abstracci√≥n del componente impone l√≠mites para cerciorarse de que ning√∫n <em>otro</em> c√≥digo de la p√°gina pudiera modificar el DOM o el estado. La creaci√≥n de componentes ayuda a reducir la Bug-O.</p>\n<p>De hecho, si <em>alg√∫n</em> valor parece incorrecto en el DOM de una aplicaci√≥n de React, puedes rastrear de d√≥nde proviene, revisando el c√≥digo de los componentes uno a uno, en el √°rbol de React. No importa el tama√±o de la aplicaci√≥n, el seguimiento de un valor renderizado es üêû (<em>altura del √°rbol</em>).</p>\n<p><strong>La pr√≥xima vez que veas una discusi√≥n sobre una API, considera: ¬øcu√°l es la üêû(<em>n</em>) de tareas de depuraci√≥n comunes en ella?</strong> ¬øQu√© hay de las APIs (y sus principios existentes) con las que est√°s profundamente familiarizado? Redux, CSS, herencia, todos tienen su propia Bug-O.</p>\n<hr>","timeToRead":6,"frontmatter":{"title":"La notaci√≥n ‚ÄúBug-O‚Äù","date":"January 25, 2019","spoiler":"¬øCu√°l es la üêû(<i>n</i>) de tu API?","cta":null},"fields":{"slug":"/es/the-bug-o-notation/","langKey":"es"}}},"pageContext":{"slug":"/es/the-bug-o-notation/","translations":["fr","es","ja","ko","uk","zh-hans","zh-hant"],"translatedLinks":["/optimized-for-change/","/the-elements-of-ui-engineering/"]}}}