{"componentChunkName":"component---src-templates-blog-post-js","path":"/es/why-do-we-write-super-props/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"5adc05b1-8ebb-5724-a38e-7ba75c5970bc","html":"<p>He escuchado que los <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> son la nueva sensaci√≥n. Ir√≥nicamente, quiero empezar este blog describiendo hechos interesantes sobre componentes de <em>clase</em>. ¬°¬øQu√© les parece?!</p>\n<p><strong>Estos trucos <em>no</em> son importantes para usar React de manera productiva; pero puedes hallarlos entretenidos si quieres profundizar en c√≥mo funcionan las cosas.</strong></p>\n<p>Aqu√≠ est√° el primero.</p>\n<hr>\n<p>He escrito <code class=\"language-text\">super(props)</code> m√°s veces en mi vida de las que quisiera saber:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por supuesto, la <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">propuesta de atributos de clase</a> nos permite obviar la ceremonia:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Una sintaxis como esta se <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">plane√≥</a> cuando React 0.13 a√±adi√≥ soporte para clases simples en 2015. Definir el <code class=\"language-text\">constructor</code> e invocar <code class=\"language-text\">super(props)</code> siempre se pens√≥ como una soluci√≥n temporal hasta que los atributos de clases proveyeran una alternativa ergon√≥mica.</p>\n<p>Pero volvamos a este ejemplo usando solo caracter√≠sticas de ES2015:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>¬øPor qu√© invocamos <code class=\"language-text\">super</code>? ¬øPodemos <em>no</em> invocarlo? Si lo tenemos que invocar, ¬øqu√© pasa si no pasamos <code class=\"language-text\">props</code>? ¬øHabr√° otros argumentos?</strong> Averig√º√©moslo.</p>\n<hr>\n<p>En JavaScript, <code class=\"language-text\">super</code> hace referencia al constructor de la clase base (en nuestro ejemplo, apunta a la implementaci√≥n de <code class=\"language-text\">React.Component</code>).</p>\n<p>Algo importante, no puedes usar <code class=\"language-text\">this</code> en un constructor hasta <em>despu√©s</em> que se haya llamado al constructor base. Javascript no te lo permitir√°:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// üî¥ A√∫n no se puede usar `this`</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ‚úÖ Sin embargo ahora no hay problemas</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hay una buena raz√≥n por la que Javascript obliga a que el constructor base se ejecute antes de que toques <code class=\"language-text\">this</code>. Considera una jerarqu√≠a de clases:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persona</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nombre <span class=\"token operator\">=</span> nombre<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonaEducada</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Persona</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">saludarColegas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üî¥ Esto no est√° permitido, lee debajo por qu√©</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>nombre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">saludarColegas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'¬°Buenos d√≠as amigos!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Imagina que se <em>permitiera</em> usar <code class=\"language-text\">this</code> antes de invocar <code class=\"language-text\">super</code>. Un mes despu√©s, podr√≠amos querer cambiar <code class=\"language-text\">saludarColegas</code> para incluir el nombre de la persona en el mensaje:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">saludarColegas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'¬°Buenos d√≠as amigos!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mi nombre es '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nombre <span class=\"token operator\">+</span> <span class=\"token string\">'. ¬°Encantado de conocerlos!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pero olvidamos que <code class=\"language-text\">this.saludarColegas()</code> se invoca antes de que la llamada a <code class=\"language-text\">super()</code> tuviese oportunidad de inicializar <code class=\"language-text\">this.nombre</code>. ¬°As√≠ que <code class=\"language-text\">this.nombre</code> no est√° a√∫n ni siquiera definido! Como puedes ver, puede ser dif√≠cil analizar un c√≥digo como este.</p>\n<p>Para evitar tales trampas <strong>JavaScript obliga que si quieres usar <code class=\"language-text\">this</code> en un constructor, <em>tienes que</em> invocar <code class=\"language-text\">super</code> primero.</strong> ¬°Deja que la base haga su trabajo! Y esta limitaci√≥n tambi√©n se aplica a los componentes de React definidos como clases:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ‚úÖ Est√° bien usar `this` ahora</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto nos deja con otra pregunta: ¬øpor qu√© pasar <code class=\"language-text\">props</code>?</p>\n<hr>\n<p>Podr√≠as pensar que pasar <code class=\"language-text\">props</code> hacia <code class=\"language-text\">super</code> es necesario de manera que el constructor base de <code class=\"language-text\">React.Component</code> pueda inicializar <code class=\"language-text\">this.props</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Dentro de React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Y ello no est√° lejos de la verdad ‚Äî de hecho, eso es <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lo que hace</a>.</p>\n<p>Pero de alguna manera, si invocas <code class=\"language-text\">super()</code> sin el argumento <code class=\"language-text\">props</code>, a√∫n ser√°s capaz de acceder a <code class=\"language-text\">this.props</code> en <code class=\"language-text\">render</code> y otros m√©todos. (Si no me crees, ¬°int√©ntalo t√∫ mismo!)</p>\n<p>¬øComo funciona <em>eso</em> ? Resulta que <strong>React tambi√©n asigna <code class=\"language-text\">props</code> a la instancia justo despu√©s de invocar a <em>tu</em> constructor:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// Dentro de React</span>\n  <span class=\"token keyword\">const</span> instancia <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TuComponente</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instancia<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>As√≠ que a√∫n si olvidas pasarle <code class=\"language-text\">props</code> a <code class=\"language-text\">super()</code>, React a√∫n lo pondr√≠a justo despu√©s. Hay una raz√≥n para ello.</p>\n<p>Cuando React a√±adi√≥ soporte para clases, no a√±adi√≥ soporte solo para clases ES6. El objetivo era soportar el mayor rango de abstracciones de clase como fuera posible. <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">No estaba claro</a> cu√°n relativamente exitosos ser√≠an ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript, u otras soluciones para definir componentes. As√≠ que React intencionalmente no requer√≠a llamar a <code class=\"language-text\">super()</code> ‚Äî a√∫n cuando las clases ES6 s√≠ lo hacen.</p>\n<p>¬øEsto quiere decir que puedes escribir simplemente <code class=\"language-text\">super()</code> en lugar de <code class=\"language-text\">super(props)</code>?</p>\n<p><strong>Probablemente no, porque sigue siendo confuso.</strong> Seguro, React asignar√≠a <code class=\"language-text\">this.props</code> <em>despu√©s</em> que tu constructor se ha ejecutado. Pero <code class=\"language-text\">this.props</code> a√∫n no estar√≠a definido <em>entre</em> la invocaci√≥n a <code class=\"language-text\">super</code> y el fin de tu constructor:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Dentro de React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Dentro de tu c√≥digo</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üò¨ Olvidamos pasar props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ‚úÖ {}</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// üò¨ undefined </span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Puede ser a√∫n m√°s dif√≠cil de depurar si esto ocurre en alg√∫n m√©todo invocado <em>desde</em> el constructor. <strong>Y por eso es que recomiendo siempre pasar <code class=\"language-text\">super(props)</code>, aun cuando no es estrictamente necesario:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‚úÖ Pasamos props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ‚úÖ {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ‚úÖ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esto asegura que <code class=\"language-text\">this.props</code> est√© definido a√∫n antes de que el constructor termine.</p>\n<hr>\n<p>Hay una √∫ltima parte sobre la que los usuarios veteranos de React podr√≠an tener curiosidad.</p>\n<p>Puede que hayas notado cuando usas la API Context en clases (ya sea con la antigua API <code class=\"language-text\">contextTypes</code> o la moderna <code class=\"language-text\">contextType</code> a√±adida en React 16.6), <code class=\"language-text\">context</code> se pasa como segundo argumento al constructor.</p>\n<p>¬øEntonces por qu√© en su lugar no escribimos <code class=\"language-text\">super(props, context)</code>? Podr√≠amos, pero context se usa con menos frecuencia, por lo que esta trampa no aparece tan a menudo.</p>\n<p><strong>Con la propuesta de atributos de clase esta trampa mayormente desaparece de todas formas.</strong> Sin un constructor expl√≠cito, todos los argumentos se pasan autom√°ticamente. Esto es lo que permite que una expresi√≥n como <code class=\"language-text\">state = {}</code>, si lo necesita, incluya referencias a <code class=\"language-text\">this.props</code> o <code class=\"language-text\">this.context</code>.</p>\n<p>Con los Hooks, ni siquiera tenemos <code class=\"language-text\">super</code> o <code class=\"language-text\">this</code>. Pero ese es tema para otro d√≠a.</p>","timeToRead":5,"frontmatter":{"title":"¬øPor qu√© escribimos super(props)?","date":"November 30, 2018","spoiler":"Hay un giro inesperado al final.","cta":null},"fields":{"slug":"/es/why-do-we-write-super-props/","langKey":"es"}}},"pageContext":{"slug":"/es/why-do-we-write-super-props/","translations":["cs","de","fr","fa","es","hu","it","ja","my","nb","sr","pl","sk","pt-br","nl","th","uk","vi","tr","zh-hant","zh-hans"],"translatedLinks":[]}}}