{"componentChunkName":"component---src-templates-blog-post-js","path":"/es/why-do-react-elements-have-typeof-property/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"b4f95cfa-2149-5440-b937-2f376459fdc9","html":"<p>Puede que creas que estás escribiendo JSX:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>marquee</span> <span class=\"token attr-name\">bgcolor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#ffa7c4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">hola</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>marquee</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Pero en realidad, estás llamando a una función:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/* type */</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* props */</span> <span class=\"token punctuation\">{</span> bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* children */</span> <span class=\"token string\">'hola'</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Y esa función te devuelve un objeto. Llamamos a este objeto un <em>elemento</em> de React. Este le dice a React qué es lo próximo que debe renderizar. Tus componentes devuelven un árbol de ellos.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 🧐 ¿¿¿¿¿¿¿Quién es este???????</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si has utilizado React puede que te sean familiares los campos <code class=\"language-text\">type</code>, <code class=\"language-text\">props</code>, <code class=\"language-text\">key</code> y <code class=\"language-text\">ref</code>. ¿<strong>Pero, qué es <code class=\"language-text\">$$typeof</code>? ¿Y por qué tiene un <code class=\"language-text\">Symbol()</code> como valor?</strong></p>\n<p>Esta es otra de esas cosas que <em>no</em> necesitas saber para utilizar React, pero que te harán sentir bien una vez que lo hagas. También hay en este artículo algunos consejos sobre seguridad que te podrían interesar. Quizá algún día escribas tu propia biblioteca de IU y todo esto te sea útil. Espero que así sea.</p>\n<hr>\n<p>Antes que las bibliotecas de IU del lado del cliente se volvieran comunes y añadieran una protección básica, era común que en el código de las aplicaciones se construyera HTML y se insertara en el DOM:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> messageEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessageEl<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;p>'</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/p>'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Eso funciona bien, excepto que cuando tu <code class=\"language-text\">message.text</code> es algo como <code class=\"language-text\">&#39;&lt;img src onerror=&quot;robarTuContraseña()&quot;&gt;&#39;</code>. <strong>Ciertamente no quieres que cosas escritas por extraños aparezcan sin procesar en el HTML renderizado de tu aplicación.</strong></p>\n<p>(Dato curioso: si solo haces renderizado del lado del cliente, una etiqueta <code class=\"language-text\">&lt;script&gt;</code> aquí no te permitiría ejecutar Javascript. Pero <a href=\"https://gomakethings.com/preventing-cross-site-scripting-attacks-when-using-innerhtml-in-vanilla-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">no dejes que esto</a> te haga confiar con un falso sentido de seguridad).</p>\n<p>Para protegerte de estos ataques, puedes utilizar APIs seguras como <code class=\"language-text\">document.createTextNode()</code> o <code class=\"language-text\">textContent</code> que solo tratan con texto. También puedes con previsión «escapar» las entradas mediante el reemplazo de caracteres potencialmente peligrosos como <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">&gt;</code> y otros en cualquier texto proporcionado por el usuario.</p>\n<p>Aún así, el costo de un error es alto y es molesto recordarlo cada vez que interpoles una cadena escrita por el usuario en tu salida. <strong>Por eso es que las bibliotecas modernas como React escapan el contenido de texto para las cadenas por defecto:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Si <code class=\"language-text\">message.text</code> es una cadena maliciosa con una etiqueta <code class=\"language-text\">&lt;img&gt;</code> o cualquier otra, no se convertirá en una etiqueta <code class=\"language-text\">&lt;img&gt;</code> real. React escapará el contenido y <em>luego</em> lo insertará en el DOM. Por tanto, en lugar de ver la etiqueta <code class=\"language-text\">&lt;img&gt;</code> solo verás su código.</p>\n<p>Para poder renderizar HTML arbitrariamente dentro de un elemento de React, tienes que escribir <code class=\"language-text\">dangerouslySetInnerHTML={{ __html: message.text }}</code>. <strong>El hecho de que sea complicado escribirlo es una <em>característica</em>.</strong> Está hecho para que sea bien visible y así se detecte sin problemas en revisiones de código y auditorías a la base de código.</p>\n<hr>\n<p><strong>¿Significa eso que React es completamente inmune a los ataques de inyección? No.</strong> HTML y el DOM ofrecen <a href=\"https://github.com/facebook/react/issues/3473#issuecomment-90594748\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">un amplio espacio para los ataques</a> que hace que sea muy difícil o lento para React u otras bibliotecas de IU poder mitigarlos. La mayoría de los ataques restantes involucran atributos. Por ejemplo, si renderizas <code class=\"language-text\">&lt;a href={usuario.sitioWeb}&gt;</code>, tienes que tener cuidado del usuario cuyo sitio web es <code class=\"language-text\">&#39;javascript: robarTuContraseña()&#39;</code>. Propagar las entradas del usuario de la forma <code class=\"language-text\">&lt;div {...datosDeUsuario}&gt;</code> no es común, pero sí peligroso.</p>\n<p>React <a href=\"https://github.com/facebook/react/issues/10506\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">podría</a> ofrecer mayor protección con el tiempo pero en muchos casos son consecuencia de problemas en el servidor que <a href=\"https://github.com/facebook/react/issues/3473#issuecomment-91327040\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">deben</a> ser solucionados allí de todas formas.</p>\n<p>Aún sí, escapar el contenido del texto es una primera línea de defensa razonable que captura muchos ataques potenciales. ¿Acaso no resulta agradable saber que código como este es seguro?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Escapado automáticamente</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>Bueno, eso no siempre fue así.</strong> Y ahí es donde entra en escena <code class=\"language-text\">$$typeof</code>.</p>\n<hr>\n<p>Los elementos de React están concebidos en su diseño como objetos simples:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si bien normalmente se crean con <code class=\"language-text\">React.createElement()</code>, no es un requerimiento. Hay casos de uso válidos para que React admita elementos de objetos simples escritos como lo acabo de hacer arriba. Por supuesto, probablemente no <em>querrías</em> escribirlos así, pero <a href=\"https://github.com/facebook/react/pull/3583#issuecomment-90296667\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">puede ser</a> útil en la optimización de un compilador, en el paso de elementos de la IU entre <em>workers</em> o para desacoplar JSX del paquete de React.</p>\n<p>Sin embargo, <strong>si tu servidor tiene un agujero que permite al usuario almacenar objetos JSON arbitrarios</strong> mientras el código del cliente espera una cadena, esto se puede convertir en un problema:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// El servidor podría tener un agujero que permita al usuario almacenar JSON</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> expectedTextButGotJSON <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  type<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    dangerouslySetInnerHTML<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      __html<span class=\"token operator\">:</span> <span class=\"token string\">'/* pon tu exploit aquí */'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ...</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> text<span class=\"token operator\">:</span> expectedTextButGotJSON <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Peligroso en React 0.13</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>En ese caso, React 0.13 sería <a href=\"http://danlec.com/blog/xss-via-a-spoofed-react-element\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vulnerable</a> a un ataque XSS. Para aclarar nuevamente, <strong>este ataque depende de un agujero existente en el servidor</strong>. Aún así, React podría hacer un mejor trabajo para protegernos contra eso. Y a partir de React 0.14, lo hace.</p>\n<p>La solución en React 0.14 fue <a href=\"https://github.com/facebook/react/pull/4832\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">etiquetar cada elemento de React con un <code class=\"language-text\">Symbol</code></a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Funciona porque no puedes poner <code class=\"language-text\">Symbol</code>s en JSON. <strong>Así que incluso si el servidor tiene un agujero de seguridad y devuelve JSON en lugar de texto, ese JSON no puede incluir <code class=\"language-text\">Symbol.for(&#39;react.element&#39;)</code>.</strong> React comprobará el campo <code class=\"language-text\">element.$$typeof</code>, y se negará a procesar el elemento si no existe o no es válido.</p>\n<p>Una ventaja de usar <code class=\"language-text\">Symbol.for()</code> en específico es que <strong>Los <code class=\"language-text\">Symbol</code>s son globales entre entornos como <em>iframes</em> y <em>workers</em>.</strong> Así que esta solución no previene el paso de elementos confiables entre diferentes partes de la aplicación, aún en condiciones más exóticas. De manera similar, aún si hay múltiples copias de React en la página, estas se pueden «poner de acuerdo» en el valor válido de <code class=\"language-text\">$$typeof</code>.</p>\n<hr>\n<p>¿Y qué pasa con los navegadores que <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">no son compatibles con los</a> <code class=\"language-text\">Symbol</code>s?</p>\n<p>Bueno, no tienen esta protección adicional. React, por consistencia, también incluye el campo <code class=\"language-text\">$$typeof</code> en el elemento, pero le <a href=\"https://github.com/facebook/react/blob/8482cbe22d1a421b73db602e1f470c632b09f693/packages/shared/ReactSymbols.js#L14-L16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">asigna un número</a>: <code class=\"language-text\">0xeac7</code>.</p>\n<p>¿Por qué este número en específico? <code class=\"language-text\">0xeac7</code> se parece un poquito a «React».</p>","timeToRead":6,"frontmatter":{"title":"¿Por qué los elementos de React tienen una propiedad $$typeof?","date":"December 03, 2018","spoiler":"Tiene algo que ver con la seguridad.","cta":null},"fields":{"slug":"/es/why-do-react-elements-have-typeof-property/","langKey":"es"}}},"pageContext":{"slug":"/es/why-do-react-elements-have-typeof-property/","translations":["es","ja","fr","pt-br","zh-hans"],"translatedLinks":[]}}}