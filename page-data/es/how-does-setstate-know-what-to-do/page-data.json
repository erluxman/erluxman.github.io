{"componentChunkName":"component---src-templates-blog-post-js","path":"/es/how-does-setstate-know-what-to-do/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"53b35bc2-e56a-588b-96a7-0a9197583d4b","html":"<p>Cuando llamas a <code class=\"language-text\">setState</code> en un componente, ¿qué crees que ocurre?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Gracias</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        ¡Haz clic en mí!</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Claro, React vuelve a renderizar el componente con el próximo estado <code class=\"language-text\">{ clicked: true }</code> y actualiza el DOM para hacerlo coincidir con el elemento devuelto <code class=\"language-text\">&lt;h1&gt;Gracias&lt;/h1&gt;</code>.</p>\n<p>Parece sencillo, pero, espera. ¿Lo hace <em>React</em>, o <em>React DOM</em>?</p>\n<p>La actualización del DOM parece algo que debe ser responsabilidad de React DOM. Pero estamos llamando a <code class=\"language-text\">this.setState()</code>, no a algo de React DOM. Y nuestra clase base <code class=\"language-text\">React.Component</code> se define también dentro de React.</p>\n<p>Entonces, ¿cómo puede <code class=\"language-text\">setState()</code> dentro de <code class=\"language-text\">React.Component</code> actualizar el DOM?</p>\n<p><strong>Aclaración: Al igual que la <a href=\"/why-do-react-elements-have-typeof-property/\">mayoría</a> de los <a href=\"/how-does-react-tell-a-class-from-a-function/\">otros </a> <a href=\"/why-do-we-write-super-props/\">artículos</a> en este blog, en realidad no <em>necesitas</em> saber nada de esto para ser productivo en React. Este artículo es para aquellos a los que les gusta ver qué hay detrás del telón. ¡Completamente opcional!</strong></p>\n<hr>\n<p>Podríamos pensar que la clase <code class=\"language-text\">React.Component</code> contiene lógica de actualización del DOM.</p>\n<p>Pero si ese fuera el caso, ¿cómo puede funcionar <code class=\"language-text\">this.setState()</code> en otros entornos? Por ejemplo, los componentes en aplicaciones de React Native también heredan de <code class=\"language-text\">React.Component</code>. Llama a <code class=\"language-text\">this.setState()</code> justo como acabamos de hacerlo, y sin embargo React Native funciona con las vistas nativas de Android y iOS y no con el DOM.</p>\n<p>Puede que también estés familiarizado con React Test Renderer o Shallow Renderer. Ambas estrategias de realización de pruebas te permiten renderizar componentes normales y llamar a <code class=\"language-text\">this.setState()</code> dentro de ellos. Pero ninguna de ellas trabaja con el DOM.</p>\n<p>Si has usado renderizadores como <a href=\"https://github.com/facebook/react/tree/master/packages/react-art\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React ART</a>, puede que también sepas que es posible utilizar más de un renderizador en la página. (Por ejemplo, los componentes ART funcionan dentro de un árbol de React DOM). Esto hace que un centinela o variable global sea insostenible.</p>\n<p>Entonces, de alguna manera <strong><code class=\"language-text\">React.Component</code> delega el manejo de las actualizaciones de estado al código específico de la plataforma.</strong> Antes de que podamos entender cómo esto ocurre, investiguemos con mayor profundidad cómo están separados los paquetes y por qué.</p>\n<hr>\n<p>Existe una idea equivocada de que el «motor» de React vive dentro del paquete <code class=\"language-text\">react</code>. Eso no es cierto.</p>\n<p>De hecho, desde la <a href=\"https://reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html#two-packages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">separación de los paquetes en React 0.14</a>, el paquete <code class=\"language-text\">react</code> intencionalmente solo expone APIs para definir componentes. La mayoría de la <em>implementación</em> de React vive dentro de los «renderizadores».</p>\n<p><code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-dom/server</code>, <code class=\"language-text\">react-native</code>, <code class=\"language-text\">react-test-renderer</code>, <code class=\"language-text\">react-art</code> son algunos ejemplos de renderizadores (y puedes <a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/README.md#practical-examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">construir el tuyo</a>).</p>\n<p>Es por eso que el paquete <code class=\"language-text\">react</code> es útil sin importar la plataforma de destino. Todas sus exportaciones, como <code class=\"language-text\">React.Component</code>, <code class=\"language-text\">React.createElement</code>, las utilidades de <code class=\"language-text\">React.Children</code> y (eventualmente) los <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a>, son independientes de la plataforma de destino. Ya sea si corres React DOM, React DOM Server o React Native, tus componentes los importarán y usarán de la misma forma.</p>\n<p>En contraste, los paquetes de renderizadores exponen APIs específicas para cada plataforma como <code class=\"language-text\">ReactDOM.render()</code> que te permite montar una jerarquía de React en un nodo del DOM. Cada renderizador proporciona una API similar a esta. Idealmente, la mayoría de los <em>componentes</em> no deberían tener la necesidad de importar nada de un renderizador. Esto los mantiene más portables.</p>\n<p><strong>Lo que la mayoría de las personas imaginan como el «motor» de React está dentro de cada renderizador individual.</strong> Muchos renderizadores incluyen una copia del mismo código (lo llamamos el <a href=\"https://github.com/facebook/react/tree/master/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">«conciliador»</a>). Un <a href=\"https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html#migrating-to-google-closure-compiler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">paso de compilación</a> une el código del conciliador junto con el del renderizador en un paquete altamente optimizado para un mejor rendimiento. (Copiar código no es a menudo muy bueno para el tamaño final de las aplicaciones pero la gran mayoría de los usuarios de React solo necesitan un solo renderizador en cada momento, como el caso de <code class=\"language-text\">react-dom</code>).</p>\n<p>La moraleja aquí es que el paquete <code class=\"language-text\">react</code> solo te deja <em>utilizar</em> características de React pero no sabe nada de <em>cómo</em> están implementadas. Los paquetes renderizadores (<code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-native</code>, etc) proporcionan la implementación de características de React y la lógica específica de cada plataforma. Parte de ese código es compartido («el conciliador»), pero ese es un detalle de implementación de cada renderizador.</p>\n<hr>\n<p>Ahora sabemos por qué tanto <code class=\"language-text\">react</code> como <code class=\"language-text\">react-dom</code> tienen que actualizarse para obtener nuevas características. Por ejemplo, cuando React 16.3 añadió la API Context, se expuso <code class=\"language-text\">React.createContext()</code> en el paquete de React.</p>\n<p>Pero <code class=\"language-text\">React.createContext()</code> en realidad no <em>implementa</em> la funcionalidad de contexto. La implementación necesitaría ser diferente entre React DOM y React DOM Server, por ejemplo. Es por eso que <code class=\"language-text\">createContext()</code> devuelve algunos objetos planos:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Está algo simplificado</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">defaultValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    _currentValue<span class=\"token operator\">:</span> defaultValue<span class=\"token punctuation\">,</span>\n    Provider<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    Consumer<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Provider <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.provider'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.context'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cuando utilizas en el código <code class=\"language-text\">&lt;MyContext.Provider&gt;</code> o <code class=\"language-text\">&lt;MyContext.Consumer&gt;</code>, es el <em>renderizador</em> el que decide cómo manejarlos. React DOM puede que lleve el seguimiento de los valores de contexto de una forma, pero React DOM Server lo haga de una manera distinta.</p>\n<p><strong>Es por eso que si actualizas <code class=\"language-text\">react</code> a 16.3+, pero no actualizas <code class=\"language-text\">react-dom</code>, estarías usando un renderizador que no está todavía al tanto de los tipos especiales <code class=\"language-text\">Provider</code> y <code class=\"language-text\">Consumer</code>.</strong> Es por eso que un <code class=\"language-text\">react-dom</code> antiguo <a href=\"https://stackoverflow.com/a/49677020/458193\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fallaría diciendo que estos tipos no son válidos</a>.</p>\n<p>La misma advertencia aplica para React Native. Sin embargo, a diferencia de React DOM, un lanzamiento de React no «fuerza» inmediatamente un lanzamiento de React Native. Ambos tienen diferentes programaciones de sus lanzamientos. El código del renderizador actualizado se <a href=\"https://github.com/facebook/react-native/commits/master/Libraries/Renderer/oss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sincroniza de forma separada</a> con el repositorio de React Native una vez cada unas pocas semanas. Es por eso que las nuevas funcionalidades están disponibles en React Native con una programación diferente que en React DOM.</p>\n<hr>\n<p>Bien, ahora ya sabemos que el paquete <code class=\"language-text\">react</code> no contiene nada interesante y la implementación vive en los renderizadores como <code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-native</code> y otros. Pero eso no responde nuestra pregunta. ¿Cómo <code class=\"language-text\">setState()</code> dentro de <code class=\"language-text\">React.Component</code> le «habla» al renderizador apropiado?</p>\n<p><strong>La respuesta es que cada renderizador establece un campo especial en la clase creada.</strong> Este campo se llama <code class=\"language-text\">updater</code>. No es algo que <em>tú</em> estableces, esa es tarea de React DOM, React DOM Server o React Native justo después de crear una instancia de tu clase:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Dentro de React DOM</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TuComponente</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMUpdater<span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// Dentro de React DOM Server</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TuComponente</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMServerUpdater<span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// Dentro de React Native</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TuComponente</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactNativeUpdater<span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Al mirar a la <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactBaseClasses.js#L58-L67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">implementación de <code class=\"language-text\">setState</code> en <code class=\"language-text\">React.Component</code></a>, todo lo que hace es delegar trabajo al renderizador que creó esta instancia de componente.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Está algo simplificado</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">partialState<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ¡Usa el campo `updater` para hablar con el renderizador!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updater<span class=\"token punctuation\">.</span><span class=\"token function\">enqueueSetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> partialState<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React DOM Server <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRenderer.js#L442-L448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">podría querer</a> ignorar una actualización de estado y advertirte, mientras React DOM y React Native dejarían a sus copias del conciliador que se <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberClassComponent.js#L190-L207\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">encargaran de eso</a>.</p>\n<p>Y así es como <code class=\"language-text\">this.setState()</code> puede actualizar el DOM aún cuando está definido en el paquete de React. Él lee <code class=\"language-text\">this.updater</code> puesto por React DOM y deja que React DOM organice y maneje la actualización.</p>\n<hr>\n<p>¿Ya sabemos de las clases, pero, y los Hooks?</p>\n<p>Cuando las personas ven por primera vez la <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API de la propuesta de los Hooks</a>, a menudo se preguntan: ¿cómo <code class=\"language-text\">useState</code> «sabe qué hacer»? Se asume que es más «mágico» que una clase base <code class=\"language-text\">React.Component</code> con <code class=\"language-text\">this.setState()</code>.</p>\n<p>Pero como hemos visto hoy, la implementación de <code class=\"language-text\">setState()</code> en la clase base ha sido todo el tiempo una ilusión. No hace nada excepto pasar la llamada al renderizador actual. Y el Hook <code class=\"language-text\">useState</code> <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactHooks.js#L55-L56\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hace exactamente lo mismo</a>.</p>\n<p><strong>En lugar de un campo <code class=\"language-text\">updater</code>, los Hooks tienen un objeto «<em>dispatcher</em>».</strong> Cuando llamas a <code class=\"language-text\">React.useState()</code>, <code class=\"language-text\">React.useEffect()</code> u otro de los Hooks integrados en React, estas llamadas se pasan al <em>dispatcher</em> actual.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// En React (está algo simplificado)</span>\n<span class=\"token keyword\">const</span> React <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// La propiedad real está algo más escondida. ¡Intenta encontrarla!</span>\n  __currentDispatcher<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Y los renderizadores individuales establecen el <em>dispatcher</em> antes de renderizar tu componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// In React DOM</span>\n<span class=\"token keyword\">const</span> prevDispatcher <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">React<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> ReactDOMDispatcher<span class=\"token punctuation\">;</span></span><span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> <span class=\"token function\">TuComponente</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Restore it back</span></span><span class=\"gatsby-highlight-code-line\">  React<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> prevDispatcher<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por ejemplo, la implementación de React DOM Server está <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L340-L354\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aquí</a> y la implementación del conciliador compartida por React DOM y React Native está <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberHooks.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aquí</a>.</p>\n<p>Es por eso que un renderizador como <code class=\"language-text\">react-dom</code> necesita acceder al mismo paquete <code class=\"language-text\">react</code> del que llamas a los Hooks. De otra forma, ¡tu componente no «vería» al <em>dispatcher</em>! Esto puede que no funcione cuando tienes <a href=\"https://github.com/facebook/react/issues/13991\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">múltiples copias de React</a> en el mismo árbol de componentes. Sin embargo, esto siempre ha conducido a oscuros errores, así que los Hooks te obligan a resolver la duplicación antes de que te salga caro.</p>\n<p>Si bien no lo promovemos, técnicamente puedes sobrescribir tú mismo el <em>dispatcher</em> para casos de uso avanzados que involucren la creación de herramientas. (Mentí sobre el nombre <code class=\"language-text\">__currentDispatcher</code>, pero puedes buscar el real en el repositorio de React). Por ejemplo, React DevTools usará un <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-debug-tools/src/ReactDebugHooks.js#L203-L214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>dispatcher</em> creado especialmente</a> con el propósito de hacer la introspección del árbol de Hooks al capturar las trazas de la pila de Javascript. <em>No repitas esto en casa.</em></p>\n<p>Esto también significa que los Hooks no están atados inherentemente a React. En el futuro si más bibliotecas quisieran reutilizar los mismos Hooks primitivos, en teoría el <em>dispatcher</em> se podría mover a un paquete separado y exponerse como una API de primera clase con un nombre menos <em>aterrador</em>. En la práctica, preferiríamos evitar la abstracción prematura hasta que haya necesidad de ella.</p>\n<p>Tanto el campo <code class=\"language-text\">updater</code> y el objeto <code class=\"language-text\">__currentDispatcher</code> son formas de un principio genérico de programación llamado <em>inyección de dependencias</em>. En ambos casos, los renderizadores «inyectan» implementaciones de características como <code class=\"language-text\">setState</code> en el paquete genérico de React para así mantener tus componentes más declarativos.</p>\n<p>No tienes que pensar en cómo funciona esto cuando utilizas React. Nos gustaría que los usuarios de React pasen más tiempo pensando en su código de aplicación que en conceptos abstractos como la inyección de dependencias. Pero si alguna ves te preguntaste cómo <code class=\"language-text\">this.setState()</code> o <code class=\"language-text\">useState()</code> saben qué hacer, espero que esto haya sido de ayuda.</p>\n<hr>","timeToRead":10,"frontmatter":{"title":"¿Cómo sabe setState qué hacer?","date":"December 09, 2018","spoiler":"La inyección de dependencias es buena si no tienes que pensar en ella.","cta":null},"fields":{"slug":"/es/how-does-setstate-know-what-to-do/","langKey":"es"}}},"pageContext":{"slug":"/es/how-does-setstate-know-what-to-do/","translations":["fr","es","ja","ko","pt-br","tr","zh-hans"],"translatedLinks":["/why-do-react-elements-have-typeof-property/","/how-does-react-tell-a-class-from-a-function/","/why-do-we-write-super-props/"]}}}