{"componentChunkName":"component---src-templates-blog-post-js","path":"/es/why-isnt-x-a-hook/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"c81e5b10-7e70-5ead-b8d3-b429b2701cd9","html":"<p>Desde la primera versión alfa de los <a href=\"https://reactjs.org/hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> hay una pregunta recurrente en los debates: «¿Por qué <em>&#x3C;tal API></em> no es un Hook?»</p>\n<p>A modo de recordatorio, les muestro algunas que <em>sí son</em> Hooks:</p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useState()</code></a> permite declarar una variable de estado.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useEffect()</code></a> permite declarar un efecto secundario.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useContext()</code></a> permite acceder a un contexto.</li>\n</ul>\n<p>Pero existen otras API, como <code class=\"language-text\">React.memo()</code> y <code class=\"language-text\">&lt;Context.Provider&gt;</code>, que <em>no</em> son Hooks. Versiones con Hooks de estas comúnmente propuestas serían <em>no composicionales</em> o <em>antimodulares</em>. Este artículo te ayudará a comprender por qué.</p>\n<p><strong>Nota: Este artículo es una inmersión para aquellos interesados en analizar las API. ¡No necesitas pensar en nada de esto para ser productivo con React!</strong></p>\n<hr>\n<p>Hay dos propiedades importantes que queremos que se preserven en las API de React:</p>\n<ol>\n<li><strong>Composición:</strong> Los <a href=\"https://reactjs.org/docs/hooks-custom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks personalizados</a> son la razón principal por la que estamos tan entusiasmados con la API de los Hooks. Esperamos que las personas construyan sus propios Hooks con mucha frecuencia, y por ello necesitamos que los Hooks escritos por personas distintas <a href=\"/why-do-hooks-rely-on-call-order/#flaw-4-the-diamond-problem\">no entren en conflicto</a>. (¿No estamos todos ya malcriados por la manera tan limpia en que se pueden componer los componentes sin antes romperse entre sí?)</li>\n<li><strong>Depuración:</strong> Queremos que los errores sean <a href=\"/the-bug-o-notation/\">fáciles de encontrar</a> a medida que la aplicación crece. Una de las mejores funcionalidades de React es que si ves algo renderizado de manera incorrecta, puedes recorrer el árbol hacia arriba hasta que encuentres qué prop o estado de componente causó el error.</li>\n</ol>\n<p>Estas dos restricciones juntas nos pueden decir qué puede o <em>no puede</em> ser un Hook. Probemos algunos ejemplos.</p>\n<hr>\n<h2 id=\"un-hook-real-usestate\"><a href=\"#un-hook-real-usestate\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Un Hook real: <code class=\"language-text\">useState()</code></h2>\n<h3 id=\"composición\"><a href=\"#composici%C3%B3n\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composición</h3>\n<p>Múltiples Hooks personalizados invocando cada uno a <code class=\"language-text\">useState()</code> no entran en conflicto:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Lo que pasa aquí, aquí se queda.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Lo que pasa aquí, aquí se queda.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Añadir una nueva invocación incondicional a <code class=\"language-text\">useState()</code> es siempre segura. No necesitas saber nada acerca de otros Hooks usados por un componente para declarar una nueva variable de estado. Tampoco puedes romper otras variables de estado al actualizar una de ellas.</p>\n<p><strong>Verdicto:</strong> ✅ <code class=\"language-text\">useState()</code> no hacen frágiles a los Hooks personalizados.</p>\n<h3 id=\"depuración\"><a href=\"#depuraci%C3%B3n\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Depuración</h3>\n<p>Los Hooks son útiles porque puedes pasar valores <em>entre</em> ellos:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isMobile</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> isMobile <span class=\"token operator\">=</span> width <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MOBILE_VIEWPORT</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span>isMobile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>¿Pero qué ocurre si cometemos un error? ¿Cómo funciona la depuración?</p>\n<p>Digamos que la clase CSS que obtenemos de <code class=\"language-text\">theme.comment</code> está mal. ¿Cómo depuramos esto? Podemos establecer un punto de quiebre o algunos <em>logs</em> en el cuerpo de nuestro componente.</p>\n<p>Quizá notaríamos que <code class=\"language-text\">theme</code> está mal pero <code class=\"language-text\">width</code> e <code class=\"language-text\">isMobile</code> están correctos. Esto nos indicaría que el problema está dentro de <code class=\"language-text\">useTheme()</code>. O quizá veríamos que <code class=\"language-text\">width</code> en sí está incorrecto. Esto nos indicaría que debiéramos mirar dentro de <code class=\"language-text\">useWindowWidth()</code>.</p>\n<p>** Una sola mirada a los valores intermedios nos dice cuál de los Hooks en el nivel superior contiene el error.** No necesitamos mirar a <em>todas</em> sus implementaciones.</p>\n<p>Luego podemos «aproximarnos» al que tiene el error, y repetir.</p>\n<p>Esto adquiere mayor importancia si la profundidad del anidamiento del Hook personalizado se incrementa. Imagina que tenemos 3 niveles de anidamiento, cada nivel usando 3 Hooks personalizados dentro. La <a href=\"/the-bug-o-notation/\">diferencia</a> entre buscar un error en <strong>3 lugares</strong> contra potencialmente buscar <strong>3 + 3×3 + 3×3×3 = 39 lugares</strong> es enorme. Por suerte <code class=\"language-text\">useState()</code> no puede mágicamente «influenciar» a otros Hooks o componentes. Un valor con errores devuelto por él deja un rastro detrás, justo como cualquier variable. 🐛</p>\n<p><strong>Veredicto:</strong> ✅ <code class=\"language-text\">useState()</code> no oscurece la relación causa-efecto en nuestro código. Podemos seguir el rastro directamente al error.</p>\n<hr>\n<h2 id=\"no-es-un-hook-usebailout\"><a href=\"#no-es-un-hook-usebailout\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>No es un Hook: <code class=\"language-text\">useBailout()</code></h2>\n<p>Como una optimización, los componentes que usan Hooks pueden librarse (en inglés <em>bail out</em>) de volver a ser renderizados.</p>\n<p>Una forma de hacerlo es cubrir todo el componente con<a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html#reactmemo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">React.memo()</code></a>. Se libra de volver a renderizar si las props son superficialmente iguales a lo que se tenía durante el último renderizado. Esto lo hace similar a <code class=\"language-text\">PureComponent</code> en clases.</p>\n<p><code class=\"language-text\">React.memo()</code> toma un componente y devuelve un componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><strong>Pero por qué no es un Hook?</strong></p>\n<p>Ya sea si lo llamas <code class=\"language-text\">useShouldComponentUpdate()</code>, <code class=\"language-text\">useBailout()</code>, <code class=\"language-text\">usePure()</code>, o <code class=\"language-text\">useShouldComponentUpdate()</code>, la propuesta suele parecerse a algo como esto:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ⚠️ No es una API real</span>\n  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevColor</span> <span class=\"token operator\">=></span> prevColor <span class=\"token operator\">!==</span> color<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'button-'</span> <span class=\"token operator\">+</span> color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n      OK\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hay algunas otras variaciones (por ejemplo un simple marcador <code class=\"language-text\">usePure()</code>) pero a grandes rasgos tienen las mismas fallas.</p>\n<h3 id=\"composición-1\"><a href=\"#composici%C3%B3n-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composición</h3>\n<p>Digamos que intentamos poner <code class=\"language-text\">useBailout()</code> en dos Hooks personalizados:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ No es una API real</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevIsOnline</span> <span class=\"token operator\">=></span> prevIsOnline <span class=\"token operator\">!==</span> isOnline<span class=\"token punctuation\">,</span> isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleStatusChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">status</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ No es una API real</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevWidth</span> <span class=\"token operator\">=></span> prevWidth <span class=\"token operator\">!==</span> width<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleResize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>¿Qué ocurre ahora si usas ambos en el mismo componente?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Typing...'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>¿Cuándo se vuelve a renderizar?</p>\n<p>Si cada llamada a <code class=\"language-text\">useBailout()</code> tiene el poder de detener una actualización, entonces las actualizaciones de <code class=\"language-text\">useWindowWidth()</code> serían bloqueadas por <code class=\"language-text\">useFriendStatus()</code>, y viceversa. <strong>Estos Hooks se romperían entre sí.</strong></p>\n<p>Sin embargo, si <code class=\"language-text\">useBailout()</code> se respetara cuando <em>todas</em> las llamadas a él dentro de un solo componente <em>estén de acuerdo</em> en bloquear una actualización, nuestro <code class=\"language-text\">ChatThread</code> no sería capaz de responder con una actualización a los cambios de la prop <code class=\"language-text\">isTyping</code>.</p>\n<p>Aún peor, con estas semánticas <strong>cualquier Hook que se añada a <code class=\"language-text\">ChatThread</code> se rompería si no llaman <em>también</em> a <code class=\"language-text\">useBailout()</code></strong>. De otra forma, no pueden «votar en contra» de librar de la actualización dentro de <code class=\"language-text\">useWindowWidth()</code> y <code class=\"language-text\">useFriendStatus()</code>.</p>\n<p><strong>Verdicto:</strong> 🔴 <code class=\"language-text\">useBailout()</code> rompe la composición. Añadirlo a un Hook rompe las actualizaciones de estado en otros Hooks. Queremos que las API sean <a href=\"/optimized-for-change/\">antifrágiles</a>, y este comportamiento es prácticamente lo opuesto.</p>\n<h3 id=\"depuración-1\"><a href=\"#depuraci%C3%B3n-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Depuración</h3>\n<p>¿Cómo un Hook como <code class=\"language-text\">useBailout()</code> afecta a la depuración?</p>\n<p>Utilizaremos el mismo ejemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Typing...'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Digamos que la etiqueta <code class=\"language-text\">Typing...</code> no aparece donde se espera, aun cuando en algún sitio, muchas capas por encima, la prop está cambiando. ¿Cómo lo depuramos?</p>\n<p><strong>Normalmente, en React puedes responder con seguridad esta pregunta mirando <em>hacia arriba</em>.</strong> Si <code class=\"language-text\">ChatThread</code> no obtiene el valor <code class=\"language-text\">isTyping</code>, podemos abrir el componente que renderiza <code class=\"language-text\">&lt;ChatThread isTyping={myVar} /&gt;</code> y comprobar <code class=\"language-text\">myVar</code>, y así sucesivamente. En uno de estos niveles, o bien encontraremos una implementación errónea de <code class=\"language-text\">shouldComponentUpdate()</code>, o un valor incorrecto de <code class=\"language-text\">isTyping</code> pasándose hacia abajo. Una mirada a cada componente en la cadena es generalmente suficiente para localizar el origen del problema.</p>\n<p>Sin embargo, si este Hook <code class=\"language-text\">useBailout()</code> fuera real, nunca sabrías la razón por la que una actualización se saltó hasta que compruebas <em>cada uno de los Hooks personalizados</em> usados (en profundidad) por nuestro componente <code class=\"language-text\">ChatThread</code> y los componentes de su cadena de propiedad. Dado que cada componente padre puede <em>también</em> usar Hooks personalizados, esto es un desastre en materia de <a href=\"/the-bug-o-notation/\">escalabilidad</a>.</p>\n<p>Es como si estuvieras buscando un destornillador en una cajonera y cada gaveta tiene otras cajoneras más pequeñas, y no sabes hasta cuándo continúa el enredo.</p>\n<p><strong>Veredicto:</strong> 🔴 El Hook <code class=\"language-text\">useBailout()</code> no solo rompe la composición, sino también incrementa ampliamente el número de pasos para depurar y la carga cognitiva para encontrar una optimización errónea — en algunos casos, exponencialmente.</p>\n<hr>\n<p>Solo nos detuvimos en un Hook real, <code class=\"language-text\">useState()</code>, y una sugerencia frecuente que intencionalmente <em>no</em> es un Hook — <code class=\"language-text\">useBailout()</code>. Los comparamos con el filtro de la Composición y la Depuración, y analizamos por qué uno de ellos funciona y el otro no.</p>\n<p>Si bien no hay una «versión Hook» de <code class=\"language-text\">memo()</code> o <code class=\"language-text\">shouldComponentUpdate()</code>, React <em>sí</em> provee un Hook llamado <a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useMemo()</code></a>. Sirve a un propósito similar, pero su semántica es lo suficientemente distinta para no caer en los escollos descritos anteriormente.</p>\n<p><code class=\"language-text\">useBailout()</code> es solo un ejemplo de algo que no funciona bien como un Hook. Pero hay otros que simplemente no funcionan como Hooks — por ejemplo, <code class=\"language-text\">useProvider()</code>, <code class=\"language-text\">useCatch()</code>, o <code class=\"language-text\">useSuspense()</code>.</p>\n<p>¿Puedes ver por qué?</p>\n<p><em>(Susurros: Composición… Depuración…)</em></p>","timeToRead":8,"frontmatter":{"title":"¿Por qué x no es un Hook?","date":"January 26, 2019","spoiler":"Solo porque podemos, no significa que debamos hacerlo.","cta":null},"fields":{"slug":"/es/why-isnt-x-a-hook/","langKey":"es"}}},"pageContext":{"slug":"/es/why-isnt-x-a-hook/","translations":["de","es","fr","it","ko","pt-br","zh-hans"],"translatedLinks":[]}}}