{"componentChunkName":"component---src-templates-blog-post-js","path":"/es/how-does-react-tell-a-class-from-a-function/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"e5def8bb-aa64-54a4-9787-556dfde9da0a","html":"<p>Considera este componente <code class=\"language-text\">Saludo</code> definido como una función:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hola</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React también permite definirlo como una clase:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Saludo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hola</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(Hasta <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hace poco</a>, esa era la única forma de utilizar características como el estado.)</p>\n<p>Cuando se quiere renderizar un componente <code class=\"language-text\">&lt;Saludo /&gt;</code>, no importa cómo se define:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Clase o función — no importa.</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Saludo</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>¿Pero a <em>React</em> sí que le importa la diferencia!</p>\n<p>Si <code class=\"language-text\">Saludo</code> es una función, React necesita invocarla:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Tu código</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hola</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Dentro de React</span>\n<span class=\"token keyword\">const</span> resultado <span class=\"token operator\">=</span> <span class=\"token function\">Saludo</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Hola&lt;/p></span></code></pre></div>\n<p>Pero si <code class=\"language-text\">Saludo</code> es una clase, React necesita instanciarla con el operador <code class=\"language-text\">new</code> y <em>luego</em> invocar el método <code class=\"language-text\">render</code> en la instancia recién creada:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Tu código</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Saludo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hola</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Dentro de React</span>\n<span class=\"token keyword\">const</span> instancia <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Saludo {}</span>\n<span class=\"token keyword\">const</span> resultado <span class=\"token operator\">=</span> instancia<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Hola&lt;/p></span></code></pre></div>\n<p>En ambos casos el objetivo de React es obtener el nodo renderizado (en este ejemplo, <code class=\"language-text\">&lt;p&gt;Hola&lt;/p&gt;</code>). Pero los pasos exactos dependen de cómo se define <code class=\"language-text\">Saludo</code>.</p>\n<p><strong>¿Pero cómo sabe React si algo es una clase o una función?</strong></p>\n<p>Tal y como dije en mi <a href=\"/why-do-we-write-super-props/\">artículo anterior</a>, <strong>no <em>necesitas</em> saber esto para ser productivo en React.</strong> Yo me pasé años sin saberlo. Por favor no conviertas esto en una pregunta de entrevista. De hecho, este artículo es más sobre Javascript que sobre React.</p>\n<p>Este blog es para el lector curioso que quiere saber <em>por qué</em> React funciona de cierta manera. ¿Eres esa persona? Si es así, profundicemos juntos.</p>\n<p><strong>Este es un viaje largo, así que abróchate el cinturón. Este artículo no tiene mucha información sobre React en sí, pero analizaremos algunos aspectos de <code class=\"language-text\">new</code>, <code class=\"language-text\">this</code>, <code class=\"language-text\">class</code>, funciones flecha, <code class=\"language-text\">prototype</code>, <code class=\"language-text\">__proto__</code>, <code class=\"language-text\">instanceof</code>, y como todas funcionan en conjunto en JavaScript. Afortunadamente, no necesitas pensar mucho sobre estas cosas cuando <em>usas</em> React. Cuando implementas React la historia es otra…</strong></p>\n<p>(Si lo único que quieres es saber la respuesta, ve justo hasta el final).</p>\n<hr>\n<p>Primero, necesitamos entender por qué es importante tratar a las funciones y a las clases de manera diferente. Nota como usamos el operador <code class=\"language-text\">new</code> cuando se invoca una clase:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Si Saludo es una función</span>\n<span class=\"token keyword\">const</span> resultado <span class=\"token operator\">=</span> <span class=\"token function\">Saludo</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Hola&lt;/p></span>\n\n<span class=\"token comment\">// Si Saludo es una clase</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> instancia <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Saludo {}</span></span><span class=\"token keyword\">const</span> resultado <span class=\"token operator\">=</span> instancia<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Hola&lt;/p></span></code></pre></div>\n<p>Veamos a grandes rasgos lo que hace el operador <code class=\"language-text\">new</code> en JavaScript.</p>\n<hr>\n<p>En los viejos tiempos, Javascript no tenía clases. Sin embargo podías expresar un patrón similar a las clases usando funciones comunes. <strong>En concreto, se podía usar <em>cualquier</em> función en un papel similar al de un constructor de clase al añadir <code class=\"language-text\">new</code> antes de la invocación:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Solo una función</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nombre <span class=\"token operator\">=</span> nombre<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Persona {nombre: 'Fred'}</span>\n<span class=\"token keyword\">var</span> george <span class=\"token operator\">=</span> <span class=\"token function\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token string\">'George'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 No funcionará</span></code></pre></div>\n<p>¡Aún hoy se puede escribir código como este! Pruébalo en las herramientas de desarrollo.</p>\n<p>Si invocabas <code class=\"language-text\">Persona(&#39;Fred&#39;)</code> <strong>sin</strong> <code class=\"language-text\">new</code>, dentro de ella <code class=\"language-text\">this</code> apuntaría a algo global e inútil (por ejemplo <code class=\"language-text\">window</code> o <code class=\"language-text\">undefined</code>). Por lo que nuestro código fallaría o haría algo estúpido como asignarle un valor a <code class=\"language-text\">window.name</code>.</p>\n<p>Al añadir <code class=\"language-text\">new</code> antes de la invocación, estamos diciendo: «JavaScript, sé que <code class=\"language-text\">Persona</code> es solo una función pero finjamos que es algo como un constructor de clase. <strong>Crea un objeto <code class=\"language-text\">{}</code> y pon a apuntar a <code class=\"language-text\">this</code> dentro de la función <code class=\"language-text\">Persona</code> a ese objeto; para que así yo pueda asignar cosas como <code class=\"language-text\">this.name</code>. Por último, devuélveme ese objeto.</strong>”</p>\n<p>Eso es lo que el operador <code class=\"language-text\">new</code> hace.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// El mismo objeto que `this` dentro de `Persona`</span></code></pre></div>\n<p>El operador <code class=\"language-text\">new</code> también pone a disposición dentro del objeto <code class=\"language-text\">fred</code> todo lo que pongamos en <code class=\"language-text\">Persona.prototype</code>.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nombre <span class=\"token operator\">=</span> nombre<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token class-name\">Persona</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">diHola</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hola, Soy '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nombre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">fred<span class=\"token punctuation\">.</span><span class=\"token function\">diHola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Así es como las personas emulaban las clases antes que Javascript las añadiera directamente.</p>\n<hr>\n<p>Así que <code class=\"language-text\">new</code> ha estado rondando JavaScript por bastante tiempo. Sin embargo, las clases son mucho más recientes; ellas nos permiten reescribir el código anterior para acercarnos más a lo que intentamos expresar:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persona</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nombre <span class=\"token operator\">=</span> nombre<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">diHola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hola, Soy '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nombre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfred<span class=\"token punctuation\">.</span><span class=\"token function\">diHola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Capturar la intención del desarrollador</em> es importante en el diseño de lenguajes y API.</p>\n<p>Si escribes una función, Javascript no puede adivinar si la intención es ser invocada como <code class=\"language-text\">alert()</code> o si funciona como un constructor como <code class=\"language-text\">new Persona()</code>. Si se olvidara especificar <code class=\"language-text\">new</code> para una función como <code class=\"language-text\">Persona</code>, ello conduciría a un comportamiento confuso.</p>\n<p><strong>La sintaxis de las clases nos permiten decir: «Esto no es solo una función — es una clase y tiene un constructor».</strong> Si olvidas <code class=\"language-text\">new</code> al invocarla, Javascript elevará un error:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ✅  Si Persona es una función: no hay problemas</span>\n<span class=\"token comment\">// ✅  Si Persona es una clase: tampoco hay problemas</span>\n\n<span class=\"token keyword\">let</span> george <span class=\"token operator\">=</span> <span class=\"token function\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token string\">'George'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Olvidamos `new`</span>\n<span class=\"token comment\">// 😳 Si Persona es un función tipo constructor: comportamiento confuso</span>\n<span class=\"token comment\">// 🔴 Si Persona es una clase: falla inmediatamente</span></code></pre></div>\n<p>Esto nos ayuda a detectar el error rápidamente en lugar de esperar por algún error oculto como que <code class=\"language-text\">this.name</code> sea tratado como <code class=\"language-text\">window.name</code> y no <code class=\"language-text\">george.name</code>.</p>\n<p>Sin embargo, ello significa que React necesita poner <code class=\"language-text\">new</code> antes de invocar cualquier clase. No puede simplemente invocarla como una función regular, ¡pues Javascript lo trataría como un error!</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Contador</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hola</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 🔴 React no puede hacer esto:</span>\n<span class=\"token keyword\">const</span> instancia <span class=\"token operator\">=</span> <span class=\"token function\">Contador</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esto claramente trae problemas.</p>\n<hr>\n<p>Antes de ver cómo React lo resuelve, es importante recordar que la mayoría de las personas que usan React utilizan compiladores como Babel para traducir características modernas como las clases a algo que puedan entender los navegadores antiguos. Por tanto, debemos considerar a los compiladores en nuestro diseño.</p>\n<p>En las primeras versiones de Babel, se podían invocar las clases sin <code class=\"language-text\">new</code>. Sin embargo, eso se solucionó — con la generación de algún código extra:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Un fragmento simplificado de la salida de Babel:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Persona</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No se puede invocar una clase como una función\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Nuestro código:</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nombre <span class=\"token operator\">=</span> nombre<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Bien</span>\n<span class=\"token function\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token string\">'George'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 🔴 No se puede llamar una clase como una función</span></code></pre></div>\n<p>Puede que hayas visto código como este en tu archivo compilado. Eso es lo que hacen todas esas funciones <code class=\"language-text\">_classCallCheck</code>. (Puedes reducir el tamaño del resultado de la compilación si optas por el «modo relajado» (<em>loose mode</em>) sin chequeos pero ello puede complicar tu eventual transición a clases nativas reales.)</p>\n<hr>\n<p>Hasta este punto deberías comprender a grandes rasgos la diferencia entre invocar algo con <code class=\"language-text\">new</code> y sin <code class=\"language-text\">new</code>:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code class=\"language-text\">new Persona()</code></th>\n<th><code class=\"language-text\">Persona()</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">clase</code></td>\n<td>✅ <code class=\"language-text\">this</code> es una instancia de <code class=\"language-text\">Persona</code></td>\n<td>🔴 <code class=\"language-text\">TypeError</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">función</code></td>\n<td>✅ <code class=\"language-text\">this</code> es una instancia de <code class=\"language-text\">Persona</code></td>\n<td>😳 <code class=\"language-text\">this</code> es <code class=\"language-text\">window</code> o <code class=\"language-text\">undefined</code></td>\n</tr>\n</tbody>\n</table>\n<p>Por eso es importante para React invocar tu componente de manera correcta. <strong>Si tu componente se define como una clase, React necesita usar <code class=\"language-text\">new</code> cuando lo invoca.</strong></p>\n<p>Entonces, ¿puede React simplemente chequear si algo es una clase o no?</p>\n<p>¡No tan fácil! Aún si pudiésemos <a href=\"https://stackoverflow.com/questions/29093396/how-do-you-check-the-difference-between-an-ecmascript-6-class-and-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">diferenciar una clase de una función en JavaScript</a>, no funcionaría para las clases procesadas por herramientas como Babel. Para el navegador, solo son simples funciones. Mala suerte para React.</p>\n<hr>\n<p>Bien, ¿quizá React podría usar <code class=\"language-text\">new</code> en cada invocación? Desafortunadamente, eso tampoco funciona siempre.</p>\n<p>Con funciones comunes, invocarlas con <code class=\"language-text\">new</code> les daría una instancia de objeto como <code class=\"language-text\">this</code>. Eso es deseable para funciones escritas como un constructor (como nuestra anterior <code class=\"language-text\">Persona</code>), pero sería confuso para las componentes de función:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// No esperaríamos aquí que `this` sea algún tipo de instancia</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hola</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sin embargo, eso sería tolerable. Hay <em>otras</em> dos razones para descartar esa idea.</p>\n<hr>\n<p>La primera razón por la que usar siempre <code class=\"language-text\">new</code> no funcionaría es que en el caso de las funciones flecha nativas (no las que compila Babel), invocarlas con <code class=\"language-text\">new</code> lanza un error:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Saludo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hola</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 Saludo no es un constructor</span></code></pre></div>\n<p>Este comportamiento es intencional y se desprende del diseño de las funciones flecha. Uno de los principales beneficios de las funciones flecha es que <em>no</em> tienen su propio valor <code class=\"language-text\">this</code> — en su lugar <code class=\"language-text\">this</code> se resuelve a partir de la función común más cercana:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Amigos</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token keyword\">const</span> amigos <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>amigos<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> amigos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">amigo</span> <span class=\"token operator\">=></span>\n      <span class=\"token operator\">&lt;</span>Amigo\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token comment\">// `this` se resuelve a partir del método `render`</span></span><span class=\"gatsby-highlight-code-line\">        tamaño<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>tamaño<span class=\"token punctuation\">}</span></span>        nombre<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>amigo<span class=\"token punctuation\">.</span>nombre<span class=\"token punctuation\">}</span>\n        key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>amigo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bien, así que <strong>las funciones flecha no tienen su propio <code class=\"language-text\">this</code>.</strong> ¡Pero eso significa que serían completamente inútiles como constructores!</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Persona</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 🔴 ¡Esto no tendría sentido!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nombre <span class=\"token operator\">=</span> nombre<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por tanto, <strong>Javascript no permite invocar una función flecha con <code class=\"language-text\">new</code>.</strong> Si lo haces, probablemente es un error, y es mejor decírtelo pronto. Es similar a como Javascript no te permite invocar una clase <em>sin</em> <code class=\"language-text\">new</code>.</p>\n<p>Eso es bueno, pero nos arruina el plan. React no puede simplemente invocar con <code class=\"language-text\">new</code> a todo ¡porque haría fallar a las funciones flecha! Podríamos intentar detectar específicamente a las funciones flecha por su falta de <code class=\"language-text\">prototype</code>, y no invocarlas con <code class=\"language-text\">new</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// undefined</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// {constructor: f}</span></code></pre></div>\n<p>Pero esto <a href=\"https://github.com/facebook/react/issues/4599#issuecomment-136562930\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">no funcionaría</a> para funciones compiladas con Babel; lo que podría no ser de gran importancia, pero hay otra razón que hace de esta vía un callejón sin salida.</p>\n<hr>\n<p>Otra razón por la que no podemos usar siempre <code class=\"language-text\">new</code> es que evitaría que React diera soporte a componentes que devuelven cadenas u otros tipos primitivos.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Hola'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 'Hola'</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 Saludo {}</span></code></pre></div>\n<p>De nuevo, Esto tiene que ver con las rarezas del diseño del <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">operador <code class=\"language-text\">new</code></a>. Como vimos antes, <code class=\"language-text\">new</code> le dice al motor de Javascript que cree un objeto, que dentro de la función ese objeto sea <code class=\"language-text\">this</code>, y luego nos devuelva ese objeto como resultado de <code class=\"language-text\">new</code>.</p>\n<p>Sin embargo, Javascript también permite que una función invocada con <code class=\"language-text\">new</code> <em>sobreescriba</em> el valor de retorno de <code class=\"language-text\">new</code> devolviendo algún otro objeto. Presumiblemente, esto se consideró util para patrones como <em>pool</em> en el que se quiere reutilizar instancias:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Inicialización perezosa</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> vectorCero <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vectorCero <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Reutilizar la misma instancia</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> vectorCero<span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    vectorCero <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😲 b === c</span></span></code></pre></div>\n<p>Sin embargo, <code class=\"language-text\">new</code> además <em>ignora completamente</em> el valor de retorno de una función si este no es un objeto. Si devuelves una cadena o un número, es como si no hubiera <code class=\"language-text\">return</code> en lo absoluto.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 42</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 Answer {}</span></code></pre></div>\n<p>Simplemente no hay manera de leer un valor de retorno primitivo (como un número o una cadena) de una función cuando se invoca con <code class=\"language-text\">new</code>. Así que si React siempre usase <code class=\"language-text\">new</code>, sería incapaz de añadir soporte para componentes que devuelven cadenas!</p>\n<p>Eso es inaceptable por lo que necesitamos una solución intermedia.</p>\n<hr>\n<p>¿Qué aprendimos hasta ahora? React necesita invocar a las clases (incluidas las de la salida de Babel) <em>con</em> <code class=\"language-text\">new</code>, pero necesita invocar a las funciones comunes y a las funciones flechas (incluidas las de la salida de Babel) <em>sin</em> <code class=\"language-text\">new</code>. Y no hay forma confiable de distinguirlas.</p>\n<p><strong>Si no podemos resolver un problema general, ¿podemos resolver uno más específico?</strong></p>\n<p>Cuando defines un componente como una clase, probablemente quieras heredar de <code class=\"language-text\">React.Component</code> para tener disponibles los métodos ya incluidos como <code class=\"language-text\">this.setState()</code>. <strong>En lugar de intentar detectar todas las clases, ¿podremos detectar solo a los descendientes de <code class=\"language-text\">React.Component</code></strong></p>\n<p>Espóiler: esto es exactamente lo que hace React.</p>\n<hr>\n<p>Quizá la forma idiomática de chequear si <code class=\"language-text\">Saludo</code> es un componente de clase de React es realizando la comprobación <code class=\"language-text\">Saludo.prototype instanceof React.Component</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span>prototype <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>Sé lo que estás pensando. ¡¿Qué es lo que acaba de ocurrir?! Para responderlo, necesitamos entender los prototipos de JavaScript.</p>\n<p>Puede que estés familiarizado con la «cadena de prototipo». Cada objeto en Javascript puede tener un «prototipo». Cuando escribimos <code class=\"language-text\">fred.diHola()</code> y el objeto <code class=\"language-text\">fred</code> no tiene un atributo <code class=\"language-text\">diHola</code> lo que hacemos es buscar el atributo <code class=\"language-text\">diHola</code> en el prototipo de <code class=\"language-text\">fred</code>. Si ahí no lo encontramos, buscamos en el próximo prototipo de la cadena — el prototipo del prototipo de <code class=\"language-text\">fred</code>. Y así sucesivamente.</p>\n<p><strong>Para hacer las cosas más confusas, el atributo <code class=\"language-text\">prototype</code> de una clase o una función <em>no</em> apunta al prototipo de ese valor.</strong> No es broma.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Persona</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🤪 No es el prototipo de Persona</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Persona<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 El prototipo de Persona</span></code></pre></div>\n<p>Así que la «cadena de prototipo» es más bien <code class=\"language-text\">__proto__.__proto__.__proto__</code> que <code class=\"language-text\">prototype.prototype.prototype</code>. Me tomó años entender esto.</p>\n<p>¿Qué es entonces el atributo <code class=\"language-text\">prototype</code> en una función o en una clase? <strong>¡Es el <code class=\"language-text\">__proto__</code> que se le da a todos los objetos de esa clase o función creados con <code class=\"language-text\">new</code>!</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nombre <span class=\"token operator\">=</span> nombre<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Persona</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">diHola</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hola, Soy '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nombre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Persona</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `Persona.prototype` se le asigna a `fred.__proto__`</span></span></code></pre></div>\n<p>Y esa cadena de <code class=\"language-text\">__proto__</code> es como JavaScript busca los atributos:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">fred<span class=\"token punctuation\">.</span><span class=\"token function\">diHola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1. ¿Tiene fred un atributo diHola? No.</span>\n<span class=\"token comment\">// 2. ¿Tiene fred.__proto__ un atributo diHola? Sí. ¡Invoquémoslo!</span>\n\nfred<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1. ¿Tiene fred un atributo toString? No.</span>\n<span class=\"token comment\">// 2. ¿Tiene fred.__proto__ un atributo toString? No.</span>\n<span class=\"token comment\">// 3. ¿Tiene fred.__proto__.__proto__ un atributo toString? Sí. ¡Invoquémosolo!</span></code></pre></div>\n<p>En la práctica, casi nunca te encontrarías con la necesidad de tocar <code class=\"language-text\">__proto__</code> directamente desde el código a menos que estés depurando algo relacionado con la cadena de prototipo. Si quieres hacer que algo esté disponible en <code class=\"language-text\">fred.__proto__</code>, se supone que lo pongas en <code class=\"language-text\">Persona.prototype</code>. Al menos es como se diseñó originalmente.</p>\n<p>Al principio ni siquiera se suponía que <code class=\"language-text\">__proto__</code> fuera expuesto por los navegadores, porque la cadena de prototipo se consideraba un concepto interno. Pero algunos navegadores añadieron <code class=\"language-text\">__proto__</code> y eventualmente fue estandarizado a regañadientes (pero despreciado en favor de <code class=\"language-text\">Object.getPrototypeOf()</code>).</p>\n<p><strong>Y aun así hallo bastante confuso que un atributo llamado <code class=\"language-text\">prototype</code> no te de el prototipo del valor</strong> (por ejemplo, <code class=\"language-text\">fred.prototype</code> no está definido porque <code class=\"language-text\">fred</code> no es una función). Personalmente, pienso que es la razón principal por la que aún desarrolladores experimentados tienden a no entender correctamente los prototipos de Javascript.</p>\n<hr>\n<p>¿Es largo el artículo, eh? Diría que vamos por el 80%. Aguanta un poco.</p>\n<p>Sabemos que cuando dice <code class=\"language-text\">obj.foo</code>, Javascript lo que en realidad hace es buscar <code class=\"language-text\">foo</code> en <code class=\"language-text\">obj</code>, <code class=\"language-text\">obj.__proto__</code>, <code class=\"language-text\">obj.__proto__.__proto__</code>, y así sucesivamente.</p>\n<p>Con las clases, no estás expuesto directamente a este mecanismo, pero <code class=\"language-text\">extends</code> también funciona sobre el viejo patrón de la cadena de prototipo. Así es como nuestra instancia de clase de React tiene acceso a métodos como <code class=\"language-text\">setState</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Saludo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hola</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Saludo.prototype</span>\n<span class=\"gatsby-highlight-code-line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// React.Component.prototype</span></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object.prototype</span>\n\nc<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Encontrado en c.__proto__ (Saludo.prototype)</span>\n<span class=\"gatsby-highlight-code-line\">c<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Encontrado en c.__proto__.__proto__ (React.Component.prototype)</span></span>c<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Encontrado en c.__proto__.__proto__.__proto__ (Object.prototype)</span></code></pre></div>\n<p>En otras palabras, <strong>cuando usas clases, una cadena <code class=\"language-text\">__proto__</code> de la instancia «refleja» la jerarquía de clases:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// cadena `extends`</span>\nSaludo\n  → React<span class=\"token punctuation\">.</span>Component\n    → <span class=\"token function\">Object</span> <span class=\"token punctuation\">(</span>implícitamente<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// cadena `__proto__`</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  → <span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">.</span>prototype\n    → React<span class=\"token punctuation\">.</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype\n      → <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype</code></pre></div>\n<p><em>2 Chainz.</em></p>\n<hr>\n<p>Dado que la cadena <code class=\"language-text\">__proto__</code> es un reflejo de la jerarquía de clases, podemos comprobar si <code class=\"language-text\">Saludo</code> hereda de <code class=\"language-text\">React.Component</code> comenzando con <code class=\"language-text\">Saludo.prototype</code>, y seguir luego hacia abajo en su cadena <code class=\"language-text\">__proto__</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// cadena `__proto__`</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  → <span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// 🕵️ Comenzamos aquí</span></span><span class=\"gatsby-highlight-code-line\">    → React<span class=\"token punctuation\">.</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// ✅ ¡Lo encontré!</span></span>      → <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype</code></pre></div>\n<p>Convenientemente, <code class=\"language-text\">x instanceof Y</code> hace exactamente este tipo de búsqueda. Sigue la cadena <code class=\"language-text\">x.__proto__</code> buscando <code class=\"language-text\">Y.prototype</code>.</p>\n<p>Normalmente, se usa para determinar si algo es una instancia de una clase.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> saludo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>saludo <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// saludo (🕵️‍ Comenzamos aquí)</span>\n<span class=\"token comment\">//   .__proto__ → Saludo.prototype (✅ ¡Lo encontré!)</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype </span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>saludo <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// saludo (🕵️‍ Comenzamos aquí)</span>\n<span class=\"token comment\">//   .__proto__ → Saludo.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype (✅ ¡Lo encontré!)</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>saludo <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// saludo (🕵️‍ Comenzamos aquí)</span>\n<span class=\"token comment\">//   .__proto__ → Saludo.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype (✅ ¡Lo encontré!)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>saludo <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Banana</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// saludo (🕵️‍ Comenzamos aquí)</span>\n<span class=\"token comment\">//   .__proto__ → Saludo.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype </span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype (🙅‍ ¡No lo encontré!)</span></code></pre></div>\n<p>Pero para determinar si una clase hereda de otra clase también funcionaría:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// saludo</span>\n<span class=\"token comment\">//   .__proto__ → Saludo.prototype (🕵️‍ Comenzamos aquí)</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype (✅ ¡Lo encontré!)</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span></code></pre></div>\n<p>Y esa comprobación permitiría determinar si algo es un componente de clase de React o una función común.</p>\n<hr>\n<p>No obstante, eso no es lo que hace React. 😳</p>\n<p>Un problema con la solución de <code class=\"language-text\">instanceof</code> es que no funciona cuando hay múltiples copias de React en la página y el componente que estamos comprobando hereda del <code class=\"language-text\">React.Component</code> de <em>otra</em> copia de React. Mezclar múltiples copias de React en un proyecto es malo por varias razones, pero históricamente hemos tratado de evitar problemas cuando sea posible. (Sin embargo, con los Hooks, <a href=\"https://github.com/facebook/react/issues/13991\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">puede que necesitemos</a> obligar que no exista duplicación.)</p>\n<p>Otra posible heurística podría ser comprobar la presencia del método render en el prototipo. Sin embargo, en ese momento <a href=\"https://github.com/facebook/react/issues/4599#issuecomment-129714112\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">no estaba claro</a> como evolucionaría la API de componentes. Cada comprobación tiene un costo por lo que no quisiéramos añadir más de uno. Tampoco funcionaría si <code class=\"language-text\">render</code> se definiera como un método de instancia, como en la sintaxis de atributos de clase.</p>\n<p>Por lo que en su lugar, React <a href=\"https://github.com/facebook/react/pull/4663\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">agregó</a> un centinela, y es así cómo sabe si algo es un componente de clase o no.</p>\n<p>Originalmente el centinela estaba en la misma clase base <code class=\"language-text\">React.Component</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Dentro de React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nComponent<span class=\"token punctuation\">.</span>isReactClass <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Podemos comprobar de esta forma</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Saludo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Saludo<span class=\"token punctuation\">.</span>isReactClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Sí</span></code></pre></div>\n<p>Sin embargo, algunas implementaciones de clases que queríamos abordar <a href=\"https://github.com/scala-js/scala-js/issues/1900\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">no</a> copian los atributos estáticos (o no establecen el no estandarizado <code class=\"language-text\">__proto__</code>), por lo que el centinela se perdía.</p>\n<p>Es por ello que React <a href=\"https://github.com/facebook/react/pull/5021\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">movió</a> este centinela a <code class=\"language-text\">React.Component.prototype</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Dentro de React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Podemos comprobar de esta forma</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Saludo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Saludo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Sí</span></code></pre></div>\n<p><strong>Y esto es literalmente todo lo que hay que hacer.</strong></p>\n<p>Puedes estarte preguntando por qué es un objeto y no simplemente un booleano. No importa mucho en la práctica, pero las primeras versiones de Jest (antes de que Jest fuera Bueno™️) tenían habilitada por defecto la simulación automática (<em>automocking</em>). Los objetos simulados resultantes omitían los atributos primitivos, <a href=\"https://github.com/facebook/react/pull/4663#issuecomment-136533373\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">afectando la comprobación</a>. Gracias, Jest.</p>\n<p>La comprobación <code class=\"language-text\">isReactComponent</code> <a href=\"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/react-reconciler/src/ReactFiber.js#L297-L300\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">se usa en React</a> hasta el día de hoy.</p>\n<p>Si no heredas de <code class=\"language-text\">React.Component</code>, React no encontrará <code class=\"language-text\">isReactComponent</code> en el prototipo, y no tratará al componente como una clase.</p>\n<p>Ahora sabes porqué <a href=\"https://stackoverflow.com/a/42680526/458193\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">la respuesta con más votos positivos</a> para el error <code class=\"language-text\">No se puede invocar una clase como una función</code> es añadir <code class=\"language-text\">extends React.Component</code>. Al final <a href=\"https://github.com/facebook/react/pull/11168\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">se añadió una advertencia</a> que se activa cuando existe <code class=\"language-text\">prototype.render</code> pero no <code class=\"language-text\">prototype.isReactComponent</code>.</p>\n<hr>\n<p>Se podría decir que con esta historia les he vendido gato por liebre. <strong>Las solución real es muy simple, pero me fui ampliamente por la tangente para explicar <em>por qué</em> React terminó usando esta solución, y cuáles era las alternativas.</strong></p>\n<p>De acuerdo a mi experiencia, es lo que ocurre frecuentemente con las API de las bibliotecas. Para que una API sea sencilla de usar, a menudo debes considerar la semántica del lenguaje (posiblemente la de varios lenguajes, incluyendo direcciones futuras), desempeño de ejecución, ergonomía con y sin pasos de compilación, el estado del ecosistema y las soluciones de empaquetado, advertencias tempranas y muchas otras cosas. El resultado final podría no ser siempre el más elegante, pero debe ser práctico.</p>\n<p><strong>Si la API final es exitosa, <em>sus usuarios</em> nunca tendrán que pensar en este proceso.</strong> En su lugar se pueden enfocar en crear aplicaciones.</p>\n<p>Pero si además eres curioso… es bueno saber cómo funciona.</p>","timeToRead":17,"frontmatter":{"title":"¿Cómo React distingue una clase de una función?","date":"December 02, 2018","spoiler":"Hablamos de clases, new, instanceof, cadenas de prototipo, y diseño de las API.","cta":null},"fields":{"slug":"/es/how-does-react-tell-a-class-from-a-function/","langKey":"es"}}},"pageContext":{"slug":"/es/how-does-react-tell-a-class-from-a-function/","translations":["es","hu","ja","fr","nl","pt-br","zh-hans","sk","zh-hant"],"translatedLinks":["/why-do-we-write-super-props/"]}}}