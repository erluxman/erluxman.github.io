{"componentChunkName":"component---src-templates-blog-post-js","path":"/pt-br/how-does-setstate-know-what-to-do/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"42ef5ae1-7c74-5416-a017-85e8e38070ee","html":"<p>Quando você chama <code class=\"language-text\">setState</code> dentro de um componente, o que você pensa que acontece?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> clicked<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Thanks</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me!</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Claro, React re-renderiza o componente com o próximo estado <code class=\"language-text\">{ clicked: true }</code> e atualiza o DOM para corresponder o elemento <code class=\"language-text\">&lt;h1&gt;Thanks&lt;/h1&gt;</code>.</p>\n<p>Parece simples. Mas espere, <em>React</em> faz isso? Ou <em>React DOM</em>?</p>\n<p>Atualizando o DOM parece algo de responsabilidade do React DOM. Mas nós estamos chamando <code class=\"language-text\">this.setState()</code> que não é algo oriundo do React DOM. E nossa classe base React.Component é definida dentro do próprio React.</p>\n<p>Então como pode <code class=\"language-text\">setState()</code> dentro do <code class=\"language-text\">React.Component</code> atualizar o DOM?</p>\n<p><strong>Aviso: Assim como a <a href=\"/why-do-react-elements-have-typeof-property/\">maioria</a> das <a href=\"/how-does-react-tell-a-class-from-a-function/\">outras</a> <a href=\"/why-do-we-write-super-props/\">postagens</a> neste blog, você não <em>precisa</em> saber nada disso para ser produtivo com o React. Esse post é para quem gosta de ver o que está por trás da cortina. Completamente opcional!</strong></p>\n<hr>\n<p>Podemos pensar que a classe <code class=\"language-text\">React.Component</code> contém a lógica de atualização do DOM.</p>\n<p>Mas se fosse esse o caso, como pode <code class=\"language-text\">this.setState()</code> funcionar em outros ambientes? Por exemplo, os componentes nos aplicativos React Native também estendem o <code class=\"language-text\">React.Component</code>. Eles chamam de <code class=\"language-text\">this.setState()</code> exatamente como fizemos acima, e ainda o React Native funciona com views nativas do Android e iOS em vez do DOM.</p>\n<p>Você também pode estar familiarizado com o React Test Renderer ou Shallow Renderer. Ambas as estratégias de teste permitem renderizar componentes normais e chamar <code class=\"language-text\">this.setState()</code> dentro deles. Mas nenhum deles trabalha com o DOM.</p>\n<p>Se você usou renderizadores como <a href=\"https://github.com/facebook/react/tree/master/packages/react-art\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Art</a>, você também pode saber que é possivél usar mais de um renderizadores na página. (Por exemplo, Art components trabalham dentro da árvore do React DOM). Isso faz com que um sinalizador global ou variável seja insustentável.</p>\n<p>Então de alguma forma <strong><code class=\"language-text\">React.Component</code> delega a manipulação de atualização de estado para a plataforma específica do código.</strong> Depois nós podemos entender como isso acontece, vamos nos aprofundar em como os pacotes são separados e por quê.</p>\n<hr>\n<p>Há um equívoco comum de que o “motor” do React vive dentro do package do React. E isso não é uma verdade.</p>\n<p>Um fato, todo desde a <a href=\"https://reactjs.org/blog/2015/07/03/react-v0.14-beta-1.html#two-packages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">separação</a> no React 0.14, o pacote do <code class=\"language-text\">react</code> intencionalmente expõem apenas APIs para <em>definir</em> componentes. A maioria das <em>implementações</em> do React vive dentro dos “renderizadores”.</p>\n<p><code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-dom/server</code>, <code class=\"language-text\">react-native</code>, <code class=\"language-text\">react-test-renderer</code>, <code class=\"language-text\">react-art</code> são alguns dos exmplos de renderizadores (e você pode <a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/README.md#practical-examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">construir seu próprio</a>).</p>\n<p>É por isso que o pacote do <code class=\"language-text\">react</code> é útil independente de qual plataforma você segmentar. Todos suas exportações, como os <code class=\"language-text\">React.Component</code>, <code class=\"language-text\">React.createElement</code>, <code class=\"language-text\">React.Children</code> e (eventualmente) <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a>, são independentes de uma plataforma específica. Se você executar React DOM, React DOM Server, ou React Native, seus componente importariam e usariam eles da mesma forma.</p>\n<p>Em contraste, os pacotes de renderizadores expõem APIs específicas da plataforma, como <code class=\"language-text\">ReactDOM.render()</code>, que permitem montar uma hierarquia React em um nó do DOM. Cada renderizador fornece uma API como essa. Idealmente, a maioria dos <em>componentes</em> não precisam importar nada de um renderizador. Isso os mantém mais portáteis.</p>\n<p><strong>O que a maioria das pessoas imaginam é como o “motor” do React está dentro de cada renderizador individual.</strong> Muitos renderizadores incluem uma cópia do mesmo código — nós o chamamos de <a href=\"https://github.com/facebook/react/tree/master/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“reconciliador”</a>. Uma <a href=\"https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html#migrating-to-google-closure-compiler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">etapa de compilação</a> suaviza o código do reconciliador junto com o código do renderizador em um único bundle altamente otimizado para melhor desempenho. (O código copiado geralmente não é bom para o tamanho do bundle, mas a grande maioria dos usuários do React precisa apenas de um renderizador por vez, como <code class=\"language-text\">react-dom</code>.)</p>\n<p>A conclusão aqui é que o pacote <code class=\"language-text\">react</code> permite que você <em>use</em> os recursos do React, mas não sabe nada sobre <em>como</em> eles são implementados. Os pacotes renderizadores (<code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-native</code>, etc) fornecem a implementação dos recursos do React e da lógica específica da plataforma. Parte desse código é compartilhada (“reconciliador”), mas isso é um detalhe individual de implementação dos renderizadores .</p>\n<hr>\n<p>Agora nós sabemos porque <em>ambos</em> pacotes <code class=\"language-text\">react</code> e <code class=\"language-text\">react-dom</code> precisam estar atualizados para novos recursos. Por exemplo, quando React 16.3 adicionou Context API, <code class=\"language-text\">React.createContext()</code> foi exposto no pacote do React.</p>\n<p>Mas na realidade o recurso do contenxt <code class=\"language-text\">React.createContext()</code> não foi <em>implementado</em>. Por exemplo, a implementação precisaria ser diferente entre React DOM e React DOM Server. Então <code class=\"language-text\">createContext()</code> retorna um objeto simples:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// A bit simplified</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">defaultValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    _currentValue<span class=\"token operator\">:</span> defaultValue<span class=\"token punctuation\">,</span>\n    Provider<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    Consumer<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Provider <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.provider'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  context<span class=\"token punctuation\">.</span>Consumer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.context'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _context<span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando você usa <code class=\"language-text\">&lt;MyContext.Provider&gt;</code> ou <code class=\"language-text\">&lt;MyContext.Consumer&gt;</code> no código, o <em>renderizador</em> que decide como lidar com eles. React DOM pode rastrear valores de context de uma maneira, mas o React DOM Server pode fazer isso de maneira diferente.</p>\n<p><strong>Então se você atualizar o <code class=\"language-text\">react</code> para 16.3+, mas não atualizar o <code class=\"language-text\">react-dom</code>, você estaria usando um renderizador que ainda não reconhece os tipos especial Provider e Consumer.</strong> Isso é o porque um aviso do <code class=\"language-text\">react-dom</code> <a href=\"https://stackoverflow.com/a/49677020/458193\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aparecerá dizendo que esses tipos são invalidos</a>.</p>\n<p>O mesmo embargo se aplica para o React Native. Contudo, ao contrário do React DOM, uma nova versão do React não “força” imediatamente uma nova versão do React Native. Eles tem um calendário de lançamentos independentes. O código do renderizador atualizado é <a href=\"https://github.com/facebook/react-native/commits/master/Libraries/Renderer/oss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sincronizado separadamente</a> no repositório do React Native em algumas semanas posterior. É por isso que os recursos ficam disponíveis no React Native em um cronograma diferente do que no React DOM.</p>\n<hr>\n<p>Ok, então agora nós sabemos que o pacote do <code class=\"language-text\">react</code> não contém nada interessante, e que a implementação vive dentro dos renderizadores como <code class=\"language-text\">react-dom</code>, <code class=\"language-text\">react-native</code>, e assim por diante. Mas isso não responde nossa questão. Como o <code class=\"language-text\">setState()</code> dentro do <code class=\"language-text\">React.Component</code> “conversa” como renderizador certo?</p>\n<p><strong>A resposta é que cada renderizador seta um campo especial quando a classe foi criada.</strong> Esse campo é chamado de <code class=\"language-text\">updater</code>. Isso não é algo que <em>você</em> definiria — em vez disso, isso é algo que o React DOM, React DOM Server ou React Native é setado depois de ter criado uma instância de uma classe:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Inside React DOM</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMUpdater<span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// Inside React DOM Server</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactDOMServerUpdater<span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// Inside React Native</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> ReactNativeUpdater<span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Olhando para a <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactBaseClasses.js#L58-L67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">implementação do <code class=\"language-text\">setState</code> dentro do <code class=\"language-text\">React.Component</code></a>, todo trabalho é delego para o renderizador que criou essa instância do componente:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// A bit simplified</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">partialState<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use the `updater` field to talk back to the renderer!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updater<span class=\"token punctuation\">.</span><span class=\"token function\">enqueueSetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> partialState<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React DOM Server <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRenderer.js#L442-L448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pode querer ignorar</a> a atualização do state e avisar você, enquanto React DOM e React Native deixariam suas cópias do reconciliador <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberClassComponent.js#L190-L207\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lidar com isso</a>.</p>\n<p>E assim é como <code class=\"language-text\">this.setState()</code> pode atualizar o DOM mesmo que esteja definido no pacote React. Ele lê <code class=\"language-text\">this.updater</code>, que foi definido pelo React DOM, e permite que o React DOM agende e cuide da atualização</p>\n<hr>\n<p>Nós agora sabemos sobre classes, mas o que acontecer com Hooks?</p>\n<p>Quando as pessoas dão suas primeiras olhadas para a <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">proposta da API do Hooks</a>, elas muitas vezes se perguntam: como o <code class=\"language-text\">useState</code> “ sabe o que fazer “? A suposição é de que é algo mais “mágico” do que uma classe <code class=\"language-text\">React.Component</code> com <code class=\"language-text\">this.setState()</code>.</p>\n<p>Mas nós vimos hoje, a classe que implementa o <code class=\"language-text\">setState()</code> pode parecer uma ilusão. Ela não faz nada, exceto encaminhar a chamada para o renderizador atual. E <code class=\"language-text\">useState</code> Hook faz <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react/src/ReactHooks.js#L55-L56\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">exatamente a mesma coisa</a>.</p>\n<p><strong>Em vez de um campo updater, os Hooks usam um objeto “dispatcher”.</strong> Quando você chama <code class=\"language-text\">React.useState()</code>, <code class=\"language-text\">React.useEffect()</code>, ou outro Hook interno, essas chamadas são encaminhadas para o dispatcher atual.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// In React (simplified a bit)</span>\n<span class=\"token keyword\">const</span> React <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Real property is hidden a bit deeper, see if you can find it!</span>\n  __currentDispatcher<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>E renderizadores individuais setão o dispatcher antes de renderizar seu componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// In React DOM</span>\n<span class=\"token keyword\">const</span> prevDispatcher <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>__currentDispatcher<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">React<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> ReactDOMDispatcher<span class=\"token punctuation\">;</span></span><span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> <span class=\"token function\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Restore it back</span></span><span class=\"gatsby-highlight-code-line\">  React<span class=\"token punctuation\">.</span>__currentDispatcher <span class=\"token operator\">=</span> prevDispatcher<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Por exemplo, a implementação do React DOM Server está <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L340-L354\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aqui</a>, e a implementação do reconciliador compartilhada pelo React DOM e React Native está <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-reconciler/src/ReactFiberHooks.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aqui</a>.</p>\n<p>É por isso que um renderizador como <code class=\"language-text\">react-dom</code> precisa acessar o mesmo pacote <code class=\"language-text\">react</code> que você chama de Hooks. Caso contrário, seu componente não “verá” o expedidor! Isso pode não funcionar quando você tem <a href=\"https://github.com/facebook/react/issues/13991\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">várias cópias do React</a> na mesma árvore de componentes. No entanto, isso sempre levou a bugs obscuros, fazendo com que os Hooks o obrigassem a resolver a duplicação de pacotes antes que isso lhe custasse caro.</p>\n<p>Embora não encorajamos isso, você pode substituir tecnicamente o dispatcher para casos avançados de uso de ferramentas. (Eu menti sobre o nome <code class=\"language-text\">__currentDispatcher</code> mas você pode encontrar o nome real no repositório React). Por exemplo, o React DevTools <a href=\"https://github.com/facebook/react/blob/ce43a8cd07c355647922480977b46713bd51883e/packages/react-debug-tools/src/ReactDebugHooks.js#L203-L214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">usará um dispatcher especial</a> para introspecção da árvore de Hooks e capturando rastreamentos de pilha JavaScript. <em>Não repita isso em casa.</em></p>\n<p>Isso também significa que os Hooks não estão inerentemente ligados ao React. Se, no futuro, mais bibliotecas quiserem reutilizar o Hooks, em teoria, o despachante pode passar para um pacote separado e ser exposto como uma API de primeira classe com um nome menos “assustador”. Na prática, preferimos evitar a abstração prematura até que seja necessário.</p>\n<p>Tanto o campo <code class=\"language-text\">updater</code> quanto o objeto <code class=\"language-text\">__currentDispatcher</code> são formas de um princípio genérico de programação chamado <em>injeção de dependência</em>. Em ambos os casos, os renderizadores “injetam” implementações de recursos como ‘setState’ no pacote genérico React para manter seus componentes mais declarativos.</p>\n<p>Você não precisa pensar em como isso funciona quando você for programar com React. Gostaríamos que os usuários do React passassem mais tempo pensando no código do aplicativo do que conceitos abstratos, como a injeção de dependência. Mas se você já se perguntou como <code class=\"language-text\">this.setState()</code> ou <code class=\"language-text\">useState()</code> sabe o que fazer, espero que isso ajude.</p>\n<hr>","timeToRead":10,"frontmatter":{"title":"Como o setState sabe o que fazer?","date":"December 09, 2018","spoiler":"Injeção de dependencia é legal se você não tem que pensar sobre isso.","cta":null},"fields":{"slug":"/pt-br/how-does-setstate-know-what-to-do/","langKey":"pt-br"}}},"pageContext":{"slug":"/pt-br/how-does-setstate-know-what-to-do/","translations":["fr","es","ja","ko","pt-br","tr","zh-hans"],"translatedLinks":["/why-do-react-elements-have-typeof-property/","/how-does-react-tell-a-class-from-a-function/","/why-do-we-write-super-props/"]}}}