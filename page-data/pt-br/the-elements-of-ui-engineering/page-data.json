{"componentChunkName":"component---src-templates-blog-post-js","path":"/pt-br/the-elements-of-ui-engineering/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"9f13241b-31e1-5bdf-9d9f-46483c7441ef","html":"<p>No <a href=\"/things-i-dont-know-as-of-2018/\">artigo anterior</a>, falei sobre admitir nossas brechas de conhecimento. Você pode chegar a conclusão que sugeri nos acomodarmos com a mediocridade. Eu não sugeri isso! Isso é uma área muito vasta.</p>\n<p>Acredito fortemente que você pode “começar em qualquer lugar” e não necessite de aprender tecnologias em uma ordem específica. Mas também dou muito valor em ganhar perícia em algo. Pessoalmente tenho me interessado mais na criação de interfaces de usuário.</p>\n<p><strong>Tenho refletido sobre o que <em>sei</em> sobre e que considero valioso.</strong> Claro, estou familiarizado com algumas tecnologias (por exemplo JavaScript e React). Mas as lições mais importantes da experiência são elusivas. Nunca tentei colocá-las em palavras. Essa é minha primeira tentativa de listar e descrever algumas delas.</p>\n<hr>\n<p>Existem diversas “trilhas de aprendizagem” sobre tecnologias e bibliotecas. Qual biblioteca estará em destaque em 2019? E em 2020? Devo aprender Vue ou React? Angular? E sobre Redux ou Rx? Devo aprender Apollo? REST ou GraphQL? É fácil se perder. E se o autor estiver errado?</p>\n<p><strong>Meus maiores avanços de aprendizado não foram sobre uma tecnologia específica.</strong> Ao invés disso, eu aprendia bem mais quando tinha dificuldades em resolver algum problema específico de UI. Às vezes, mais tarde eu descobria bibliotecas ou padrões que me ajudavam. Em outros casos, eu criava minhas próprias soluções (boas e ruins).</p>\n<p>É essa combinação de entender os <em>problemas</em>, experimentar <em>soluções</em> e aplicar diferentes <em>estratégias</em> que me levaram às experiências de aprendizado mais recompensadoras. <strong>Esse artigo foca apenas nos problemas.</strong></p>\n<hr>\n<p>Se você já trabalhou com interfaces de usuário, provavelmente já teve de lidar com alguns desses desafios - seja diretamente ou usando uma biblioteca. Em ambos os casos, incentivo você a criar uma pequena aplicação <em>sem</em> bibliotecas e brincar reproduzindo e resolvendo esses problemas. Não há uma solução correta para nenhum deles. O aprendizado vem de explorar o escopo do problema e tentar diferentes possíveis soluções.</p>\n<hr>\n<ul>\n<li><strong>Consistência.</strong> Você clica em um botão “Curtir” e o texto atualiza para: “Você e mais 3 amigos curtiram esse post.” Você clica nele novamente e o texto retorna ao anterior. Parece fácil. Mas talvez um label assim está presente em diversos locais na tela. Talvez tenha uma outra indicação visual (como o fundo do botão) que deve ser alterado. A lista de “curtidores” que foi anteriormente obtida do servidor e está visível quando se passa por cima agora deve incluir seu nome. Se você navegar para uma outra página e voltar, o post não deve “esquecer” que foi curtido. Até mesmo a consistência local <em>por si só</em> cria uma lista de desafios. Mas outros usuários podem também modificar os dados que estamos mostrando (por exemplo ao curtir um post que estamos vendo). Como mantemos os mesmos dados sincronizados em diferentes partes da tela? Como e quando fazemos os dados locais serem consistentes com o servidor e vice-versa?</li>\n<li><strong>Responsividade.</strong> As pessoas podem tolerar a falta de feedback visual de suas ações apenas por um tempo limitado. Para ações <em>contínuas</em> como gestos e rolagem da págnia, esse limite é bem baixo. (Até mesmo um pular um frame de 16ms faz parecer “desajeitado”.) Para ações <em>discretas</em> como cliques, há pesquisas que dizem que os usuários acham que qualquer delay &#x3C; 100ms é igualmente rápido. Mas há alguns desafios contra-intuitivos. Indicadores que fazem com que o layout “pule” ou que passe por diversos “estágios” de carregamento podem fazer com que a ação <em>pareça mais longa</em> do que foi. Da mesma forma, lidar uma interação em 20ms com o custo de descartar um frame de animação pode <em>parecer mais lento</em> que lidar com a mesma interação em 30ms sem descartas frames. Cérebros não são benchmarks. Como mantemos nossas aplicações responsivas para diferentes tipos de entradas? </li>\n<li><strong>Latência.</strong> Ambos, processamento e acesso à rede gastam tempo. <em>Às vezes</em> podemos ignorar o custo computacional se não atrapalhar a responsividade em nossos dispositivos alvo (não se esqueça de testar sua aplicação em um dispositivo de baixa performance). Mas lidar com a latência da rede é inevitável - pode levar segundos! Nossa aplicação não pode apenas parar esperando os dados ou código serem carregados. Isso quer dizer que qualquer ação que depende de novos dados, códigos ou recursos é potencialmente assíncrona e precisa de lidar com o “carregamento”. Mas isso pode acontecer em quase todas as telas. Como lidamos de forma elegante com a latência sem mostrar uma “cascata” de spinners ou “buracos” vazios? Como evitamos um layout “que pula”? E como trocamos as dependências assíncronas sem ter de “reconectar” nosso código toda vez?</li>\n<li><strong>Navegação.</strong> Esperamos que a UI se mantenha estável enquanto interagimos com ela. As coisas não devem desaparecer de baixo de nosso nariz. A navegação, seja iniciada dentro da aplicação (por exemplo clicando em um link) ou por um evento externo (por exemplo clicando no botão “voltar”), deve também respeitar esse princípio. Por exemplo, ao alternar entre as tabs <code class=\"language-text\">/profile/likes</code> e <code class=\"language-text\">/profile/follows</code> em uma página de perfil não deve limpar um campo de pesquisa fora da tab. Navegar para <em>outra</em> tela é como entrar em uma sala. As pessoas esperam voltar mais tarde e encontrar as coisas da forma que deixaram (com, talvez, alguns itens novos). Se você está no meio de um feed, clica em um perfil e depois volta, é frustrante perder sua posição no feed - ou esperar para que ele carregue novamente. Como podemos estruturar nossa aplicação para lidar com navegação arbitrária sem perder o contexto importante?</li>\n<li><strong>Obsolescência.</strong> Podemos fazer com que a navegação do botão “voltar” seja imediata se criarmos um cache local. Nesse cache, podemos “guardar” alguns dados para acesso rápido mesmo que pudéssemos teoricamente buscá-lo novamente. Mas utilizar cache trás seus próprios problemas. Cache pode ficar obsoleta. Se eu mudo um avatar, ele deve ser atualizado na cache também. Se eu criar um novo post, ele precisa de aparecer na cache imediatamente ou a cache precisará de ser invalidada. Isso pode se tornar difícil e fácil de dar erros. E se o post falhar? Quanto tempo a cache fica na memória? Quando buscamos novamente o feed, nós “emendamos” o novo feed com o que está em cache ou jogamos o da cache fora? Como a paginação ou ordenação é representada na cache?</li>\n<li><strong>Entropia.</strong> A segunda lei da termodinâmica diz algo como “com o tempo, as coisas tendem a se tornar desorganizadas” (bem, não exatamente). Isso se aplica a interfaces de usuário também. Não podemos prever as interações exatas do usuário nem sua ordem. Em qualquer momento, nossa aplicação pode estar em um de milhares de números de estados possíveis. Nós fazemos o melhor para que o resultado seja previsível e limitado ao nosso design. Não queremos olhar para um screenshot de um erro e pensar “como <em>isso</em> aconteceu”. Para cada <em>N</em> possíveis estados, existem <em>N×(N–1)</em> possíveis transições entre eles. Por exemplo, se um botão pode estar em um de 5 estados diferentes (normal, ativo, focado, perigo, desabilitado), o código que atualiza o botão deve estar correto para 5×4=20 possíveis transições - ou proibir algumas delas. Como domamos a explosão combinatória de possíveis estados e fazemos nosso resultado visual previsível?</li>\n<li><strong>Prioridade.</strong> Algumas coisas são mais importantes que outras. Um modal precisa de aparecer fisicamente “acima” do botão que o invocou e “se livrar” dos limites do seu container. Uma nova tarefa que foi agendada (por exemplo responder a um clique) pode ser mais importante que uma tarefa de longa duração que já se iniciou (por exemplo renderizar os próximos posts abaixo do limite da tela). Enquanto nossa aplicação cresce, partes do código escrita por pessoas e times diferentes podem competir por recursos limitados como processador, rede, estado da tela e o tamanho máximo do bundle. Às vezes podemos classificar os competidores em uma escala de “importância”, como a propriedade <code class=\"language-text\">z-index</code> do CSS. <a href=\"https://blogs.msdn.microsoft.com/oldnewthing/20050607-00/?p=35413\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mas dificilmente termina bem.</a> Todo desenvolvedor tem a tendência de pensar que o <em>seu</em> código é importante. E se tudo é importante, então nada de fato é! Como fazemos que widgets independentes <em>cooperem</em> ao invés de brigarem por recursos?</li>\n<li><strong>Acessibilidade.</strong> Websites inacessíveis <em>não</em> são um problema de nicho. Por exemplo, no Reino Unido a incapacidade afeta 1 em cada 5 pessoas. <a href=\"https://www.abrightclearweb.com/web-accessibility-in-the-uk/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">(Aqui temos infográfico interessante.)</a> Eu já senti isso pessoalmente também. Apesar de ter apenas 26 anos, eu tenho dificuldades em ler websites com fontes muito finas e com baixo contraste. Eu tento usar o trackpad com menos frequência e temo o dia que terei de navegar por sites mal implementados para teclados. Precisamos fazer com que nossas aplicações não sejam horríveis para pessoas com dificuldades - e a boa notícia é que há recursos de fácil acesso. Começa com estudos e com ferramentas. Mas também precisamos fazer com que seja fácil para os desenvolvedores do produto fazerem a coisa certa. O que podemos fazer para que a acessibilidade seja algo <em>padrão</em> ao invés de algo para ser pensado depois?</li>\n<li><strong>Internacionalização.</strong> Nossa aplicação precisa funcionar no mundo todo. As pessoas não apenas falam idiomas diferentes, mas também precisamos dar suporte a layouts “da direita-para-esquerda” (<code class=\"language-text\">RTL: right-to-left</code>) com o menor de esforço dos engenheiros do produto. Como podemos dar suporte a idiomas diferentes sem sacrificar a latência e a responsividade?</li>\n<li><strong>Entrega.</strong> Precisamos que o código de nossa aplicação chegue ao computador do usuário. Qual tipo de transporte e formato utilizamos? Isso pode parecer simples, mas há diversas compensações. Por exemplo, aplicações nativas tendem a carregar todo seu código antecipadamente ao custo de um tamanho enorme de aplicação. Aplicações web tendem a ter um carregamento inicial menor ao custo de maior latência durante o uso. Como escolhemos em qual ponto iremos introduzir a latência? Como otimizamos nossa entrega baseada nos padrões de uso? Qual tipo de dado precisamos para uma solução otimizada?</li>\n<li><strong>Resiliência.</strong> Você pode gostar de insetos (<code class=\"language-text\">bugs</code>) se você for um entomologista, mas provavelmente não irá gostar de vê-los em seus programas. Contudo, alguns erros irão inevitavelmente chegar em produção. O que acontece então? Alguns erros causam um comportamento errado, mas bem definido. Por exemplo, talvez seu código exiba um resultado visual incorreto em alguma condição. Mas e se o código de renderização “quebrar”? Então não podemos continuar de forma significativa porque o resultado visual seria inconsistente. Uma falha ao renderizar um único post não deveria “estragar” um feed inteiro ou deixá-lo em um estado “semi-quebrado” que causaria mais erros. Como escrevemos código de forma que conseguimos isolar a renderização e a busca de falhas e que mantenha o restante da aplicação em execução? O que significa tolerância a falhas para interfaces de usuário?</li>\n<li><strong>Abstração.</strong> Em uma aplicação pequena, podemos escrever código específico para lidar com diversos casos especiais dos problemas acima. Mas aplicações tendem a crescer. Queremos ser capazes de <a href=\"/optimized-for-change/\">reutilizar, dividir e juntar</a> partes do nosso código e trabalhar nele coletivamente. Queremos definir limites claros entre as peças familiares para diferentes pessoas e evitar fazer com que a lógica que muda com frequência seja muito rígida. Como criamos abstrações que escondem detalhes de implementação de uma parte específica da UI? Como evitamos reintroduzir os mesmos problemas que acabamos de resolver quando nossa aplicação crescer? </li>\n</ul>\n<hr>\n<p>Claro, há diversos problemas que eu não mencionei. Essa lista de forma alguma está completa! Por exemplo, Não falei sobre a colaboração entre o design e a engenharia, ou depuração e testes. Talvez de uma próxima vez.</p>\n<p>É tentador ler sobre esses problemas com uma biblioteca de UI ou uma biblioteca de busca de dados em mente como solução. Mas eu o incentivo a fingir que essas bibliotecas não existem e ler novamente dessa perspectiva. Como <em>você</em> iria lidar com a solução desses problemas? Teste elas em uma aplicação pequena (Eu amaria ver seus experimentos no GitHub - sinta-se à vontade para enviar um tweet para mim em resposta.)</p>\n<p>O interessante sobre esses problemas é que a maioria deles aparecem em qualquer escala. Você pode os encontrar em pequenos widgets como um autocomplete ou um tooltip e também em grandes aplicações como o Twitter e o Facebook.</p>\n<p><strong>Pense em um elemento incomum de UI de uma aplicação que você gosta de utilizar e o analise com essa lista de problemas. Você consegue descrever alguns dos <em>tradeoffs</em> escolhidos pelos desenvolvedores? Tente recriar um comportamento semelhante do zero!</strong></p>\n<p>Aprendi muito sobre engenharia de UI experimentando esses problemas em pequenas aplicações sem utilizar bibliotecas. Recomendo o mesmo para todos que queiram ganhar uma apreciação aprofundada pelos <em>tradeoffs</em> da engenharia de UI. </p>","timeToRead":8,"frontmatter":{"title":"Os Elementos da Engenharia de UI","date":"December 30, 2018","spoiler":"O que torna a engenharia de UI difícil?","cta":null},"fields":{"slug":"/pt-br/the-elements-of-ui-engineering/","langKey":"pt-br"}}},"pageContext":{"slug":"/pt-br/the-elements-of-ui-engineering/","translations":["es","fr","ja","ko","pl","pt-br","zh-hans"],"translatedLinks":["/things-i-dont-know-as-of-2018/","/optimized-for-change/"]}}}