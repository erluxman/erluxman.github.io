{"componentChunkName":"component---src-templates-blog-post-js","path":"/pt-br/why-do-react-elements-have-typeof-property/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"a8dac008-7e79-564d-9d35-753c54410ea5","html":"<p>Podemos achar que estamos escrevendo JSX:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>marquee</span> <span class=\"token attr-name\">bgcolor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#ffa7c4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">hi</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>marquee</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Mas na verdade, estamos chamando uma fun√ß√£o:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/* type */</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* props */</span> <span class=\"token punctuation\">{</span> bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* children */</span> <span class=\"token string\">'hi'</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>E essa fun√ß√£o retorna um objeto. N√≥s chamamos esse objeto de <em>elemento</em> React. Ele diz ao React o que renderizar a seguir. Seus componentes retornam uma √°rvore deles.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// üßê O que √© isso</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se voc√™ j√° utilizou o React, deve estar familiarizado com as propriedades <code class=\"language-text\">type</code>, <code class=\"language-text\">props</code>, <code class=\"language-text\">key</code>, e <code class=\"language-text\">ref</code>. <strong>Mas o que √© <code class=\"language-text\">$$typeof</code>? E por que ele tem um <code class=\"language-text\">Symbol()</code> como valor?</strong></p>\n<p>Essa √© mais uma daquelas coisas que voc√™ <strong>n√£o</strong> precisa saber para usar o React, mas que o ir√° fazer se sentir bem ao aprender. Tamb√©m h√° algumas dicas sobre seguran√ßa nesse artigo que voc√™ possa querer saber. Talvez um dia voc√™ ir√° criar sua pr√≥pria biblioteca de UI e tudo isso ir√° ser √∫til. Eu espero sinceramente que sim.</p>\n<hr>\n<p>Antes das bibliotecas de UI se tornarem comuns e adicionarem prote√ß√£o b√°sica, era comum uma aplica√ß√£o construir HTML e inserir ele no DOM:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> messageEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessageEl<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;p>'</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/p>'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Isso funciona bem, exceto quando seu <code class=\"language-text\">message.text</code> √© algo como <code class=\"language-text\">&#39;&lt;img src onerror=&quot;roubarSuaSenha()&quot;&gt;&#39;</code>. <strong>Voc√™ n√£o quer que coisas escritas por estranhos apare√ßam literalmente no HTML renderizado pela sua aplica√ß√£o.</strong></p>\n<p>(Curiosidade: se voc√™ apenas fizer renderiza√ß√£o no cliente, uma tag <code class=\"language-text\">&lt;script&gt;</code> n√£o iria permitir que o c√≥digo JavaScript fosse executado. Mas <a href=\"https://gomakethings.com/preventing-cross-site-scripting-attacks-when-using-innerhtml-in-vanilla-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">n√£o deixe que isso</a> te leve a ter uma falsa sensa√ß√£o de seguran√ßa.)</p>\n<p>Para proteger de tais ataques, voc√™ pode usar APIs seguras como <code class=\"language-text\">document.createTextNode()</code> ou <code class=\"language-text\">textContent</code> que apenas trabalham com texto. Voc√™ tamb√©m pode preventivamente substituir caracteres potencialmente perigosos como <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">&gt;</code> e outros em qualquer texto que seja fornecido pelos usu√°rios.</p>\n<p>Ainda assim, o custo de um erro √© grande e √© complicado lembrarmos disso toda vez que precisamos trabalhar com um texto escrito pelo usu√°rio ao renderizar algo. <strong>Esse √© o motivo em que bibliotecas modernas como o React fazem essa sanitiza√ß√£o em textos por padr√£o:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Se <code class=\"language-text\">message.text</code> √© um texto malicioso com uma <code class=\"language-text\">&lt;img&gt;</code> ou alguma outra tag, ele n√£o ir√° se tornar uma tag <code class=\"language-text\">&lt;img&gt;</code> real. O React ir√° sanitizar o conte√∫do e <em>depois</em> inserir ele no DOM. Ent√£o ao inv√©s de ver a tag <code class=\"language-text\">&lt;img&gt;</code> voc√™ ver√° apenas a sua <em>markup</em>.</p>\n<p>Para renderizar HTML puro dentro de um elemento React, voc√™ deve escrever <code class=\"language-text\">dangerouslySetInnerHTML={{ __html: message.text }}</code>. <strong>O fato disso ser complicado de se digitar √© uma <em>feature</em>.</strong> √â algo feito para ser facilmente vis√≠vel em revis√µes de c√≥digo e em auditorias em base de c√≥digos.</p>\n<hr>\n<p><strong>Isso quer dizer que o React √© totalmente seguro contra ataques de inje√ß√£o? N√£o.</strong> O HTML e o DOM podem ser alvos de <a href=\"https://github.com/facebook/react/issues/3473#issuecomment-90594748\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">diversos tipos de ataques</a> que s√£o dif√≠ceis demais ou muito lentos para que o React ou outras bibliotecas de UI possam mitigar contra. A maioria dos outros tipos de ataque envolvem atributos. Por exemplo, se voc√™ renderizar <code class=\"language-text\">&lt;a href={user.website}&gt;</code>, cuidado com o website do usu√°rio que pode ser <code class=\"language-text\">&#39;javascript: roubarSuaSenha()&#39;</code>. Fazer spread (<em>spread operator</em>) de dados inseridos pelo usu√°rio como <code class=\"language-text\">&lt;div {...userData}&gt;</code> √© algo raro mas tamb√©m perigoso.</p>\n<p>O React <a href=\"https://github.com/facebook/react/issues/10506\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pode</a> providenciar mais prote√ß√£o ao passar do tempo, mas na maioria das vezes isso √© consequ√™ncia de problemas do servidor que <a href=\"https://github.com/facebook/react/issues/3473#issuecomment-91327040\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">deveriam</a> ser corrigidos l√° de toda forma.</p>\n<p>Ainda assim, sanitizar conte√∫do de texto √© uma primeira linha de defesa razo√°vel que pode capturar muitos ataques potenciais. N√£o √© legal saber que um c√≥digo assim √© seguro?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Sanitizado automaticamente</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>Bom, isso n√£o √© sempre verdade tamb√©m.</strong> E √© a√≠ onde o <code class=\"language-text\">$$typeof</code> entra.</p>\n<hr>\n<p>Elementos React s√£o objetos simples:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Enquanto voc√™ normalmente cria eles com <code class=\"language-text\">React.createElement()</code>, isso n√£o √© obrigat√≥rio. H√° casos de uso v√°lido para que o React consiga trabalhar com objetos de elementos escritos como eu fiz acima. Claro, voc√™ provavelmente n√£o <em>quer</em> escrever eles assim - mas isso <a href=\"https://github.com/facebook/react/pull/3583#issuecomment-90296667\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pode ser</a> √∫til para um compilador de otimiza√ß√£o, passando elementos UI entre <em>workers</em>, ou para desacoplar JSX do React.</p>\n<p>Contudo, <strong>se seu servidor tem uma falha que deixa o usu√°rio armazenar um objeto JSON arbitr√°rio</strong> quando o c√≥digo no cliente espera por uma string, isso pode se tornar um problema:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Servidor pode ter uma falha que deixa o usu√°rio armazenar um JSON</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> expectedTextButGotJSON <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  type<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    dangerouslySetInnerHTML<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      __html<span class=\"token operator\">:</span> <span class=\"token string\">'/* coloque o c√≥digo malicioso aqui */'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ...</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> text<span class=\"token operator\">:</span> expectedTextButGotJSON <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Perigoso na React 0.13</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Nesse caso, o React 0.13 seria <a href=\"http://danlec.com/blog/xss-via-a-spoofed-react-element\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vulner√°vel</a> a um ataque XSS. Para explicar melhor, novamente, <strong>esse ataque depende de uma falha existente no servidor</strong>. Ainda assim, o React poderia fazer um trabalho melhor de proteger as pessoas contra isso. E a partir do React 0.14, ele faz.</p>\n<p>A corre√ß√£o no React 0.14 foi <a href=\"https://github.com/facebook/react/pull/4832\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rotular todo elemento React com um Symbol</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isso funciona porque n√£o h√° como colocar um <code class=\"language-text\">Symbol</code> em um JSON. **Ent√£o mesmo que o servidor tenha uma falha de seguran√ßa e retorne um JSON ao inv√©s de um texto, esse JSON n√£o teria um <code class=\"language-text\">Symbol.for(&#39;react.element&#39;)</code>. **O React ir√° checar <code class=\"language-text\">element.$$typeof</code>, e ir√° recusar a processar o elemento caso n√£o possua a proprieade ou ela seja inv√°lida.</p>\n<p>O que torna o uso do <code class=\"language-text\">Symbol.for()</code> t√£o legal especificamente √© que <strong>Symbols s√£o globais entre ambientes como <em>iframes</em> e <em>workers</em>.</strong> Portanto essa corre√ß√£o n√£o impede a passagem de elementos confi√°veis entre diferentes partes da aplica√ß√£o, mesmo em condi√ß√µes mais ex√≥ticas. Similarmente, mesmo que tenha m√∫ltiplas c√≥pias do React na p√°gina, elas podem ainda ‚Äúconcordar‚Äù em um valor v√°lido da propriedade <code class=\"language-text\">$$typeof</code>.</p>\n<hr>\n<p>E os navegadores que <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">n√£o t√™m suporte</a> para Symbols?</p>\n<p>Infelizmente, eles n√£o ganham essa prote√ß√£o extra. O React ainda assim inclui a propriedade <code class=\"language-text\">$$typeof</code> no elemento para manter a consist√™ncia, mas √© <a href=\"https://github.com/facebook/react/blob/8482cbe22d1a421b73db602e1f470c632b09f693/packages/shared/ReactSymbols.js#L14-L16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">atribu√≠da um n√∫mero a ela</a> ‚Äî <code class=\"language-text\">0xeac7</code>.</p>\n<p>Por qu√™ esse n√∫mero especificamente? <code class=\"language-text\">0xeac7</code> parece um pouco com ‚ÄúReact‚Äù.</p>","timeToRead":6,"frontmatter":{"title":"Por qu√™ os Elementos React possuem uma propriedade $$typeof","date":"December 03, 2018","spoiler":"√â algo relacionado a seguran√ßa.","cta":null},"fields":{"slug":"/pt-br/why-do-react-elements-have-typeof-property/","langKey":"pt-br"}}},"pageContext":{"slug":"/pt-br/why-do-react-elements-have-typeof-property/","translations":["es","ja","fr","pt-br","zh-hans"],"translatedLinks":[]}}}