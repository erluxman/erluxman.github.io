{"componentChunkName":"component---src-templates-blog-post-js","path":"/pt-br/why-isnt-x-a-hook/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"9fe0c728-7f06-5517-8cb2-29cff3c74afe","html":"<p>Desde que a primeira versão alfa dos <a href=\"https://reactjs.org/hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> foi liberada, uma dúvida sempre volta a aparecer em discussões: “Por quê <em>&#x3C;tal API></em> não é um Hook?”</p>\n<p>Para relembrarmos, aqui estão algumas coisas que os Hooks <em>são</em>:</p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useState()</code></a> permite declarar uma variável de estado (<code class=\"language-text\">state</code>).</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useEffect()</code></a> permite declarar um efeito secundário.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useContext()</code></a> permite acessar informações de um contexto (<code class=\"language-text\">context</code>).</li>\n</ul>\n<p>Mas existem outras APIs, como <code class=\"language-text\">React.memo()</code> e <code class=\"language-text\">&lt;Context.Provider&gt;</code>, que <em>não</em> são Hooks. Versões comumente propostas dessas APIs com Hooks seriam <em>não composicionais</em> e <em>antimodulares</em>. Esse artigo o irá ajudar a entender o porquê. </p>\n<p><strong>Nota: Esse artigo não é uma imersão para aqueles que estão interessados em analisar APIs. Você não precisa pensar em nada disso para ser produtivo com o React!</strong></p>\n<hr>\n<p>Há duas importantes propriedades que queremos preservar nas APIs do React:</p>\n<ol>\n<li><strong>Composição:</strong> Os <a href=\"https://reactjs.org/docs/hooks-custom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks customizados</a> são a razão principal por estarmos entusiasmados com a API dos Hooks. Esperamos que as pessoas criem seus própios Hooks frequentemente, e precisamos ter certeza que os Hooks escritos por pessoas diferentes <a href=\"/why-do-hooks-rely-on-call-order/#flaw-4-the-diamond-problem\">não entrem em conflito</a>. (Não estamos todos mimados na forma em que os componentes conseguem se compor de forma limpa e sem quebrar um ao outro?)</li>\n<li><strong>Depuração:</strong> Queremos que os erros sejam <a href=\"/the-bug-o-notation/\">fáceis de se encontrar</a> a medida que a aplicação cresce. Uma das melhores funcionalidades do React é que se vemos algo renderizado da maneira incorreta, podemos percorrer a árvore acima até encontrar qual prop ou estado de componente que causou o erro.</li>\n</ol>\n<p>Essas duas restrições juntas podem nos dizer o que pode ou <em>não pode</em> ser um Hook. Vamos ver alguns exemplos.</p>\n<hr>\n<h2 id=\"um-hook-real-usestate\"><a href=\"#um-hook-real-usestate\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Um Hook Real: <code class=\"language-text\">useState()</code></h2>\n<h3 id=\"composição\"><a href=\"#composi%C3%A7%C3%A3o\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composição</h3>\n<p>Múltiplos Hooks customizados utilizando <code class=\"language-text\">useState()</code> não entram em conflito:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// O que acontece aqui, fica aqui.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// O que acontece aqui, fica aqui.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Adicionar uma nova chamada a <code class=\"language-text\">useState()</code> é sempre seguro. Não precisamos saber nada sobre os outros Hooks usados por um componente para declarar uma nova variável de estado (<code class=\"language-text\">state</code>). Também não podemos quebrar outras variáveis de estado (<code class=\"language-text\">state</code>) ao atualizar uma delas.</p>\n<p><strong>Veredito:</strong> ✅ <code class=\"language-text\">useState()</code> não deixa os Hooks customizados frágeis.</p>\n<h3 id=\"depuração\"><a href=\"#depura%C3%A7%C3%A3o\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Depuração</h3>\n<p>Os Hooks são úteis porque podemos passar valores <em>entre</em> eles:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isMobile</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> isMobile <span class=\"token operator\">=</span> width <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MOBILE_VIEWPORT</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span>isMobile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mas e se cometermos um erro? Como funciona a depuração?</p>\n<p>Vamos dizer que a classe CSS que obtemos de <code class=\"language-text\">theme.comment</code> está errada. Como depuramos isso? Podemos colocar um <code class=\"language-text\">breakpoint</code> ou alguns <em>logs</em> no corpo de nosso componente.</p>\n<p>Talvez iríamos notar que <code class=\"language-text\">theme</code> está errada, mas <code class=\"language-text\">width</code> e <code class=\"language-text\">isMobile</code> estão corretas. Isso nos indicaria que o problema está dentro de <code class=\"language-text\">useTheme()</code>. Ou talvez iríamos ver que <code class=\"language-text\">width</code> está errada. Isso nos indicaria para verificar dentro de <code class=\"language-text\">useWindowWidth()</code>.</p>\n<p><strong>Uma única verificação aos valores intermediários nos diria qual o Hook no nível superior que contém o erro.</strong> Não precisaríamos de olhar <strong>todas</strong> as suas implementações.</p>\n<p>Então podemos “verificar mais de perto” aquele que contém um erro e repetir.</p>\n<p>Isso se torna mais importante se a profundidade de aninhamento de Hooks customizados aumentar. Imagine que temos 3 níveis de aninhamento, cada nível usando 3 Hooks customizados diferentes dentro. A <a href=\"/the-bug-o-notation/\">diferença</a> entre procurar por um erro em <strong>3 lugares</strong> contra potencialmente procurar <strong>3 + 3×3 + 3×3×3 = 39 lugares</strong> é enorme. Por sorte, <code class=\"language-text\">useState()</code> não pode magicamente “influenciar” outros Hooks ou componentes. Um valor errado retornado por ele deixa um rastro, assim como qualquer outra variável. 🐛</p>\n<p><strong>Veredito:</strong> ✅ <code class=\"language-text\">useState()</code> não obscurece a relação causa-efeito em nosso código. Podemos seguir o rastro diretamente até o erro.</p>\n<hr>\n<h2 id=\"não-é-um-hook-usebailout\"><a href=\"#n%C3%A3o-%C3%A9-um-hook-usebailout\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Não é um Hook: <code class=\"language-text\">useBailout()</code></h2>\n<p>Como uma otimização, componentes que utilizam Hooks podem “se livrar” (do inglês <em>bail out</em>) de voltar a serem renderizados.</p>\n<p>Uma forma de fazer isso é encapsular todo o componente com um <a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html#reactmemo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">React.memo()</code></a>. Ele deixa de voltar a renderizar se as props são superficialmente iguais ao que tínhamos durante a última renderização. Isso o faz similar a um <code class=\"language-text\">PureComponent</code> em classes.</p>\n<p><code class=\"language-text\">React.memo()</code> recebe um componente e retorna um componente:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><strong>Mas por quê isso não é simplesmente um Hook?</strong></p>\n<p>Não importa se você o chamarmos de <code class=\"language-text\">useShouldComponentUpdate()</code>, <code class=\"language-text\">usePure()</code>, <code class=\"language-text\">useSkipRender()</code> ou <code class=\"language-text\">useBailout()</code>, a implementação deve se parecer com algo assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ⚠️ Não é uma API real</span>\n  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevColor</span> <span class=\"token operator\">=></span> prevColor <span class=\"token operator\">!==</span> color<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'button-'</span> <span class=\"token operator\">+</span> color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">  \n      OK\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Há algumas variações (por exemplo um simples marcador <code class=\"language-text\">usePure()</code>) mas no final eles possuem as mesmas falhas.</p>\n<h3 id=\"composição-1\"><a href=\"#composi%C3%A7%C3%A3o-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composição</h3>\n<p>Digamos que tentamos colocar <code class=\"language-text\">useBailout()</code> em dois Hooks customizados:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ Não é uma API real</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevIsOnline</span> <span class=\"token operator\">=></span> prevIsOnline <span class=\"token operator\">!==</span> isOnline<span class=\"token punctuation\">,</span> isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleStatusChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">status</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ Não é uma API real</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevWidth</span> <span class=\"token operator\">=></span> prevWidth <span class=\"token operator\">!==</span> width<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleResize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O que acontece agora se você usar ambos no mesmo componente?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Typing...'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando ele irá voltar a renderizar?</p>\n<p>Se cada chamada a <code class=\"language-text\">useBailout()</code> tem o poder de pular uma atualização, então as atualizações de <code class=\"language-text\">useWindowWidth()</code> seriam bloqueadas por <code class=\"language-text\">useFriendStatus()</code>, e vice-versa. <strong>Esses Hooks iriam quebrar um ao outro.</strong></p>\n<p>Porém, se <code class=\"language-text\">useBailout()</code> fosse respeitado apenas quando <em>todas</em> as chamadas dentro de um único componente “concordassem” em bloquear uma atualização, nosso <code class=\"language-text\">ChatThread</code> iria falhar em atualizar nas mudanças da prop <code class=\"language-text\">isTyping</code>.</p>\n<p>Pior ainda, com essa semântica <strong>qualquer Hook que fosse adicionado a <code class=\"language-text\">ChatThread</code> iria quebrar se eles não chamassem <em>também</em> a <code class=\"language-text\">useBailout()</code></strong>. De outra forma, eles não poderiam “votar contra” de deixar de atualizar dentro de <code class=\"language-text\">useWindowWidth()</code> e <code class=\"language-text\">useFriendStatus()</code>.</p>\n<p><strong>Veredito:</strong> 🔴 <code class=\"language-text\">useBailout()</code> quebra a composição. Adicionar ele a um Hook quebra a atualização de estado em outros Hooks. Nós queremos que as APIs sejam <a href=\"/optimized-for-change/\">antifrágeis</a>, e esse comportamento é praticamente o oposto.</p>\n<h3 id=\"depuração-1\"><a href=\"#depura%C3%A7%C3%A3o-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Depuração</h3>\n<p>Como um Hook como <code class=\"language-text\">useBailout()</code> afeta a depuração?</p>\n<p>Utilizaremos o mesmo exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Typing...'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Digamos que a <em>label</em> <code class=\"language-text\">Typing...</code> não apareça quando se espera, apesar de que em algum lugar muitos níveis acima a prop está sendo alterada. Como depuramos isso?</p>\n<p><strong>Normalmente, em React podemos responder essa questão com segurança olhando <em>para os níveis acima</em>.</strong> Se <code class=\"language-text\">ChatThread</code> não obtém um novo valor <code class=\"language-text\">isTyping</code>, podemos abrir o componente que renderiza <code class=\"language-text\">&lt;ChatThread isTyping={myVar} /&gt;</code> e checar <code class=\"language-text\">myVar</code>, e assim por diante. Em algum desses níveis, ou vamos encontrar uma implementação errada de <code class=\"language-text\">shouldComponentUpdate()</code>, ou um valor incorreto de <code class=\"language-text\">isTyping</code> sendo passado para baixo. Apenas uma verificação em cada componente da cadeia de renderização é geralmente suficiente para localizar a origem do problema.</p>\n<p>Contudo, se esse Hook <code class=\"language-text\">useBailout()</code> fosse real, nunca saberíamos a razão pela qual uma atualização foi pulada até que verificássemos <em>cada um dos Hooks customizados</em> (em profundidade) usado pelo nosso componente <code class=\"language-text\">ChatThread</code> e os componentes em suas cadeias de renderização. Visto que todo componente pai pode <em>também</em> utilizar Hooks customizados, isso iria tomar uma <a href=\"/the-bug-o-notation/\">proporção terrível</a></p>\n<p>É como se você estivesse procurando por uma chave de fenda em uma cômoda cheia de gavetas, e cada gaveta teria diversas outras cômodas menores, e você não saberia até quando continuaria assim.</p>\n<p><strong>Veredito:</strong> 🔴 O Hook <code class=\"language-text\">useBailout()</code> não apenas quebra a composição, mas também aumenta de forma ampla o número de passos para se depurar e a carga cognitiva para encontrar uma otimização com erros - em alguns casos, exponencialmente.</p>\n<hr>\n<p>Nós acabamos de verificar um Hook real, <code class=\"language-text\">useState()</code>, e uma sugestão frequente que intencionalmente <em>não</em> é um Hook - <code class=\"language-text\">useBailout()</code>. Nós os comparamos com os filtros de Composição e Depuração e analisamos os motivos pelos quais um deles funciona e o outro não.</p>\n<p>Enquanto não há uma “versão Hook” de <code class=\"language-text\">memo()</code> ou <code class=\"language-text\">shouldComponentUpdate()</code>, o React <em>fornece</em> um Hook chamado <a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useMemo()</code></a>. Serve para um propósito similar, mas sua semântica é suficientemente diferente para não cair nas armadilhas descritas anteriormente.</p>\n<p><code class=\"language-text\">useBailoout()</code> é apenas um exemplo de algo que não funciona bem como um Hook. Mas também há alguns outros - por exemplo, <code class=\"language-text\">useProvider()</code>, <code class=\"language-text\">useCatch()</code>, ou <code class=\"language-text\">useSuspense()</code>.</p>\n<p>Você consegue ver o por quê?</p>\n<p><em>(Sussurros: Composição… Depuração…)</em></p>","timeToRead":8,"frontmatter":{"title":"Por quê X não é um Hook?","date":"January 26, 2019","spoiler":"Só porque podemos, não significa que devemos fazer.","cta":null},"fields":{"slug":"/pt-br/why-isnt-x-a-hook/","langKey":"pt-br"}}},"pageContext":{"slug":"/pt-br/why-isnt-x-a-hook/","translations":["de","es","fr","it","ko","pt-br","zh-hans"],"translatedLinks":["/optimized-for-change/"]}}}