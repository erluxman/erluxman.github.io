{"componentChunkName":"component---src-templates-blog-post-js","path":"/pt-br/how-does-react-tell-a-class-from-a-function/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"1fa30051-d4be-5e33-8aa0-662aa288320e","html":"<p>Considere o componente <code class=\"language-text\">Greeting</code>, escrito como uma função:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O React também permite escrevê-lo como uma classe:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(Até <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">recentemente</a>, essa era a única forma de usar <em>features</em> como o state.)</p>\n<p>Quando você deseja renderizar o componente <code class=\"language-text\">&lt;Greeting /&gt;</code>, o modo como ele foi implementado não interessa:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Classe ou função — tanto faz.</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Porém, o <em>próprio React</em> se importa com essa diferença!</p>\n<p>Se <code class=\"language-text\">Greeting</code> é uma função, o React precisa chamá-lo:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Seu Código</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Dentro do React</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Hello&lt;/p></span></code></pre></div>\n<p>Mas se <code class=\"language-text\">Greeting</code> for uma classe, o React precisa instanciar ele com um operador <code class=\"language-text\">new</code> e <em>então</em> chamar o método <code class=\"language-text\">render</code> na instância criada:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Seu código</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Dentro do React</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greeting {}</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Hello&lt;/p></span></code></pre></div>\n<p>Em ambos os casos, o objetivo do React é conseguir que o nó seja renderizado (no caso o <code class=\"language-text\">&lt;p&gt;Hello&lt;/p&gt;</code>). Mas os passos para tal dependem de como <code class=\"language-text\">Greeting</code> foi definido.</p>\n<p><strong>Então como o React sabe que uma coisa é uma classe ou uma função?</strong></p>\n<p>Assim como no meu <a href=\"/why-do-we-write-super-props/\">post anterior</a>, <strong>você não <em>precisa</em> saber isso para ser produtivo no React.</strong> Eu mesmo não sabia durante anos. Por favor, não faça isso virar uma pergunta de entrevista. Na realidade, esse post é mais sobre JavaScript do que de React.</p>\n<p>Esse blog é para leitores curiosos que querem saber <em>como</em> o React funciona de certa forma. Você é esta pessoa? Então vamos mergulhar juntos.</p>\n<p><strong>Essa é uma longa jornada. Prepare-se. Esse post não tem muita informação sobre o React, mas vamos passar por aspectos como o <code class=\"language-text\">new</code>, o <code class=\"language-text\">this</code>, classes, arrow functions, <code class=\"language-text\">prototype</code>, <code class=\"language-text\">__proto__</code>, <code class=\"language-text\">instanceof</code>, e como essas coisas funcionam junto no JavaScript. Por sorte, você não precisa pensar tanto sobre elas enquanto <em>usa</em> o React. Já se você estiver implementando o React…</strong></p>\n<p>(Se você quer apenas saber a resposta, dê um scroll até o final.)</p>\n<hr>\n<p>Primeiramente, precisamos definir o que é importante para tratar funçõs e classes de forma diferente. Note que usamos o operador <code class=\"language-text\">new</code> quando chamamos uma classe:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Se Greeting é uma função</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Hello&lt;/p></span>\n\n<span class=\"token comment\">// Se Greeting é uma classe</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greeting {}</span></span><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Hello&lt;/p></span></code></pre></div>\n<p>Vamos pegar uma noção do que esse <code class=\"language-text\">new</code> faz no JavaScript.</p>\n<hr>\n<p>Nos velhos tempos, o JavaScript não tinha classes. Porém, era possível se expressar de forma similar usando apenas funções. <strong>De forma concreta, você pode usar <em>qualquer</em> função de forma similar à um construtor de uma classe, adicionando um <code class=\"language-text\">new</code> antes da sua chamada:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Apenas uma função</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Person {name: 'Fred'}</span>\n<span class=\"token keyword\">var</span> george <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'George'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 Não Funciona</span></code></pre></div>\n<p>Você ainda pode escrever códigos como esse hoje em dia! Tente isso nos DevTools do navegador.</p>\n<p>Se você chamou <code class=\"language-text\">Person(&#39;Fred&#39;)</code> <strong>sem</strong> o <code class=\"language-text\">new</code>, o <code class=\"language-text\">this</code> de dentro deve apontar para alguma coisa global e inútil (por exemplo, <code class=\"language-text\">window</code> ou <code class=\"language-text\">undefined</code>). Assim, o seu código iria quebrar ou fazer alguma coisas idiota como definir <code class=\"language-text\">window.name</code>.</p>\n<p>Adicionando <code class=\"language-text\">new</code> antes da chamada, falamos: “Ou JavaScript, eu sei que <code class=\"language-text\">Person</code> é só uma função, mas vamos fazer de conta que é o construtor de uma classe”. <strong>Crie um objeto <code class=\"language-text\">{}</code> e aponte o <code class=\"language-text\">this</code> dentro da função <code class=\"language-text\">Person</code> para o objeto criado, para conseguir definir coisas como <code class=\"language-text\">this.name</code>. Depois devolva esse objeto para mim.</strong>”</p>\n<p>Isso é o que o operador <code class=\"language-text\">new</code> faz.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mesmo objeto que o `this` dentro de `Person`</span></code></pre></div>\n<p>O operador <code class=\"language-text\">new</code> também faz qualquer coisa que colocamos em <code class=\"language-text\">Person.prototype</code> esteja disponível no objeto <code class=\"language-text\">fred</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi, I am '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">fred<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Essa é a forma que as pessoas emulavam classes antes que as mesmas fossem adicionadas no JavaScript.</p>\n<hr>\n<p>Então o <code class=\"language-text\">new</code> já estava presente no JavaScript por um tempo. Porém classes são mais recentes. Elas nos permitem reescrever o código anterior, para se adequar mais com a nossa intenção:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi, I am '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfred<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Capturar a intenção do desenvolvedor</em> é importante no design da API de qualquer linguagem.</p>\n<p>Se você escreve uma função, o JavaScript não consegue adivinhar se ela deveria ser chamada como <code class=\"language-text\">alert()</code> ou se deveria funcionar como um construtor do tipo <code class=\"language-text\">new Person()</code>. Esquecer de especificar o <code class=\"language-text\">new</code> para uma função como <code class=\"language-text\">Person</code> poderia levar a comportamentos confusos.</p>\n<p><strong>A sintaxe de classe nos diz: “Isso não é apenas uma função - é uma classe e ela tem um construtor”.</strong> Se você esquecer do <code class=\"language-text\">new</code> quando for chamar ela, o JavaScript vai retornar um erro:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ✅  Se Person for uma função: funciona</span>\n<span class=\"token comment\">// ✅  Se Person for uma classe: funciona também</span>\n\n<span class=\"token keyword\">let</span> george <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'George'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Esquecemos do `new`</span>\n<span class=\"token comment\">// 😳 Se Person for uma função do tipo construtor: comportamento confuso</span>\n<span class=\"token comment\">// 🔴 Se Person for uma classe: falha na hora</span></code></pre></div>\n<p>Isso nos ajuda a achar erros no começo, ao invés de esperar a ocorrência de um bug obscuro, do tipo <code class=\"language-text\">this.name</code> sendo tratado como <code class=\"language-text\">window.name</code> em vez de <code class=\"language-text\">george.name</code>.</p>\n<p>Porém, isso significa que o React precisa colocar o <code class=\"language-text\">new</code> antes de chamar qualquer classe. Elas não poderiam ser tratadas como funções regulares, pois o JavaScript retornaria um erro!</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 🔴 O React não pode fazer isso:</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Isso cheira à confusão.</p>\n<hr>\n<p>Antes de ver como o React resolve isso, é importante lembrar que muitas pessoas que usam o React, usam compiladores como o Babel para compilar <em>features</em> modernas como <em>classes</em> para navegadores antigos. Então devemos considerar compiladores no nosso design.</p>\n<p>Em versões antigas do Babel, classes poderiam ser chamadas sem o <code class=\"language-text\">new</code>. Porém, isso foi arrumado - adicionando mais código:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Simplificado da saída do Babel:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot call a class as a function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Nosso codigo:</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Certo</span>\n<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'George'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 🔴 Não pode chamar uma classe como uma função</span></code></pre></div>\n<p>Você deve ter visto códigos como este no seu pacote. Isso é o que todas as funções <code class=\"language-text\">_classCallCheck</code> fazem. (Você pode reduzir o tamanho do pacote selecionando o modo “loose mode” sem checagens, mas isso pode complicar a transição para classes nativas reais.)</p>\n<hr>\n<p>Agora você deve entender mais ou menos a diferença entre chamar uma coisa com <code class=\"language-text\">new</code> ou sem:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code class=\"language-text\">new Person()</code></th>\n<th><code class=\"language-text\">Person()</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">classe</code></td>\n<td>✅ <code class=\"language-text\">this</code> é uma instância de <code class=\"language-text\">Person</code></td>\n<td>🔴 <code class=\"language-text\">TypeError</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">função</code></td>\n<td>✅ <code class=\"language-text\">this</code> é uma instância de <code class=\"language-text\">Person</code></td>\n<td>😳 <code class=\"language-text\">this</code> é <code class=\"language-text\">window</code> ou <code class=\"language-text\">undefined</code></td>\n</tr>\n</tbody>\n</table>\n<p>Isso é o motivo de ser importante o React chamar os componentes corretamente. <strong>Se seus componentes estão definidos como uma classe, o React precisa usar o <code class=\"language-text\">new</code> na chamada.</strong></p>\n<p>Então o React pode apenas verificar se uma coisa é uma clase ou não?</p>\n<p>Não é tão simples! Mesmo que nós pudessemos <a href=\"https://stackoverflow.com/questions/29093396/how-do-you-check-the-difference-between-an-ecmascript-6-class-and-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">diferenciar uma classe de uma função no JavaScript</a>, isso ainda não ajudaria em classes processadas por ferramentas como o Babel. Para o navegador, elas são apenas funções. Azar para o React.</p>\n<hr>\n<p>Certo. Então o React poderia usar o <code class=\"language-text\">new</code> em toda chamada? Infelizmente, isso não funciona sempre.</p>\n<p>Para funções regulares, chamar elas com <code class=\"language-text\">new</code> daria uma instância do objeto <code class=\"language-text\">this</code>. Isso é desejável nas funções escritas como construtores (como o nosso <code class=\"language-text\">Person</code>), mas seria confuso para componentes funcionais:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Não esperamos que `this` seja qualquer instância aqui</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isso ainda poderia ser tolerável. Existem 2 <em>outras</em> razões para matar essa ideia.</p>\n<hr>\n<p>A primeira razão é que sempre usar <code class=\"language-text\">new</code> não funcionaria para arrow functions nativas (não aquelas compiladas pelo Babel), pois chamando com <code class=\"language-text\">new</code> retornaria um erro:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 Greeting não é um construtor</span></code></pre></div>\n<p>Esse comportamento é intecional e segue o design das arrow functions. Uma das muitas características das arrow functions é a de que elas <em>não</em> possuem um <code class=\"language-text\">this</code> próprio - no lugar disso, o <code class=\"language-text\">this</code> é resolvido como a função regular mais próxima:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Friends</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token keyword\">const</span> friends <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> friends<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friend</span> <span class=\"token operator\">=></span>\n      <span class=\"token operator\">&lt;</span>Friend\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token comment\">// o `this` é resolvido como o do método `render`</span></span><span class=\"gatsby-highlight-code-line\">        size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">}</span></span>        name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n        key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Certo. então <strong>arrow functions não possuem o seu próprio <code class=\"language-text\">this</code>.</strong> Mas isso significa que elas seriam inteiramente inúteis como construtores!</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 🔴 Isso não faria sentido!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Assim, <strong>O JavaScript não permite a chamada de uma arrow function com <code class=\"language-text\">new</code>.</strong> Se você fizer isso, provavelmente cometeu um erro mesmo, e é melhor ser avisado o mais cedo possível. Isso é similar ao motivo do JavaScript não deixar você chamar uma classe <em>sem</em> o <code class=\"language-text\">new</code>.</p>\n<p>Isso é legal, mas também estraga nossos planos. O React não pode apenas chamar <code class=\"language-text\">new</code> em qualquer coisa porque isso quebraria as arrow functions! Nós poderiamos tentar detectar as arrow functions pela falta de <code class=\"language-text\">prototype</code>, e não colocar o <code class=\"language-text\">new</code> nelas:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// undefined</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// {constructor: f}</span></code></pre></div>\n<p>Mas isso <a href=\"https://github.com/facebook/react/issues/4599#issuecomment-136562930\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">não funcionaria</a> para funções compiladas com o Babel. Isso pode não ser grande coisa, mas existe outra razão que faz essa abordagem um caminho sem saídas.</p>\n<hr>\n<p>Outra razão para não colocarmos <code class=\"language-text\">new</code> é que isso impediria o React de suportar componentes que retornam string ou outros tipos primitivos.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 'Hello'</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 Greeting {}</span></code></pre></div>\n<p>Isso, novamente, tem a ver com as peculiaridades do design do <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">operador <code class=\"language-text\">new</code></a>. Como nós vimos anteriormente, <code class=\"language-text\">new</code> diz ao JavaScript para criar um objeto, fazer o <code class=\"language-text\">this</code> virar o objeto dentro da função, e depois nos dar um objeto que é resultado do <code class=\"language-text\">new</code>.</p>\n<p>Porém, o JavaScript também permite que a função chamada com <code class=\"language-text\">new</code> <em>sobrescreva</em> o valor retornado por <code class=\"language-text\">new</code> retornando algum outro objeto. Provavelmente, isso foi considerado útil para padrões como o polling, onde queremos reusar instâncias:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Criado tardio</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> zeroVector <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>zeroVector <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Reusa a mesma instância</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> zeroVector<span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    zeroVector <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😲 b === c</span></span></code></pre></div>\n<p>Porém, <code class=\"language-text\">new</code> também <em>ignora completamente</em> o valor de retorno da função se ele <em>não</em> for um objeto. Se você retornar uma string ou um número, é com se não existisse nenhum <code class=\"language-text\">return</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 42</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 Answer {}</span></code></pre></div>\n<p>Não existe uma forma de ler um valor primitivo (como um número ou uma string) de uma função quando chamada com <code class=\"language-text\">new</code>. Dessa forma, se o React sempre usar <code class=\"language-text\">new</code>, não seria possível adicionar suporte para componentes que retornam strings!</p>\n<p>Isso é inaceitável, então devemos ajustar.</p>\n<hr>\n<p>O que aprendemos até agora? O React precisa chamar classes (incluindo a saída do Babel) <em>com</em> <code class=\"language-text\">new</code>, mas ele precisa chamar funções regulares e arrow functions (incluindo da saída do Babel) <em>sem</em> o <code class=\"language-text\">new</code>. Ainda não existe nenhuma forma de distinguí-los.</p>\n<p><strong>Se não podemos resolver um problema genérico, podemos resolver um mais específico?</strong></p>\n<p>Quando você define um componente como uma classe, você provavelmente quer que herde de <code class=\"language-text\">React.Component</code> para usar os métodos integrados como o <code class=\"language-text\">this.setState()</code>. <strong>Em vez de tentar detectar todas as classes, podemos detectar apenas os decendentes de <code class=\"language-text\">React.Component</code>?</strong></p>\n<p>Spoiler: isso é exatamente o que o React faz.</p>\n<hr>\n<p>Talvez, a forma idiomática de verificar se <code class=\"language-text\">Greeting</code> é uma classe do React, é testando <code class=\"language-text\">Greeting.prototype instanceof React.Component</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span>prototype <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>Eu sei o que você está pensando. O que aconteceu aqui?! Para responder isso, precisamos entender os protypes do JavaScript.</p>\n<p>Você pode estar familiarizado com a “cadeia de prototype”. Todo objeto no JavaScript pode ter um “prototype”. Quando nós escrevemos <code class=\"language-text\">fred.sayHi()</code> mas o objeto <code class=\"language-text\">fred</code> não tem uma propriedade <code class=\"language-text\">sayHi</code>, procuramos por <code class=\"language-text\">sayHi</code> no prototype de <code class=\"language-text\">fred</code>. Se não acharmos lá, procuramos no próximo prototype da cadeia - o prototype do prototype de <code class=\"language-text\">fred</code>. E assim por diante.</p>\n<p><strong>De maneira confusa, a propriedade <code class=\"language-text\">prototype</code> de uma classe ou função <em>não</em> aponta para o prototype de seu valor.</strong> Eu não estou brincando.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🤪 Não é o prototype de Person</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 É o prototype de Person</span></code></pre></div>\n<p>Então a “cadeia de prototype” é mais como <code class=\"language-text\">__proto__.__proto__.__proto__</code> do que <code class=\"language-text\">prototype.prototype.prototype</code>. Isso levou anos para eu entender.</p>\n<p>O que é a propriedade <code class=\"language-text\">prototype</code> de uma função ou uma classe, então? <strong>É o <code class=\"language-text\">__proto__</code> dado à todos os objetos criados à partir da função ou classe!</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi, I am '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Define `fred.__proto__` como `Person.prototype`</span></span></code></pre></div>\n<p>E essa cadeia de <code class=\"language-text\">__proto__</code> é como o JavaScript procura por propriedades:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">fred<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1. fred possui uma propriedade sayHi? Não.</span>\n<span class=\"token comment\">// 2. fred.__proto__ possui um propriedade sayHi? Sim. Chame ela!</span>\n\nfred<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1. fred possui uma propriedade toString? Não.</span>\n<span class=\"token comment\">// 2. fred.__proto__ possui um propriedade toString? Não.</span>\n<span class=\"token comment\">// 2. fred.__proto____proto__ possui um propriedade toString? Sim. Chame ela!</span></code></pre></div>\n<p>Na prática, você deveria quase nunca precisar tocar no <code class=\"language-text\">__proto__</code> diretamente do código, a menos que você esteja debugando alguma coisa relacionada à cadeia de prototype. Se você quer que coisas estejam disponíveis em <code class=\"language-text\">fred.__proto__</code>, você deveria colocá-las em <code class=\"language-text\">Person.prototype</code>. Pelo menos isso é como as coisas foram projetadas inicialmente.</p>\n<p>A propriedade <code class=\"language-text\">__proto__</code> não deveria ser exposta pelos navegadores, já que a cadeia de prototype era considerada uma coisa interna. Mas alguns navegadores adicionaram o <code class=\"language-text\">__proto__</code> e eventualmente ela foi padronizada a contragosto (mas foi descontinuada em favor de <code class=\"language-text\">Object.getPrototypeOf()</code>).</p>\n<p><strong>Ainda assim eu acho muito confuso que uma propriedade chamada <code class=\"language-text\">prototype</code> não dá o prototype do valor</strong> (por exemplo, <code class=\"language-text\">fred.prototype</code> não é definido porque <code class=\"language-text\">fred</code> não é uma função). Pessoalmente, eu acho que isso é a maior razão que mesmo desenvolvedores experientes tendem à não entender os prototypes do JavaScript.</p>\n<hr>\n<p>Este post está longo, né? Eu diria que estamos em 80% dele. Aguente firme.</p>\n<p>Sabemos que quando usamos <code class=\"language-text\">obj.foo</code>, o JavaScript na verdade procura por <code class=\"language-text\">foo</code> em <code class=\"language-text\">obj</code>, <code class=\"language-text\">obj.__proto__</code>, <code class=\"language-text\">obj.__proto__.__proto__</code>, e por aí vai.</p>\n<p>Com classes, você não está exposto diretamente à esse mecanismo, mas o <code class=\"language-text\">extends</code> também funciona por cima da velha cadeia de prototypes. Isso é como as instâncias das classes do React conseguem acesso aos métodos como <code class=\"language-text\">setState</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greeting.prototype</span>\n<span class=\"gatsby-highlight-code-line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// React.Component.prototype</span></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object.prototype</span>\n\nc<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Achado em c.__proto__ (Greeting.prototype)</span>\n<span class=\"gatsby-highlight-code-line\">c<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Achado em c.__proto__.__proto__ (React.Component.prototype)</span></span>c<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Achado em c.__proto__.__proto__.__proto__ (Object.prototype)</span></code></pre></div>\n<p>Em outras palavras, <strong>quando você usa classes, a cadeia de <code class=\"language-text\">__proto__</code> de uma instância “imita” a hierarquia de classes:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// cadeia de `extends`</span>\nGreeting\n  → React<span class=\"token punctuation\">.</span>Component\n    → <span class=\"token function\">Object</span> <span class=\"token punctuation\">(</span>implícito<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// cadeia de `__proto__`</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  → <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype\n    → React<span class=\"token punctuation\">.</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype\n      → <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype</code></pre></div>\n<p>2 Cadeias.</p>\n<hr>\n<p>Assim como a cadeia de <code class=\"language-text\">__proto__</code> imita a hierarquia de classes, podemos verificar se <code class=\"language-text\">Greeting</code> herda de <code class=\"language-text\">React.Component</code> com <code class=\"language-text\">Greeting.prototype</code>, e dessa forma seguir sua cadeia de <code class=\"language-text\">__proto__</code>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// cadeia de `__proto__`</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  → <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// 🕵️ Começamos aqui</span></span><span class=\"gatsby-highlight-code-line\">    → React<span class=\"token punctuation\">.</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// ✅ Encontrado!</span></span>      → <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype</code></pre></div>\n<p>Convenientemente, <code class=\"language-text\">x instanceof y</code> faz exatamente esse mesmo tipo de busca. Ele segue a cadeia de <code class=\"language-text\">x.__proto__</code> procurando por <code class=\"language-text\">Y.prototype</code>.</p>\n<p>Normalmente, isso é usado para determinar se uma coisa é uma instância de uma classe:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// greeting (🕵️‍ Começamos aqui)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype (✅ Encontrado!)</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// greeting (🕵️‍ Começamos aqui)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype (✅ Encontrado!)</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// greeting (🕵️‍ Começamos aqui)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype (✅ Encontrado!)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Banana</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// greeting (🕵️‍ Começamos aqui)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype (🙅‍ Não foi encontrado!)</span></code></pre></div>\n<p>Mas isso também funciona normal para determinar se uma classe herda de outra classe:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// greeting</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype (🕵️‍ Começamos aqui)</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype (✅ Encontrado!)</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span></code></pre></div>\n<p>E essa verificação é como determinamos se uma coisa é um componente de classe do React ou uma função regular.</p>\n<hr>\n<p>Mas isso não é o que o React faz. 😳</p>\n<p>Uma peculiaridade da solução com <code class=\"language-text\">instanceof</code> é que ela não funciona quando temos múltiplas cópias do React na página, e o componente que estamos verificando herda de <em>outro</em> <code class=\"language-text\">React.Component</code> de uma cópia do React. Misturando múltiplas cópias do React em um único projeto é ruim por diversas razões, e históricamente tentamos evitar tais problemas quando possível. (Com o Hooks, nós <a href=\"https://github.com/facebook/react/issues/13991\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">provavelmente vamos precisar</a> forçar a remoção da duplicação.)</p>\n<p>Uma outra possibilidade heurística poderia ser a verificação da presença de um método <code class=\"language-text\">render</code> no prototype. Porém, <a href=\"https://github.com/facebook/react/issues/4599#issuecomment-129714112\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">não estava claro</a> como a API iria evoluir. Toda verificação tem um custo e nós não queríamos adicionar mais uma. Isso também não funcionaria se o <code class=\"language-text\">render</code> fosse definido como um método de instância, como na sintaxe de propriedade de uma classe.</p>\n<p>Então, ao invés disso, o React <a href=\"https://github.com/facebook/react/pull/4663\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">adicionou</a> uma flag especial para o componente base. O React verifica pela presença dessa flag, e dessa forma ele sabe quando uma coisa é uma classe do React ou não.</p>\n<p>Originalmente a flag estava na classe base <code class=\"language-text\">React.Component</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Dentro do React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nComponent<span class=\"token punctuation\">.</span>isReactClass <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Podemos verificar dessa maneira</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Greeting<span class=\"token punctuation\">.</span>isReactClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Sim</span></code></pre></div>\n<p>Porém, algumas implementações de classe que tínhamos como alvo <a href=\"https://github.com/scala-js/scala-js/issues/1900\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">não</a> copiavam propriedades estáticas (ou definiam um <code class=\"language-text\">__proto__</code> não padronizado), e a flag era jogada fora.</p>\n<p>Isso é o motivo do React ter <a href=\"https://github.com/facebook/react/pull/5021\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">movido</a> a flag para <code class=\"language-text\">React.Component.prototype</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Dentro do React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Podemos verificar dessa maneira</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Sim</span></code></pre></div>\n<p><strong>E isso é literalmente tudo o que é feito.</strong></p>\n<p>Você pode estar pensando sobre o motivo de ser um objeto e não um booleano. Isso não importa muito na prática, mas em versões iniciais do Jest (antes do Jest ser Bom™️) o automocking era ativado automaticamente. Os mocks gerados omitiam as propriedades primitivas, <a href=\"https://github.com/facebook/react/pull/4663#issuecomment-136533373\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">quebrando a verificação</a>. Obrigado Jest.</p>\n<p>A verificação <code class=\"language-text\">isReactComponent</code> é <a href=\"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/react-reconciler/src/ReactFiber.js#L297-L300\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">usada no React</a> até hoje.</p>\n<p>Se você não herdar de <code class=\"language-text\">React.Component</code>, o React não vai encontrar a propriedade <code class=\"language-text\">isReactComponent</code> no seu prototype, e não vai tratar o componente como uma classe. Agora você sabe o motivo da <a href=\"https://stackoverflow.com/a/42680526/458193\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">resposta mais bem avaliada</a> para o erro <code class=\"language-text\">Cannot call a class as a function</code> ser a adição de <code class=\"language-text\">extends React.Component</code>. Por fim, um <a href=\"https://github.com/facebook/react/pull/11168\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">alerta foi adicionado</a> informando que <code class=\"language-text\">prototype.render</code> existe mas <code class=\"language-text\">prototype.isReactComponent</code> não.</p>\n<hr>\n<p>Você pode dizer que essa história é como matar um mosquito com um canhão. <strong>A solução é simples, mas eu fui longe para explicar o <em>porque</em> do React acabar utilizando ela, e quais eram as alternativas.</strong></p>\n<p>Na minha experiência, isso acontece para APIs de bibliotecas. Por uma API ser simples de usar, na maioria dos casos você precisa considerar a semântica da linguagem (possivelmente, para algumas linguagens, incluindo versões futuras), o desempenho, a ergonomia com e sem os tempos de compilação, o estado do ecossistema e os métodos para criação de pacotes, avisos o mais cedo possível, e muitas outras coisas. O resultado final pode não ser sempre o mais elegante, mais deve ser o mais prático.</p>\n<p><strong>Se a API for um sucesso, <em>seus usuários</em> nunca vão precisar pensar sobre o processo.</strong> Ao invés disso eles podem focar na criação de aplicações.</p>\n<p>Mas se você também é curioso… é legal saber como ela funciona.</p>","timeToRead":17,"frontmatter":{"title":"Como o React diferencia uma classe de uma função?","date":"December 02, 2018","spoiler":"Falaremos sobre classes, new, instanceof, prototype chains e do design da API.","cta":null},"fields":{"slug":"/pt-br/how-does-react-tell-a-class-from-a-function/","langKey":"pt-br"}}},"pageContext":{"slug":"/pt-br/how-does-react-tell-a-class-from-a-function/","translations":["es","fr","hu","ja","nl","pt-br","sk","zh-hans","zh-hant"],"translatedLinks":["/why-do-we-write-super-props/"]}}}