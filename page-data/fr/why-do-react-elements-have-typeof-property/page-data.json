{"componentChunkName":"component---src-templates-blog-post-js","path":"/fr/why-do-react-elements-have-typeof-property/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"ee9851a9-e28f-5601-ad99-1b76b33906cc","html":"<p>Vous vous dites peut-être que vous écrivez du JSX :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>marquee</span> <span class=\"token attr-name\">bgcolor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#ffa7c4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">salut</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>marquee</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Mais en vrai, vous appelez une fonction :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/* type */</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* props */</span> <span class=\"token punctuation\">{</span> bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/* children */</span> <span class=\"token string\">'salut'</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Et cette fonction vous renvoie un objet.  Nous appelons cet objet un <em>élément</em> React.  Il dit à React quoi <em>renderer</em> ensuite.  Vos composants renvoient une arborescence d’éléments.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'salut'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $​$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Tékitoa ?</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si vous utilisez React vous voyez peut-être à quoi correspondent les champs <code class=\"language-text\">type</code>, <code class=\"language-text\">props</code>, <code class=\"language-text\">key</code>, et <code class=\"language-text\">ref</code>. <strong>Mais qu’est-ce que <code class=\"language-text\">$$typeof</code> ? Et pourquoi a-t-il un <code class=\"language-text\">Symbol()</code> comme valeur ?</strong></p>\n<p>C’est encore un de ces trucs que vous n’avez pas <em>besoin</em> de savoir pour utiliser React, mais qui sont agréables à savoir.  Cet article contient aussi quelques astuces sur la sécurité qui pourraient vous intéresser.  Peut-être qu’un jour vous écrirez votre propre bibliothèque UI et que tout ça vous sera bien utile.  Je l’espère en tout cas.</p>\n<hr>\n<p>Avant que les bibliothèques UI côté client deviennent répandues et ajoutent des protections basiques, on trouvait fréquemment du code applicatif qui construisait du HTML et l’insérait à même le DOM :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> messageEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessageEl<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;p>'</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/p>'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ça marche bien, sauf lorsque <code class=\"language-text\">message.text</code> est un truc du genre <code class=\"language-text\">&#39;&lt;img src onerror=&quot;stealYourPassword()&quot;&gt;&#39;</code>. <strong>Vous ne voulez surtout pas que des trucs écrits par des inconnus atterrissent tels quels dans le HTML rendu par votre application.</strong></p>\n<p>(Détail amusant : si vous ne faites que du rendu côté client, une balise <code class=\"language-text\">&lt;script&gt;</code> ici ne vous permettrait pas d’exécuter du JavaScript. Mais <a href=\"https://gomakethings.com/preventing-cross-site-scripting-attacks-when-using-innerhtml-in-vanilla-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ne laissez pas ce soulagement</a> vous donner une illusion de sécurité.)</p>\n<p>Pour vous protéger contre ce type d’attaques, vous pouvez utiliser des APIs sécurisées telles que <code class=\"language-text\">document.createTextNode()</code> ou <code class=\"language-text\">textContent</code>, qui ne traitent que du texte.  Vous pouvez aussi « échapper » en amont les données saisies en remplaçant des caractères potentiellement dangereux tels que <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">&gt;</code> et d’autres au sein des textes fournis par les utilisateurs.</p>\n<p>Même ainsi, le coût d’une erreur est élevé, et c’est pénible de devoir se rappeler à tout instant de retravailler les textes fournis par les utilisateurs dans nos affichages.  <strong>C’est pourquoi les bibliothèques modernes telles que React échappent le contenu textuel des chaînes par défaut :</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Si <code class=\"language-text\">message.text</code> est un texte conçu pour réaliser une attaque à l’aide d’une <code class=\"language-text\">&lt;img&gt;</code> ou autre balise, ça ne deviendra donc pas une véritable balise <code class=\"language-text\">&lt;img&gt;</code>.  React échappera le contenu <em>et ensuite</em> l’insèrera dans le DOM.  Ainsi au lieu de voir l’image résultante, on n’en verra que le balisage.</p>\n<p>Pour injecter du HTML quelconque dans un élément React, vous devez écrire <code class=\"language-text\">dangerouslySetInnerHTML={{ __html: message.text }}</code>. <strong>Le côté gauche et pénible de cette syntaxe est une <em>fonctionnalité</em>.</strong>  L’idée est que ce type de code vous saute aux yeux, afin de faciliter son examen lors des revues et audits de code.</p>\n<hr>\n<p><strong>React est-il pour autant totalement immunisé contre les attaques d’injection ? Non.</strong> HTML et le DOM offrent <a href=\"https://github.com/facebook/react/issues/3473#issuecomment-90594748\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">une large surface d’attaque</a>, trop difficile ou lente à mitiger pour React et les autres bibliothèques UI. La plupart des vecteurs d’attaque restants concernent les attributs.  Par exemple, si vous <em>renderez</em> <code class=\"language-text\">&lt;a href={user.website}&gt;</code>, malheur à vous si l’utilisateur a comme site web <code class=\"language-text\">&#39;javascript: stealYourPassword()&#39;</code>.  Réutiliser verbatim des saisies utilisateurs, par exemple avec un <em>spread</em> comme <code class=\"language-text\">&lt;div {...userData}&gt;</code>, reste rare mais tout aussi dangereux.</p>\n<p>React <a href=\"https://github.com/facebook/react/issues/10506\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pourrait</a> fournir davantage de protection au fil du temps, mais dans la plupart des cas cela provient de soucis côté serveur qui <a href=\"https://github.com/facebook/react/issues/3473#issuecomment-91327040\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">devraient</a> être corrigées là-bas de toutes façons.</p>\n<p>Quoi qu’il en soit, échapper les contenus textuels reste une première ligne de défense raisonnable, qui rattrape de nombreuses attaques potentielles.  N’est-il pas agréable de savoir que le code ci-dessous est sécurisé ?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Échappé automatiquement</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>Eh bien, ça n’a pas toujours été le cas, figurez-vous.</strong>  Et c’est là que <code class=\"language-text\">$$typeof</code> entre en scène.</p>\n<hr>\n<p>Les éléments React ont été volontairement conçus comme des objets nus :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'salut'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Même si en temps normal vous les créez avec <code class=\"language-text\">React.createElement()</code>, ce n’est pas une obligation.  Il y a des cas qui justifient que React prenne en charge des objets nus écrits comme celui ci-dessus.  Bien entendu, vous ne <em>voulez</em> probablement pas les écrire comme ça, mais <a href=\"https://github.com/facebook/react/pull/3583#issuecomment-90296667\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ça peut être</a> utile pour un compilateur optimisant, pour passer de l’UI entre des <em>workers</em>, ou pour découpler JSX du module React.</p>\n<p>Cependant, <strong>si votre serveur a une faille qui permet aux utilisateurs de stocker des objets JSON quelconques</strong> là où le code client attend une chaîne, ça peut devenir un problème :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Le serveur a une faille qui laisse les utilisateurs stocker du JSON</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> expectedTextButGotJSON <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  type<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    dangerouslySetInnerHTML<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      __html<span class=\"token operator\">:</span> <span class=\"token string\">'/* mets ton attaque ici */'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ...</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> text<span class=\"token operator\">:</span> expectedTextButGotJSON <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Dangereux dans React 0.13</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token plain-text\">  </span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span></span><span class=\"token plain-text\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Dans le cas ci-dessus, React 0.13 serait <a href=\"http://danlec.com/blog/xss-via-a-spoofed-react-element\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vulnérable</a> à une attaque XSS.  Pour être bien clair encore une fois, <strong>cette attaque dépend d’une faille serveur existante.</strong>  Ce qui ne veut pas dire que React ne pourrait pas améliorer sa protection contre ça.  Et depuis React 0.14, c’est ce qu’il fait.</p>\n<p>Le correctif dans React 0.14 a consisté à <a href=\"https://github.com/facebook/react/pull/4832\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">taguer chaque élément React avec une valeur de type Symbol</a> :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'marquee'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    bgcolor<span class=\"token operator\">:</span> <span class=\"token string\">'#ffa7c4'</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">'salut'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  $​$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react.element'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ça fonctionne parce qu’on ne peut pas mettre des <code class=\"language-text\">Symbol</code>s dans du JSON. <strong>Ainsi même si le serveur avait une faille qui permette de renvoyer du JSON au lieu de texte simple, ce JSON ne pourrait pas inclure <code class=\"language-text\">Symbol.for(&#39;react.element&#39;)</code>.</strong> React vérifiera <code class=\"language-text\">element.$$typeof</code>, et refusera de traiter un élément où ce dernier est manquant ou invalide.</p>\n<p>Le truc chouette avec <code class=\"language-text\">Symbol.for()</code> spécifiquement, c’est que <strong>ces symboles sont partagés entre les environnements comme les <em>iframes</em> et les <em>workers</em>.</strong> Donc ce correctif ne nous empêche pas de passer des éléments fiables entre différentes parties de l’application, même dans des situations exotiques.  Dans la même veine, même si plusieurs copies de React existaient sur la page, elles seraient tout de même « d’accord » sur la valeur valide de <code class=\"language-text\">$$typeof</code>.</p>\n<hr>\n<p>Et pour les navigateurs qui <a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Symbol#Compatibilit%C3%A9_des_navigateurs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ne prennent pas en charge</a> les symboles ?</p>\n<p>Hélas, ils ne bénéficieront pas de cette protection supplémentaire.  React inclut tout de même un champ <code class=\"language-text\">$$typeof</code> sur les éléments par souci de cohérence, mais il est <a href=\"https://github.com/facebook/react/blob/8482cbe22d1a421b73db602e1f470c632b09f693/packages/shared/ReactSymbols.js#L14-L16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">défini par un nombre</a> — <code class=\"language-text\">0xeac7</code>.</p>\n<p>Pourquoi ce nombre spécifiquement ? <code class=\"language-text\">0xeac7</code> ressemble un peu à « React ».</p>","timeToRead":6,"frontmatter":{"title":"Pourquoi les éléments React ont-ils une propriété $$typeof ?","date":"December 03, 2018","spoiler":"C’est une question de sécurité.","cta":null},"fields":{"slug":"/fr/why-do-react-elements-have-typeof-property/","langKey":"fr"}}},"pageContext":{"slug":"/fr/why-do-react-elements-have-typeof-property/","translations":["es","ja","fr","pt-br","zh-hans"],"translatedLinks":[]}}}