{"componentChunkName":"component---src-templates-blog-post-js","path":"/fr/how-does-react-tell-a-class-from-a-function/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"1a8e7e0a-75e1-5550-8f45-b9d81186f7ea","html":"<p>Observez ce composant <code class=\"language-text\">Greeting</code> défini par une fonction :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React permet aussi de le définir par une classe :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(Jusqu’à <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">récemment</a>, c’était la seule manière d’utiliser certaines fonctionnalités telles que la gestion d’état.)</p>\n<p>Quand vous voulez afficher un <code class=\"language-text\">&lt;Greeting /&gt;</code>, vous ne vous préoccupez pas de la façon dont il a été défini :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Classe ou fonction — peu importe.</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Mais pour <em>React lui-même</em>, ça fait une différence !</p>\n<p>Si <code class=\"language-text\">Greeting</code> est une fonction, React a besoin de l’appeler :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Votre code</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Dans React</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Bonjour&lt;/p></span></code></pre></div>\n<p>Mais si <code class=\"language-text\">Greeting</code> est une classe, React doit l’instancier à l’aide de l’opérateur <code class=\"language-text\">new</code> et <em>ensuite</em> appeler la méthode <code class=\"language-text\">render</code> sur l’instance nouvellement créée :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Votre code</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Dans React</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greeting {}</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Bonjour&lt;/p></span></code></pre></div>\n<p>Dans les deux cas, l’objectif de React est d’obtenir le nœud rendu (dans cette exemple, <code class=\"language-text\">&lt;p&gt;Bonjour&lt;/p&gt;</code>).  Mais les étapes exactes dépendent de la façon dont <code class=\"language-text\">Greeting</code> est défini.</p>\n<p><strong>Alors comment React sait-il si quelque chose est une classe ou une fonction ?</strong></p>\n<p>Tout comme dans mon <a href=\"/why-do-we-write-super-props/\">précédent article</a>, <strong>vous n’avez pas <em>besoin</em> de savoir ça pour être efficace avec React.</strong>  Je ne le savais pas moi-même pendant des années.  Ne faites pas de cet article une question d’entretien technique.  En fait, cet article est plus à propos de JavaScript que de React.</p>\n<p>Ce blog est pour les personnes curieuses qui veulent savoir <em>pourquoi</em> React fonctionne d’une certaine manière.  Êtes-vous une telle personne ?  Alors creusons ensemble.</p>\n<p><strong>Ce sera un long voyage.  Attachez votre ceinture.  Cet article n’a pas beaucoup d’informations sur React lui-même, mais nous explorerons des aspects de <code class=\"language-text\">new</code>, <code class=\"language-text\">this</code>, <code class=\"language-text\">class</code>, des fonctions fléchées, de <code class=\"language-text\">prototype</code>, <code class=\"language-text\">__proto__</code>, <code class=\"language-text\">instanceof</code>, et de la façon dont toutes ces choses fonctionnent ensemble en JavaScript.  Heureusement, vous n’avez pas tellement besoin de penser à tout ça quand vous <em>utilisez</em> React.  Mais si vous implémentez React…</strong></p>\n<p>(Si tout ce qui vous intéresse c’est de connaître la réponse, déroulez jusqu’à la toute fin.)</p>\n<hr>\n<p>Pour commencer, nous devons comprendre pourquoi il est important de traiter les fonctions et les classes différemment.  Remarquez comment nous utilisons l’opérateur <code class=\"language-text\">new</code> pour appeler une classe :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Si Greeting est une fonction</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Bonjour&lt;/p></span>\n\n<span class=\"token comment\">// Si Greeting est une classe</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greeting {}</span></span><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;p>Bonjour&lt;/p></span></code></pre></div>\n<p>Essayons de comprendre à peu près ce que fait l’opérateur <code class=\"language-text\">new</code> en JavaScript.</p>\n<hr>\n<p>Autrefois, JavaScript n’avait pas de classes.  Cependant, vous pouviez exprimer une approche similaire aux classes avec de simples fonctions.  <strong>Concrètement, vous pouvez utiliser <em>n’importe quelle</em> fonction dans une optique similaire à un constructeur en ajoutant <code class=\"language-text\">new</code> avant son appel :</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Juste une function</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Person {name: 'Fred'}</span>\n<span class=\"token keyword\">var</span> george <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'George'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 Ne marchera pas</span></code></pre></div>\n<p>On peut toujours écrire du code de ce genre de nos jours ! Essayez donc dans les DevTools.</p>\n<p>Si vous appeliez <code class=\"language-text\">Person(&#39;Fred&#39;)</code> <strong>sans</strong> <code class=\"language-text\">new</code>, <code class=\"language-text\">this</code> à l’intérieur référencerait un objet global et inutile (par exemple, <code class=\"language-text\">window</code> ou <code class=\"language-text\">undefined</code>).  De sorte que notre code planterait, ou ferait un truc idiot comme définir <code class=\"language-text\">window.name</code>.</p>\n<p>En ajoutant <code class=\"language-text\">new</code> avant l’appel, nous disons : « Hé, JavaScript, je sais bien que <code class=\"language-text\">Person</code> est juste une fonction mais faisons comme si c’était un genre de constructeur de classe. <strong>Crée un objet <code class=\"language-text\">{}</code> et fais-le référencer par <code class=\"language-text\">this</code> au sein de la fonction <code class=\"language-text\">Person</code>, pour que je puisse y affecter des trucs genre <code class=\"language-text\">this.name</code>.  Puis renvoie-moi cet objet.</strong> »</p>\n<p>C’est en résumé ce que fait l’opérateur <code class=\"language-text\">new</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Même objet que `this` dans `Person`</span></code></pre></div>\n<p>L’opérateur <code class=\"language-text\">new</code> rend également accessible via l’objet <code class=\"language-text\">fred</code> tout ce que nous mettons dans <code class=\"language-text\">Person.prototype</code> :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bonjour, je m’appelle '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">fred<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Et c’est comme ça qu’on simulait des classes avant que JavaScript ne fournisse une syntaxe dédiée.</p>\n<hr>\n<p>Donc <code class=\"language-text\">new</code> existe en JavaScript depuis des lustres.  En revanche, les classes sont plus récentes.  Elles nous permettent de réécrire le code ci-dessus pour mieux coller à notre intention :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bonjour, je m’appelle '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfred<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Saisir l’intention du développeur</em> est une part importante de la conception de langage et d’API.</p>\n<p>Si vous écrivez une fonction, JavaScript ne peut pas deviner si vous souhaitez l’utiliser comme <code class=\"language-text\">alert()</code> ou si ce sera un constructeur comme <code class=\"language-text\">new Person()</code>.  Oublier de préciser <code class=\"language-text\">new</code> pour une fonction comme <code class=\"language-text\">Person</code> donnerait des résultats inattendus.</p>\n<p><strong>La syntaxe de classes nous permet de dire : « ce n’est pas juste une fonction—c‘est une classe et elle a un constructeur. »</strong>  Si vous oubliez le <code class=\"language-text\">new</code> en l’appelant, JavaScript lèvera une erreur :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ✅  Si Person est une fonction, ça marche</span>\n<span class=\"token comment\">// ✅  Si Person est une classe, ça marche aussi</span>\n\n<span class=\"token keyword\">let</span> george <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'George'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// On a oublié `new`</span>\n<span class=\"token comment\">// 😳 Si Person est une fonction de type constructeur : comportement foireux</span>\n<span class=\"token comment\">// 🔴 Si Person est une classe : échec immédiat</span></code></pre></div>\n<p>Ça nous aide a attraper les erreurs tôt au lieu de devoir attendre un bug obscur du style <code class=\"language-text\">this.name</code> devenant <code class=\"language-text\">window.name</code> au lieu de <code class=\"language-text\">george.name</code>.</p>\n<p>Ceci dit, ça signifie que React a besoin de mettre un <code class=\"language-text\">new</code> avant d’appeler une classe.  Il ne peut pas juste l’appeler comme une fonction classique, ou JavaScript traitera ça comme une erreur !</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 🔴 React ne peut pas se contenter de faire ça :</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ça ne sent pas bon.</p>\n<hr>\n<p>Avant de voir comment React résout ce problème, il faut bien se souvenir que la plupart des gens utilisent React avec des transpileurs comme Babel pour permettre aux anciens navigateurs de tirer parti de fonctionnalités modernes, comme les classes.  Donc nous devons garder les transpileurs à l’esprit dans notre approche.</p>\n<p>Dans les premières versions de Babel, les classes pouvaient être appelées sans <code class=\"language-text\">new</code>.  Ça a toutefois été corrigé—en générant un peu de code en plus :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Légèrement simplifié par rapport au code pondu par Babel</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot call a class as a function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Notre code :</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Okay</span>\n<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'George'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 🔴 Cannot call a class as a function</span></code></pre></div>\n<p>Vous avez peut-être déjà vu ce genre de code dans votre <em>bundle</em>. C’est la raison d‘être de tous ces appels à <code class=\"language-text\">_classCallCheck</code>. (On peut réduire la taille du <em>bundle</em> en optant pour le mode « laxiste », sans vérifications, mais ça peut compliquer la transition ultérieure aux classes natives.)</p>\n<hr>\n<p>À ce stade, vous devriez avoir une compréhension suffisante de la différence entre appeler une fonction avec <code class=\"language-text\">new</code> ou sans <code class=\"language-text\">new</code> :</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code class=\"language-text\">new Person()</code></th>\n<th><code class=\"language-text\">Person()</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">class</code></td>\n<td>✅ <code class=\"language-text\">this</code> est une instance de <code class=\"language-text\">Person</code></td>\n<td>🔴 <code class=\"language-text\">TypeError</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">function</code></td>\n<td>✅ <code class=\"language-text\">this</code> est une instance de <code class=\"language-text\">Person</code></td>\n<td>😳 <code class=\"language-text\">this</code> est <code class=\"language-text\">window</code> ou <code class=\"language-text\">undefined</code></td>\n</tr>\n</tbody>\n</table>\n<p>C’est pourquoi il est important pour React d’appeler votre composant correctement. <strong>Si votre composant est défini comme une classe, React doit utiliser <code class=\"language-text\">new</code> pour l’appeler.</strong></p>\n<p>Alors React peut-il juste vérifier si quelque chose est une classe ou non ?</p>\n<p>Pas si simple ! Même si on pourrait <a href=\"https://stackoverflow.com/questions/29093396/how-do-you-check-the-difference-between-an-ecmascript-6-class-and-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">distinguer une classe d’une fonction en JavaScript</a>, ça ne nous aiderait pas pour les classes transformées par des outils tels que Babel.  Pour le navigateur, il s’agirait de fonctions classiques.  Pas de bol pour React.</p>\n<hr>\n<p>OK, alors peut-être React peut-il juste utiliser <code class=\"language-text\">new</code> pour tous les appels ?  Malheureusement, ça ne marcherait pas non plus.</p>\n<p>Avec les fonctions classiques, les appeler avec <code class=\"language-text\">new</code> leur donnerait une instance comme <code class=\"language-text\">this</code>.  C’est souhaitable pour les fonctions écrites en tant que constructeurs (comme notre <code class=\"language-text\">Person</code> plus haut), mais ça serait problématique pour les fonctions de composants :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// On ne s’attend pas à ce que `this` soit ici une instance quelconque</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ça serait toutefois acceptable.  Il y a deux <em>autres</em> raisons pour lesquelles on laissera tomber cette idée.</p>\n<hr>\n<p>La première raison qui empêche <code class=\"language-text\">new</code> de marcher dans ce cas de figure concerne les fonctions fléchées natives (pas celles transpilées par Babel), car les appeler avec <code class=\"language-text\">new</code> lève une erreur :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greeting</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🔴 Greeting is not a constructor</span></code></pre></div>\n<p>C’est un comportement volontaire qui procède de la conception des fonctions fléchées.  Un des principaux avantages des fonctions fléchées, c’est qu’elles <em>n’ont pas</em> leur propre valeur de <code class=\"language-text\">this</code>—à la place, <code class=\"language-text\">this</code> est résolu lexicalement, depuis la plus proche portée de fonction classique :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Friends</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token keyword\">const</span> friends <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> friends<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friend</span> <span class=\"token operator\">=></span>\n      <span class=\"token operator\">&lt;</span>Friend\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token comment\">// `this` est résolu depuis la méthode `render`</span></span><span class=\"gatsby-highlight-code-line\">        size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">}</span></span>        name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n        key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>OK, donc <strong>les fonctions fléchées n’ont pas leur propre <code class=\"language-text\">this</code>.</strong>  Mais ça veut dire qu’elles ne peuvent pas être des constructeurs !</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 🔴 Ça n’aurait aucun sens !</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>C’est pourquoi <strong>JavaScript interdit l’appel d’une fonction fléchée avec <code class=\"language-text\">new</code>.</strong>  Si vous le faites, c’est probablement une erreur de toutes façons, et il vaut mieux vous le dire tôt.  C’est comme lorsque JavaScript ne vous laisse pas appeler une classe <em>sans</em> <code class=\"language-text\">new</code>.</p>\n<p>Tout ça est bien joli mais ça fait échouer notre plan.  React ne peut pas juste appeler <code class=\"language-text\">new</code> sur tout parce que ça casserait les fonctions fléchées !  On pourrait essayer de détecter les fonctions fléchées spécifiquement grâce à leur manque de <code class=\"language-text\">prototype</code>, et ne pas appeler <code class=\"language-text\">new</code> sur elles :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// undefined</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// {constructor: f}</span></code></pre></div>\n<p>Mais ça <a href=\"https://github.com/facebook/react/issues/4599#issuecomment-136562930\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ne marcherait pas</a> pour les fonctions transpilées par Babel. Ça n’est peut-être pas un gros sujet, mais c’est une raison de plus qui fait que cette approche est une impasse.</p>\n<hr>\n<p>Une autre raison qui nous empêche d’utiliser systématiquement <code class=\"language-text\">new</code> : ça empêcherait React de permettre aux composants de renvoyer des chaînes de caractères ou d’autres types de primitives.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Bonjour'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 'Bonjour'</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 Greeting {}</span></code></pre></div>\n<p>C’est là aussi dû aux particularités de conception de l’<a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">opérateur <code class=\"language-text\">new</code></a>. Comme nous l’avons vu plus tôt, <code class=\"language-text\">new</code> dit au moteur JavaScript de créer un objet, en faire le <code class=\"language-text\">this</code> au sein de la fonction, et au final nous le renvoyer comme résultat de <code class=\"language-text\">new</code>.</p>\n<p>Seulement voilà, JavaScript permet aussi à une fonction appelée avec <code class=\"language-text\">new</code> de <em>remplacer</em> la valeur de retour de <code class=\"language-text\">new</code> en renvoyant un autre objet.  C’était apparemment considéré utile pour des besoins comme le recyclage d’instance (<em>pooling</em>) :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// Créé à la demande (“lazily”)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> zeroVector <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>zeroVector <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// Réutilise la même instance</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> zeroVector<span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n    zeroVector <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😲 b === c</span></span></code></pre></div>\n<p>Le hic, c’est que <code class=\"language-text\">new</code> va aussi <em>complètement ignorer</em> la valeur de retour de la fonction si ce n’est <em>pas</em> un objet.  Si vous renvoyez un littéral texte ou numérique, c’est comme si vous n’aviez écrit aucun <code class=\"language-text\">return</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 42</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Answer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 Answer {}</span></code></pre></div>\n<p>Il est tout simplement impossible de récupérer la valeur primitive de retour (telle qu’un nombre ou une chaîne) depuis une fonction appelée avec <code class=\"language-text\">new</code>.  Donc si React utilisait toujours <code class=\"language-text\">new</code>, il ne pourrait pas autoriser les composants à renvoyer des chaînes de caractères !</p>\n<p>C’est inacceptable, donc on a besoin de trouver un compromis.</p>\n<hr>\n<p>Bon, qu’a-t-on appris jusqu’ici ?  React a besoin d’appeler les classes (y compris celles transpilées par Babel) <em>avec</em> <code class=\"language-text\">new</code>, mais il doit aussi appeler les fonctions classiques ou fléchées (y compris celles transpilées par Babel) <em>sans</em> <code class=\"language-text\">new</code>.  Et il n’y a aucun moyen fiable de distinguer entre les deux.</p>\n<p><strong>Si on ne peut pas résoudre un problème général, peut-on en résoudre un plus spécifique ?</strong></p>\n<p>Quand vous définissez un composant comme classe, vous allez probablement étendre <code class=\"language-text\">React.Component</code>, afin de tirer parti des méthodes prédéfinies comme <code class=\"language-text\">this.setState()</code>.  <strong>Plutôt que d’essayer de détecter toutes les classes, peut-on seulement détecter les descendantes de <code class=\"language-text\">React.Component</code> ?</strong></p>\n<p><em>Spoiler</em> : c’est exactement ce que fait React.</p>\n<hr>\n<p>La manière idiomatique de vérifier si <code class=\"language-text\">Greeting</code> est une classe de composant React serait sans doute de tester si <code class=\"language-text\">Greeting.prototype instanceof React.Component</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span>prototype <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>Je sais ce que vous vous dites.  C’est quoi ce truc ?!  Pour répondre à ça, il nous faut comprendre le fonctionnement des prototypes en JavaScript.</p>\n<p>Vous avez peut-être entendu parler de la « chaîne de prototypes ».  Chaque objet en JavaScript est susceptible d’avoir un « prototype ».  Quand vous écrivez <code class=\"language-text\">fred.sayHi()</code> mais que <code class=\"language-text\">fred</code> est un objet qui n’a pas de propriété <code class=\"language-text\">sayHi</code>, on cherche cette propriété <code class=\"language-text\">sayHi</code> sur le prototype de <code class=\"language-text\">fred</code>.  Si on ne l’y trouve toujours pas, on cherche sur le prototype suivant dans la chaîne—le prototype du prototype de <code class=\"language-text\">fred</code>. Et ainsi de suite.</p>\n<p><strong>Histoire de rajouter à la confusion, la propriété <code class=\"language-text\">prototype</code> d’une classe ou d’une fonction <em>ne référence pas</em> le prototype de cette valeur.</strong> Sérieux.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🤪 Pas le prototype de Person</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😳 Le prototype de Person</span></code></pre></div>\n<p>Donc la « chaîne de prototypes » est en fait plutôt <code class=\"language-text\">__proto__.__proto__.__proto__</code> que <code class=\"language-text\">prototype.prototype.prototype</code>. Ça m’a pris des années pour comprendre ça.</p>\n<p>Que fait la propriété <code class=\"language-text\">prototype</code> d’une fonction ou classe, alors ? <strong>C’est le <code class=\"language-text\">__proto__</code> fourni à tous les objets instanciés avec <code class=\"language-text\">new</code> sur cette classe ou fonction !</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bonjour, je m’appelle '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> fred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Cale `fred.__proto__` sur `Person.prototype`</span></span></code></pre></div>\n<p>Et c’est le long de cette chaîne de <code class=\"language-text\">__proto__</code> que JavaScript recherche les propriétés :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">fred<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1. fred a-t-il une propriété sayHi ? Non.</span>\n<span class=\"token comment\">// 2. fred.__proto__ a-t-il une propriété sayHi ? Oui. Appelle-la !</span>\n\nfred<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1. fred a-t-il une propriété toString ? Non.</span>\n<span class=\"token comment\">// 2. fred.__proto__ a-t-il un propriété toString ? Non.</span>\n<span class=\"token comment\">// 3. fred.__proto__.__proto__ a-t-il une propriété toString ? Oui. Appelle-la !</span></code></pre></div>\n<p>En pratique, vous ne devriez pratiquement jamais manipuler <code class=\"language-text\">__proto__</code> directement dans votre code, sauf si vous êtes en train de déboguer un truc lié à la chaîne de prototypes.  Si vous souhaitez mettre un truc à disposition dans <code class=\"language-text\">fred.__proto__</code>, vous êtes censés le placer dans <code class=\"language-text\">Person.prototype</code>.  En tout cas, c’était l’idée de base.</p>\n<p>La propriété <code class=\"language-text\">__proto__</code> n’était même pas censée au départ être exposée  publiquement par les navigateurs, parce que la chaîne de prototypes était considérée comme un détail d’implémentation.  Mais certains navigateurs l’ont rendue publique et au final elle a fait l’objet d’une standardisation réticente (mais a ensuite été dépréciée au profit de <code class=\"language-text\">Object.getPrototypeOf()</code>).</p>\n<p><strong>Et pourtant je trouve toujours hallucinant qu’une propriété appelée <code class=\"language-text\">prototype</code> ne vous fournisse pas le prototype d’une valeur</strong> (par exemple, <code class=\"language-text\">fred.prototype</code> est indéfini parce que <code class=\"language-text\">fred</code> n’est pas une fonction).  Personnellement, je trouve que c’est la raison majeure pour laquelle même des développeurs expérimentés ont tendance à comprendre les prototypes JavaScript de travers.</p>\n<hr>\n<p>Il est long cet article, hein ? Je dirais qu’on est à 80% là.  Tenez le coup.</p>\n<!-- RESUME -->\n<p>On sait que lorsqu’on dit <code class=\"language-text\">obj.foo</code>, JavaScript examine en fait <code class=\"language-text\">obj.__proto__</code>, <code class=\"language-text\">obj.__proto__.__proto__</code>, et ainsi de suite.</p>\n<p>Avec les classes, on ne perçoit pas directement ce mécanisme, mais <code class=\"language-text\">extends</code> fonctionne aussi grâce à cette bonne vieille chaîne de prototypes.  C’est ainsi qu’une instance de classe React peut accéder à des méthodes comme <code class=\"language-text\">setState</code> :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Greeting.prototype</span>\n<span class=\"gatsby-highlight-code-line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// React.Component.prototype</span></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object.prototype</span>\n\nc<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Trouvé dans c.__proto__ (Greeting.prototype)</span>\n<span class=\"gatsby-highlight-code-line\">c<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Trouvé dans c.__proto__.__proto__ (React.Component.prototype)</span></span>c<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Trouvé dans c.__proto__.__proto__.__proto__ (Object.prototype)</span></code></pre></div>\n<p>En d’autres termes, <strong>quand vous utilisez des classes, la chaîne des <code class=\"language-text\">__proto__</code> d’une instance reflète la hiérarchie des classes :</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// chaîne des `extends`</span>\nGreeting\n  → React<span class=\"token punctuation\">.</span>Component\n    → <span class=\"token function\">Object</span> <span class=\"token punctuation\">(</span>implicitement<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// chaîne des `__proto__`</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  → <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype\n    → React<span class=\"token punctuation\">.</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype\n      → <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype</code></pre></div>\n<p>2 Chainz.</p>\n<hr>\n<p>Puisque la chaîne des <code class=\"language-text\">__proto__</code> reflète la hiérarchie des classes, nous pouvons vérifier si <code class=\"language-text\">Greeting</code> étend <code class=\"language-text\">React.Component</code> en commençant avec <code class=\"language-text\">Greeting.prototype</code>, puis en remontant le long de la chaîne des <code class=\"language-text\">__proto__</code> :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// chaîne des `__proto__`</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  → <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// 🕵️ On commence ici</span></span><span class=\"gatsby-highlight-code-line\">    → React<span class=\"token punctuation\">.</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// ✅ Trouvé !</span></span>      → <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype</code></pre></div>\n<p>Et devinez quoi, <code class=\"language-text\">x instanceof Y</code> fait exactement ce type de recherche.  Il suit la chaîne démarrant avec <code class=\"language-text\">x.__proto__</code> à la recherche de <code class=\"language-text\">Y.prototype</code>.</p>\n<p>D’habitude, on utilise ça pour déterminer si un objet est une instance d’une classe donnée :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// greeting (🕵️‍ On commence ici)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype (✅ Trouvé !)</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// greeting (🕵️‍ On commence ici)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype (✅ Trouvé !)</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// greeting (🕵️‍ On commence ici)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype (✅ Trouvé !)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Banana</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// greeting (🕵️‍ On commence ici)</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype (🙅‍ Pas trouvé !)</span></code></pre></div>\n<p>Mais ça marcherait tout aussi bien pour déterminer si une classe en étend une autre :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// greeting</span>\n<span class=\"token comment\">//   .__proto__ → Greeting.prototype (🕵️‍ On commence ici)</span>\n<span class=\"token comment\">//     .__proto__ → React.Component.prototype (✅ Trouvé !)</span>\n<span class=\"token comment\">//       .__proto__ → Object.prototype</span></code></pre></div>\n<p>Et voilà comment on pourrait déterminer si quelque chose est une classe de composant React ou une fonction classique.</p>\n<hr>\n<p>Mais ce n’est pas ce que fait React. 😳</p>\n<p>Un des pièges de la solution à base d’<code class=\"language-text\">instanceof</code>, c’est qu’elle ne marche pas lorsqu’on a de multiples copies de React dans la page, et que le composant qu’on examine hérite du <code class=\"language-text\">React.Component</code> provenant d’une <em>autre</em> copie de React.  Avoir plusieurs copies de React dans un même projet est une mauvaise idée pour plusieurs raisons, mais historiquement nous avons essayé d’éviter, autant que possible, que ça pose problème. (Ceci dit, avec les Hooks, on <a href=\"https://github.com/facebook/react/issues/13991\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">devra peut-être</a> exiger l’unicité.)</p>\n<p>Une autre heuristique possible serait de vérifier si une méthode <code class=\"language-text\">render</code> est présente sur le prototype.  Toutefois, à l’époque on <a href=\"https://github.com/facebook/react/issues/4599#issuecomment-129714112\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">n’était pas sûrs</a> de la façon dont l’API évoluerait.  Chaque vérification entraîne un coût, on ne voulait pas avoir à en faire plusieurs.  Par ailleurs, ça ne marcherait pas non plus si <code class=\"language-text\">render</code> était définie comme méthode sur l’instance, avec la syntaxe des initialiseurs de champs par exemple.</p>\n<p>De sorte qu’à la place, React <a href=\"https://github.com/facebook/react/pull/4663\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a ajouté</a> un drapeau spécial sur le composant de base.  React vérifie la présence de ce drapeau, et c’est comme ça qu’il sait si il a affaire à une classe de composant React ou non.</p>\n<p>Au début le drapeau était défini sur la classe de base <code class=\"language-text\">React.Component</code> elle-même :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Dans React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nComponent<span class=\"token punctuation\">.</span>isReactClass <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// On peut le vérifier comme ceci</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Greeting<span class=\"token punctuation\">.</span>isReactClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Oui</span></code></pre></div>\n<p>Seulement voilà, certaines implémentations de classes que nous voulions permettre <a href=\"https://github.com/scala-js/scala-js/issues/1900\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ne copiaient pas</a> les propriétés statiques (ou ne définissaient pas la propriété non standard <code class=\"language-text\">__proto__</code>), de sorte que le drapeau disparaissait.</p>\n<p>C’est pourquoi React <a href=\"https://github.com/facebook/react/pull/5021\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a déplacé</a> ce drapeau vers <code class=\"language-text\">React.Component.prototype</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Dans React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Component</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// On peut le vérifier comme ceci</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>isReactComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ Oui</span></code></pre></div>\n<p><strong>Et c’est littéralement tout ce qu’on a besoin de faire.</strong></p>\n<p>Vous vous demandez peut-être pourquoi c’est un objet, et pas juste un booléen.  En pratique ça n’a pas beaucoup d’importance, mais les premières versions de Jest (avant que Jest soit Bien™) avait l’<em>automocking</em> activé par défaut.  Les mocks générés laissaient de côté les propriétés primitives, <a href=\"https://github.com/facebook/react/pull/4663#issuecomment-136533373\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ce qui pétait notre vérification</a>. Merci Jest.</p>\n<p>La vérification de <code class=\"language-text\">isReactComponent</code> reste <a href=\"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/react-reconciler/src/ReactFiber.js#L297-L300\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">utilisée par React</a> jusqu’à ce jour.</p>\n<p>Si vous n’étendez pas <code class=\"language-text\">React.Component</code>, React ne trouvera pas <code class=\"language-text\">isReactComponent</code> sur le prototype et ne traitera pas le composant comme une classe.  Maintenant vous savez pourquoi <a href=\"https://stackoverflow.com/a/42680526/458193\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">la réponse la plus populaire</a> à l’erreur <code class=\"language-text\">Cannot call a class as a function</code> consiste à ajouter <code class=\"language-text\">extends React.Component</code>. Pour finir, un <a href=\"https://github.com/facebook/react/pull/11168\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">avertissement a été ajouté</a> si <code class=\"language-text\">prototype.render</code> existe mais que <code class=\"language-text\">prototype.isReactComponent</code> est manquant.</p>\n<hr>\n<p>Vous trouvez peut-être que le titre de cet article était un leurre grossier. <strong>La solution réelle est super simple, mais je suis parti sur une tangente de fou pour vous expliquer <em>pourquoi</em> React a fini par opter pour cette solution, et quelles étaient les alternatives.</strong></p>\n<p>D’après ma propre expérience, c’est souvent le cas avec les APIs de bibliothèques.  Pour qu’une API soit facile à utiliser, on doit souvent considérer la sémantique du langage (voire, pour plusieurs langages, leurs évolutions à venir), la performance d’exécution, l’ergonomie avec ou sans étapes de transpilation, l’état de l’écosystème et des solutions de <em>packaging</em>, la capacité à produire des avertissements le plus en amont possible, et bien d’autres facteurs.  Le résultat final n’est pas toujours le plus élégant, mais doit être le plus pratique.</p>\n<p><strong>Si l’API finale a du succès, <em>ses utilisateurs</em> n’auront jamais à penser à ce processus.</strong>  Ils peuvent ainsi se concentrer plutôt sur la création de leurs applications.</p>\n<p>Mais si vous êtes par ailleurs curieux·se… c’est sympa de savoir comment ça marche sous le capot.</p>","timeToRead":18,"frontmatter":{"title":"Comment React distingue-t-il entre Classes et Fonctions ?","date":"December 02, 2018","spoiler":"Où nous parlons de classes, new, instanceof, des chaînes de prototypes et de la conception d’API.","cta":null},"fields":{"slug":"/fr/how-does-react-tell-a-class-from-a-function/","langKey":"fr"}}},"pageContext":{"slug":"/fr/how-does-react-tell-a-class-from-a-function/","translations":["es","fr","hu","ja","nl","pt-br","sk","zh-hans","zh-hant"],"translatedLinks":["/why-do-we-write-super-props/"]}}}