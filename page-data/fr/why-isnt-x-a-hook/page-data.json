{"componentChunkName":"component---src-templates-blog-post-js","path":"/fr/why-isnt-x-a-hook/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"a6f73542-e2d8-50f2-8bf4-ec448f9529c5","html":"<p>Depuis la sortie de la première version alpha des <a href=\"https://reactjs.org/hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks React</a>, une question revient souvent dans les discussions : « Pourqoi est-ce que <em>&#x3C;telle ou telle API></em> n’est pas un Hook ? »</p>\n<p>À titre de rappel, voici quelques trucs qui <em>sont</em> des Hooks :</p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useState()</code></a> permet de déclarer une variable d’état.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useEffect()</code></a> permet de déclarer un effet de bord.</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useContext()</code></a> permet de lire des données issues du Contexte.</li>\n</ul>\n<p>Mais il y a d’autres APIs, telles que <code class=\"language-text\">React.memo()</code> et <code class=\"language-text\">&lt;Context.Provider&gt;</code>, qui ne sont <em>pas</em> des Hooks. Les propositions les plus courantes pour en faire des Hooks s’avèrent toujours <em>impossibles à composer</em> ou <em>anti-modulaires</em>. Cet article devrait vous aider à comprendre pourquoi.</p>\n<p><strong>Note : cet article est une exploration en profondeur pour les gens qui aiment discuter d’APIs.  Vous n’avez pas besoin de penser à tout ça pour être efficace avec React !</strong></p>\n<hr>\n<p>Nous voulons que les APIs React préservent deux propriétés importantes :</p>\n<ol>\n<li><strong>Composition :</strong> <a href=\"https://reactjs.org/docs/hooks-custom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">les Hooks personnalisés</a> sont la principale raison de notre enthousiasme pour l’API des Hooks.  Nous nous attendons à ce que les gens créent fréquemment leurs propres Hooks, et nous voulons nous assurer que les Hooks écrits par différentes personnes <a href=\"/why-do-hooks-rely-on-call-order/#flaw-4-the-diamond-problem\">ne rentrent pas en conflit</a>. (Vous trouvez pas qu’on est pourris gâtés par la façon dont les composants se composent proprement et ne se cassent pas l’un l’autre ?)</li>\n<li><strong>Débogage :</strong> Nous voulons que les bugs soients <a href=\"/the-bug-o-notation/\">faciles à repérer</a> alors que l’application grandit.  Un des meilleurs aspects de React, c’est que lorsqu’on remarque un problème dans le rendu, il suffit de remonter l’arborescence des composants jusqu’à trouver dans quel composant une <em>prop</em> ou l’état local a causé l’erreur.</li>\n</ol>\n<p>Prises ensemble, ces deux contraintes nous disent ce qui peut et <em>ne peut pas</em> être un Hook.  Essayons ça sur quelques exemples.</p>\n<hr>\n<h2 id=\"un-véritable-hook--usestate\"><a href=\"#un-v%C3%A9ritable-hook--usestate\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Un véritable Hook : <code class=\"language-text\">useState()</code></h2>\n<h3 id=\"composition\"><a href=\"#composition\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composition</h3>\n<p>Si plusieurs Hooks personnalisés appellent chacun <code class=\"language-text\">useState()</code>, ça ne crée pas de conflit :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Ce qui se passe ici, ça reste ici.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Ce qui se passe ici, ça reste ici.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useMyCustomHook1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useMyCustomHook2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ajouter un nouvel appel inconditionnel à <code class=\"language-text\">useState()</code> est toujours sans risque.  Pas besoin de savoir quoi que ce soit sur les autres Hooks qu’utiliserait un composant quand on déclare une nouvelle variable d’état.  Il est juste impossible de casser les autres variables d’état lorsqu’on en met une à jour.</p>\n<p><strong>Verdict :</strong> ✅ <code class=\"language-text\">useState()</code> ne fragilise pas les Hooks personnalisés.</p>\n<h3 id=\"débogage\"><a href=\"#d%C3%A9bogage\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Débogage</h3>\n<p>Un des gros avantages des Hooks, c’est qu’ils peuvent se refiler des valeurs <em>entre eux</em> :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isMobile</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">const</span> isMobile <span class=\"token operator\">=</span> width <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MOBILE_VIEWPORT</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span>isMobile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mais que se passe-t-il si on commet une erreur ? À quoi ressemble le débogage ?</p>\n<p>Imaginons que la classe CSS qu’on récupère dans <code class=\"language-text\">theme.comment</code> soit erronée.  Comment déboguerait-on ça ?  On peut poser un point d’arrêt ou ajouter quelques appels de log dans le corps de notre composant.</p>\n<p>Peut-être que nous verrions que <code class=\"language-text\">theme</code> n’est pas le bon mais que <code class=\"language-text\">width</code> et <code class=\"language-text\">isMobile</code> sont corrects.  Ça nous dirait que le problème vient de <code class=\"language-text\">useTheme()</code>.  Ou peut-être verrions-nous que <code class=\"language-text\">width</code> lui-même est faussé, ce qui nous orienterait vers <code class=\"language-text\">useWindowWidth()</code>.</p>\n<p><strong>Un simple coup d’œil aux valeurs intermédiaires nous dirait lequel de nos Hooks, définis au niveau racine, est à l’origine du bug.</strong>  On n’a pas besoin d’aller fouiller dans <em>toutes</em> les implémentations.</p>\n<p>Alors seulement on pourra « zoomer » sur le code du hook qui a un bug, et reprendre notre débogage.</p>\n<p>Ce point devient critique si la profondeur d’imbrication de nos Hooks personnalisés augmente.  Imaginez que nous ayons 3 niveaux d’imbrication de nos Hooks personnalisés, chacun utilisant 3 Hooks personnalisés distincts.  La <a href=\"/the-bug-o-notation/\">différence</a> entre chercher un bug à <strong>3 endroits</strong> au lieu de potentiellement vérifier <strong>3 + 3×3 + 3×3×3 = 39 endroits</strong> est énorme. Heureusement, <code class=\"language-text\">useState()</code> ne peut pas « influencer » par magie les autres Hooks ou composants.  S’il renvoie une valeur défectueuse, ça laisse une piste qu’on peut remonter, comme pour n’importe quelle variable. 🐛</p>\n<p><strong>Verdict :</strong> ✅ <code class=\"language-text\">useState()</code> ne masque pas la relation de cause à effet dans notre code.  On peut remonter la piste directement jusqu’à l’origine du bug.</p>\n<hr>\n<h2 id=\"pas-un-hook--usebailout\"><a href=\"#pas-un-hook--usebailout\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pas un Hook : <code class=\"language-text\">useBailout()</code></h2>\n<p>Pour des raisons d’optimisation, les composants utilisant des Hooks peuvent choisir de sauter un nouveau rendu.</p>\n<p>Une des manières d’y parvenir consiste à enrober le composant complet par un <a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html#reactmemo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">React.memo()</code></a>.  Ça fait automatiquement l’impasse sur le rendu si les <em>props</em> sont identiques en surface avec celles du rendu précédent.  C’est similaire au recours à <code class=\"language-text\">PureComponent</code> pour les classes.</p>\n<p><code class=\"language-text\">React.memo()</code> prend un composant et renvoie un composant :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p><strong>Mais pourquoi ne pas en faire plutôt un Hook ?</strong></p>\n<p>Les proposition dans ce sens, qu’elles l’appellent <code class=\"language-text\">useShouldComponentUpdate()</code>, <code class=\"language-text\">usePure()</code>, <code class=\"language-text\">useSkipRender()</code>, ou <code class=\"language-text\">useBailout()</code>, ont tendance à ressembler à ceci :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> color <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ⚠️ Cette API n’existe pas</span>\n  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevColor</span> <span class=\"token operator\">=></span> prevColor <span class=\"token operator\">!==</span> color<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'button-'</span> <span class=\"token operator\">+</span> color<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      OK\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>On trouve quelques variations supplémentaires (par ex. un simple marqueur <code class=\"language-text\">usePure()</code>), mais dans les grandes lignes toutes partagent les mêmes failles.</p>\n<h3 id=\"composition-1\"><a href=\"#composition-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composition</h3>\n<p>Imaginons que nous essayions d’utiliser <code class=\"language-text\">useBailout()</code> dans deux Hooks personnalisés :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">friendID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ Cette API n’existe pas</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevIsOnline</span> <span class=\"token operator\">=></span> prevIsOnline <span class=\"token operator\">!==</span> isOnline<span class=\"token punctuation\">,</span> isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleStatusChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">status</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isOnline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// ⚠️ Cette API n’existe pas</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useBailout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevWidth</span> <span class=\"token operator\">=></span> prevWidth <span class=\"token operator\">!==</span> width<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleResize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Voyons maintenant ce qui se passe si on utilise les deux dans le même composant :</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'En train d’écrire…'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quand est-ce que ça refait un rendu ?</p>\n<p>Si chaque appel à <code class=\"language-text\">useBailout()</code> a le pouvoir de sauter la mise à jour, alors les mises à jour de <code class=\"language-text\">useWindowWidth()</code> seraient bloquées par <code class=\"language-text\">useFriendStatus()</code>, et réciproquement. <strong>Ces Hooks se casseraient l’un l’autre.</strong></p>\n<p>Inversement, si <code class=\"language-text\">useBailout()</code> n’était pris en compte que lorsque <em>tous</em> ses appels au sein de ce composant « sont d’accord » pour bloquer une mise à jour, notre <code class=\"language-text\">ChatThread</code> ne se mettrait pas à jour lorsque la <em>prop</em> <code class=\"language-text\">isTyping</code> change.</p>\n<p>Pire encore : avec cette sémantique <strong>n’importe quel Hook ajouté à <code class=\"language-text\">ChatThread</code> pourrait casser s’il n’appelle pas <em>aussi</em> <code class=\"language-text\">useBailout()</code></strong>.  Parce que dans le cas contraire, il ne pourrait pas « voter contre » la décision de sauter le rendu faite par <code class=\"language-text\">useWindowWidth()</code> et <code class=\"language-text\">useFriendStatus()</code>.</p>\n<p><strong>Verdict :</strong> 🔴 <code class=\"language-text\">useBailout()</code> enfreint la composition.  L’ajouter dans un Hook casse les mises à jour d’état dans les autres Hooks.  Nous voulons des APIs qui sont <a href=\"/optimized-for-change/\">anti-fragiles</a>, et ce comportement en est pratiquement l’opposé.</p>\n<h3 id=\"débogage-1\"><a href=\"#d%C3%A9bogage-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Débogage</h3>\n<p>Comment un Hook comme <code class=\"language-text\">useBailout()</code> impacterait-il le débogage ?</p>\n<p>Voyons ça sur le même exemple :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ChatThread</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> friendID<span class=\"token punctuation\">,</span> isTyping <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isOnline <span class=\"token operator\">=</span> <span class=\"token function\">useFriendStatus</span><span class=\"token punctuation\">(</span>friendID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChatLayout</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FriendStatus</span></span> <span class=\"token attr-name\">isOnline</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOnline<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isTyping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'En train d’écrire…'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ChatLayout</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Imaginons que le libellé <code class=\"language-text\">En train d’écrire…</code> n’apparaisse pas quand on s’y attend, alors même que, quelque part plus haut dans l’arbre, la <em>prop</em> a changé.  Comment déboguer ça ?</p>\n<p><strong>Normalement, avec React on peut répondre en confiance à cette question en regardant <em>plus haut</em>.</strong>  Si <code class=\"language-text\">ChatThread</code> n’a pas reçu une nouvelle valeur pour <code class=\"language-text\">isTyping</code>, on peut ouvrir le composant qui fait le rendu de <code class=\"language-text\">&lt;ChatThread isTyping={myVar} /&gt;</code> et vérifier <code class=\"language-text\">myVar</code>, et ainsi de suite.  Dans l’un de ces niveaux, nous trouverons soit un bug d’optimisation dans <code class=\"language-text\">shouldComponentUpdate()</code>, soit une valeur incorrecte de <code class=\"language-text\">isTyping</code> qui se retrouve transmise plus bas.  Jeter un œil à chaque composant de la chaîne suffit généralement à repérer l’origine du problème.</p>\n<p>En revanche, si le Hook <code class=\"language-text\">useBailout()</code> existait, on ne pourrait jamais connaître la raison du saut d’un rendu tant qu’on n’aurait pas examiné <em>la totalité des Hooks personnalisés</em> (en profondeur qui plus est) utilisés par notre <code class=\"language-text\">ChatThread</code> et les composants de sa propre chaîne de parents.  Dans la mesure où chaque composant parent peut <em>aussi</em> avoir ses propres Hooks personnalisés, ça <a href=\"/the-bug-o-notation/\">monte très mal en complexité</a>.</p>\n<p>Ça revient à chercher un tournevis dans une armoire à tiroirs, où chaque tiroir contiendrait un tas d’autres petites armoires à tiroirs, et on n’a aucune idée de jusqu’à quel niveau de profondeur on va devoir aller.</p>\n<p><strong>Verdict :</strong> 🔴 Non seulement <code class=\"language-text\">useBailout()</code> enfreint la composition, mais il augmente aussi de beaucoup le nombre d’étapes de débogage et la charge mentale nécessaires pour trouver la cause d’un saut incorrect de rendu—une augmentation parfois exponentielle.</p>\n<hr>\n<p>Nous venons d’examiner un Hook existant, <code class=\"language-text\">useState()</code>, et un Hook fréquemment suggéré mais volontairement indisponible, <code class=\"language-text\">useBailout()</code>.  Nous les avons comparés au regard de la Composition et du Débogage, et discuté des raisons qui font que l’un fonctionne et l’autre non.</p>\n<p>Même s’il n’y a pas de « version Hook » de <code class=\"language-text\">memo()</code> et <code class=\"language-text\">shouldComponentUpdate()</code>, React <em>fournit bien</em> un Hook appelé <a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useMemo()</code></a>.  Son objectif a bien un rapport, mais la sémantique des deux est suffisamment différente pour qu’on ne tombe pas dans les pièges détaillés plus haut.</p>\n<p><code class=\"language-text\">useBailout()</code> n’est qu’un exemple d’un service qui ne pourrait pas bien fonctionner en tant que Hook. Mais il y en a d’autres—par exemple <code class=\"language-text\">useProvider()</code>, <code class=\"language-text\">useCatch()</code>, ou <code class=\"language-text\">useSuspense()</code>.</p>\n<p>Pouvez-vous deviner pourquoi ?</p>\n<p><em>(Chuchotement : Composition… Débogage…)</em></p>","timeToRead":9,"frontmatter":{"title":"Pourquoi X n’est-il pas un hook ?","date":"January 26, 2019","spoiler":"C’est pas parce qu’on peut qu’on devrait.","cta":null},"fields":{"slug":"/fr/why-isnt-x-a-hook/","langKey":"fr"}}},"pageContext":{"slug":"/fr/why-isnt-x-a-hook/","translations":["de","es","fr","it","ko","pt-br","zh-hans"],"translatedLinks":[]}}}