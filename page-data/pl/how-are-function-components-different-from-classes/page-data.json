{"componentChunkName":"component---src-templates-blog-post-js","path":"/pl/how-are-function-components-different-from-classes/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"c0d85762-c507-5ff5-9fe7-8df8393e8020","html":"<p>Czym różnią się Reactowe funkcyjne komponenty od tych klasowych?</p>\n<p>Przez jakiś czas, podstawową odpowiedzią na to pytanie było, że klasy dają dostęp do większej ilości funkcjonalności (na przykład do state’u). Od momentu pojawienia się <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooków</a>, nie stanowi to argumentu.</p>\n<p>Być może słyszałeś że któryś z komponentów jest lepszy od drugiego pod względem wydajności. Który właściwie? Wiele mających to wyjaśnić testów zostało <a href=\"https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f?source=your_stories_page---------------------------\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">źle</a> przeprowadzonych, więc byłbym uważny z <a href=\"https://github.com/ryardley/hooks-perf-issues/pull/2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wyciąganiem z nich wniosków </a>. Wydajność zależy przede wszystkim od tego co robi kod, a nie od tego czy wybierze się funkcję czy klasę. Z naszych obserwacji wynika, że różnice w wydajności są pomijalne, pomimo tego, że strategie optymalizacyjne są trochę <a href=\"https://reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">inne</a>.</p>\n<p>W każdym razie <a href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-hooks-classes-or-a-mix-of-both\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nie polecamy</a> Ci przepisywania istniejących komponentów, jeżeli nie posiadasz naprawdę istotnych powodów oraz nie przeszkadza Ci bycie early-adaopterem. Hooki to wciąż nowe zagadanienie (tak samo jak React był w 2014 roku) i pewne “dobre praktyki” nie zostały jeszcze zaprezentowane w tutorialach.</p>\n<p>Na czym więc stoimy? Czy są w ogóle jakieś fundamentalne różnice pomiędzy React’owymi fukcjami a klasami? Jasne że tak - w modelu mentalnym. <strong>W tym wpisie przyjrzę się podstawowej różnicy między nimi.</strong> Istniała ona od momentu <a href=\"https://reactjs.org/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wprowadzenia</a> komponentów funkcyjnych w 2015 roku, ale zwykle była omijana:</p>\n<blockquote>\n<p><strong>Funkcyjne komponenty przejmują wyrenderowane wartości.</strong></p>\n</blockquote>\n<p>Przyjrzyjmy się bliżej co to oznacza.</p>\n<hr>\n<p><strong>UWAGA: ten post nie jest w żaden sposób sądem wartościującym na klasach czy funkcjach. Opisuję jedynie różnicę pomiędzy dwoma modelami programistycznymi w React’cie. W przypadku pytań o to jak szerzej zastosować funkcję zapraszam do <a href=\"https://reactjs.org/docs/hooks-faq.html#adoption-strategy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks FAQ</a>.</strong></p>\n<hr>\n<p>Rozważmy taki komponent:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProfilePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pokazuje on button który symuluje zapytanie przez użycie <code class=\"language-text\">setTimeout</code> a następnie pokazuje alert z potwierdzeniem. Przykładowo jeżeli <code class=\"language-text\">props.user</code> to <code class=\"language-text\">&#39;Dan&#39;</code>, komponent pokaże <code class=\"language-text\">&#39;Followed Dan&#39;</code> po trzech sekundach. No i tyle.</p>\n<p><em>(Zauważ, że w przykładzie powyżej nie ma znaczenia czy użyję funkcji strzałkowej czy deklaracji funkcji. <code class=\"language-text\">function handleClick()</code> zadziałałoby identycznie).</em></p>\n<p>Jak byśmy to napisali jako klasę? Tłumacząc to w sposób naiwny mogłoby to wyglądać tak:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Powszechnie uważa się, że te dwa fragmenty kodu są sobie równe. Ludzie często po prostu refaktorują z jednego sposobu na drugi nie dostrzegając jakie to niesie konsekwencje:</p>\n<p><img src=\"/1d3c7a341ee3fcadc79df00e7d872e4b/wtf.gif\" alt=\"Zauważ różnicę pomiędzy tymi dwoma fragmentami kodu\"></p>\n<p><strong>Jest jednak pewna delikatna różnica pomiędzy tymi dwoma fragmentami kodu.</strong> Przyjrzyj się im dobrze. Czy już ją widzisz? Mi osobiście zajęło chwilę żeby to dostrzec.</p>\n<p><strong>Jeżeli chcesz pogłówkować sam, zatrzymaj się przy <a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">live demo</a>. Dalej pokazane są spoilery, które mogłyby Ci w tym przeszkodzić.</strong> Dalsza część artykułu wyjaśnia wcześniej wspomnianą różnicę oraz pokazuje, dlaczego jest ona istotna.</p>\n<hr>\n<p>Zanim przejdziemy dalej, chciałbym podkreślić że różnica, którą opisuję nie jest jako tako powiązana z Hookami. Przykłady które pokazuję nawet ich nie używają!</p>\n<p>Chodzi tylko o różnicę pomiędzy funkcjami a klasami w React’cie. Jeżeli planujesz częstsze używanie funkcji w React’cie to możesz chcieć je zrozumieć.</p>\n<hr>\n<p><strong>Zaprezentujemy tę różnicę poprzez wskazanie częstego bug’u w Reactowych aplikacjach.</strong></p>\n<p>Otwórz <strong><a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">przykładowy sandbox</a></strong> z aktualnym profile-selectorem oraz dwoma powyższymi implementacjami <code class=\"language-text\">ProfilePage</code> - każdy renderuje przycisk Follow.</p>\n<p>Wypróbuj poniższą sekwencję naciskając raz jeden przycisk raz drugi:</p>\n<ol>\n<li><strong>Naciśnij</strong> jeden z przycisków Follow.</li>\n<li><strong>Zmień</strong> profil zanim miną 3 sekundy.</li>\n<li><strong>Przeczytaj</strong> tekst z alertu.</li>\n</ol>\n<p>Zauważysz osobliwą różnicę:</p>\n<ul>\n<li>Kiedy <code class=\"language-text\">ProfilePage</code> jest <strong>funkcją</strong>, kliknięcie Follow na profilu Dan a następnie zmiana na profil Sophie wywoła wyświetlenie spodziewanego alertu <code class=\"language-text\">&#39;Followed Dan&#39;</code></li>\n<li>Kiedy <code class=\"language-text\">ProfilePage</code> jest <strong>klasą</strong>, będzie to alert z <code class=\"language-text\">&#39;Followed Sophie&#39;</code></li>\n</ul>\n<p><img src=\"/386a449110202d5140d67336a0ade5a0/bug.gif\" alt=\"Demonstracja kroków\"></p>\n<hr>\n<p>W tym przykładzie pierwsze zachowanie jest poprawne. <strong>Jeżeli zaczynam kogoś obserwować (follow) a następnie zmienię profil na inny, komponent nie powinien mieć problemu z tym kogo zacząłem obserwować.</strong> Jest jasne, że implementacja z wykorzystaniem klasy ma błędy.</p>\n<p><em>(Tak czy inaczej, absolutnie powinniście zacząć <a href=\"https://mobile.twitter.com/sophiebits\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">obserwować Sophie</a>.)</em></p>\n<hr>\n<p>Więc dlaczego nasz przykład z klasą tak się zachowuje?</p>\n<p>Przyjrzyjmy się bliżej metodzie <code class=\"language-text\">showMessage</code> w naszej klasie:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ta metoda z klasy czyta z <code class=\"language-text\">this.props.user</code>. Propsy są niemutowanlne w React’cie więc nie nigdy nie ulegają zmianie. <strong>Ale <code class=\"language-text\">this</code> <em>jest</em> i zawsze był mutowalny.</strong></p>\n<p>Faktycznie, taki jest przecież cel istnienia <code class=\"language-text\">this</code> w klasie. React ciągle przeprowadza tę mutację, żebyś mógłby mieć jego świeżą wersje w <code class=\"language-text\">renderze</code> i metodach lifecycle.</p>\n<p>Więc jeżeli komponent się rerenderuje, podczas gdy w zapytanie jest jeszcze w trakcie, to <code class=\"language-text\">this.props</code> się zmieni. <code class=\"language-text\">showMessage</code> czyta z <code class=\"language-text\">user</code> z niewłaściwego, “zbyt nowego“ <code class=\"language-text\">props</code>.</p>\n<p>To uwidacznia ciekawą obserwacje dotyczącą natury interfejsów użytkownika. Jeżeli założymy, że UI jest funkcją aktualnego stanu aplikacji, <strong>to obsługa zdarzeń również jest częścią wyniku renderowania - tak samo jak wynik wizualny.</strong> Nasza obsługa zdarzeń “należy“ do konkretnego cyklu renderowania z konkretnymi propsami i statem.</p>\n<p>Jednak użycie timeouta którego funkcja wywołania zwrotnego czyta z <code class=\"language-text\">this.props</code> niszczy to połączenie. Nasza funkcja wywołania zwrotnego <code class=\"language-text\">showMessage</code> nie jest “połączona“ z żadnym renderem, dlatego “traci“ poprawny props. Czytanie z <code class=\"language-text\">this</code> niszczy to połączenie.</p>\n<hr>\n<p><strong>Wyobraźmy sobie, że funkcyjne komponenty nie istnieją.</strong> Jak rozwiązalibyśmy ten problem?</p>\n<p>Chcielibyśmy w jakiś sposób “naprawić“ połącznie między <code class=\"language-text\">renderem</code> z właściwymi propsami a funkcja wywołania zwrotnego <code class=\"language-text\">showMessage</code> która je czyta. Gdzieś po drodze te <code class=\"language-text\">propsy</code> się gubią.</p>\n<p>Jednym ze sposobów byłoby zczytanie <code class=\"language-text\">this.props</code> wcześniej a następnie przesłanie ich jawnie do funkcji callbacku w timeout’cie:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></span>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I to <a href=\"https://codesandbox.io/s/3q737pw8lq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">działa</a>. Jednakże to podejście powoduje że kod z czasem staje się zdecydowanie bardziej rozwlekły i podatny na błędy. Co jeżeli potrzebowalibyśmy więcej niż jeden prop? Co jeżeli musielibyśmy dostać się też do state’u? <strong>Jeżeli <code class=\"language-text\">showMessage</code> zawoła inną metodę, a ta metoda znowu zczyta <code class=\"language-text\">this.props.something</code> albo <code class=\"language-text\">this.state.something</code>, będziemy mieć ponownie ten sam problem.</strong> Więc musielibyśmy przesłać <code class=\"language-text\">this.props</code> i <code class=\"language-text\">this.state</code> jako argumenty do każdej metody wywoływanej z <code class=\"language-text\">showMessage</code>.</p>\n<p>Robienie tego w taki sposób pozbawia klasy ergonomii użytkowania którą normalnie byśmy mieli. Jest to też trudne do zapamiętania czy wymuszenia, przez co w zamian ludzie zwykle wolą przystawać na bugi.</p>\n<p>Podobnie umieszczenie kodu <code class=\"language-text\">alertu</code> wewnątrz <code class=\"language-text\">handleClick</code> nie rozwiązałoby większego problemu. Chcemy tak strukturyzować kod, żeby można go było dzielić na więcej metod, <em>ale</em> chcemy też mieć możliwość czytania z propsów i state’u które odnoszą się do tego konkretnego renderu który został wywołany. <strong>Ten problem nie jest w żadnej sposób wyjątkowy dla Reacta - to samo może zreprodukować w każdej innej bibilotece do UI która trzyma dane w mutowalnych strukturach jak <code class=\"language-text\">this</code>.</strong></p>\n<p>Może moglibyśmy <em>zbindować</em> metody w konstruktorze?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Niestety, nie naprawia to niczego. Pamiętaj, że problem polega na tym, że czytamy z <code class=\"language-text\">this.props</code> za późno - a nie na tym jakiego syntaxu używamy! <strong>Jednak problem by zniknął gdybyśmy w pełni polegali na JavaScriptowych domknięciach.</strong></p>\n<p>Domknięcia są często unikane przez to, że <a href=\"https://wsvincent.com/javascript-closure-settimeout-for-loop/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ciężko</a> się myśli o wartościach które z czasem są zmieniane. Ale w React’cie propsy i state’y są niemutowalne! (A przynajmniej jest to zdecydowanie rekomendowane.) To eliminuje dużą bolączkę związaną z używaniem domknięć.</p>\n<p>To oznacza, że jeżeli zrobisz domknięcie na propsach i state’cie w jakimś konkretnym renderze to możesz zawsze polegać na tym, że zostaną one tak jak były:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfilePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// Capture the props!</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span></span>\n    <span class=\"token comment\">// Note: we are *inside render*.</span>\n    <span class=\"token comment\">// These aren't class methods.</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Właśnie “złapałeś“ propsy na czas renderu:</strong></p>\n<p><img src=\"/fa483dd5699aac1350c57591770a49be/pokemon.gif\" alt=\"Łapanie Pokemona\"></p>\n<p>W ten sposób jakikolwiek kod wewnątrz (włączając w to <code class=\"language-text\">showMessage</code>) ma gwarancję, że zobaczy prosy dla tego konkretnego renderu. React nie “przestawia nam już rzeczy“.</p>\n<p><strong>Moglibyśmy dodać tyle pomocnicznych funkcji ile chcemy i używałyby one uchwyconych propsów i state’u.</strong> Domknięcia na ratunek!</p>\n<hr>\n<p><a href=\"https://codesandbox.io/s/oqxy9m7om5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Powyższy przykład</a> jest poprawny ale wygląda dziwnie. Jaki jest cel posiadania klasy, jeżeli wewnątrz <code class=\"language-text\">renderu</code>definiujemy funkcje zamiast używać metod klasy?</p>\n<p>Rzeczywiście, możemy uprościć kod usuwając “warstwę“ z klasą:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProfilePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tak jak powyżej, <code class=\"language-text\">propsy</code> wciąż są łapane - React przekazuje je jako argument. <strong>Inaczej niż w przypadku <code class=\"language-text\">this</code>, objekt <code class=\"language-text\">props</code> nigdy nie jest mutowany przez Reacta.</strong></p>\n<p>Staje się to trochę bardziej oczywiste kiedy zdestrukturyzujemy <code class=\"language-text\">props</code> podczas definicji funkcji:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">ProfilePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Followed '</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Follow</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kiedy komponent rodzic renderuje <code class=\"language-text\">ProfilePage</code> z innymi propsami, React odpala funkcję <code class=\"language-text\">ProfilePage</code> ponownie. Ale handler który wcześniej kliknęliśmy “należy“ do poprzedniego renderu z jego własną wartością <code class=\"language-text\">user</code> i callbackiem <code class=\"language-text\">showMessage</code> który go czyta. Wszystkie one pozostają niezmienione.</p>\n<p>To dlatego w wersji <a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo</a> z funkcją, kliknięcie Follow w profil Sophie, a następnie zmiana wyboru na Sunil pokaże alert <code class=\"language-text\">&#39;Followed Sophie&#39;</code>:</p>\n<p><img src=\"/84396c4b3982827bead96912a947904e/fix.gif\" alt=\"Demonstracja poprawnego zachowania\">\nTo działanie jest poprawne. <em>(Ale i tak możesz chcieć zacząć <a href=\"https://mobile.twitter.com/threepointone\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">obserwować też Sunil</a>!)</em></p>\n<hr>\n<p>Teraz rozumiemy największą różnicę między funkcjami a klasami w React’cie:</p>\n<blockquote>\n<p><strong>Funkcyjne komponenty chwytają renderowane wartości.</strong></p>\n</blockquote>\n<p><strong>Przy Hook’ach ta sama zasada działa również dla state’u.</strong> Rozważmy ten przykład:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MessageThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You said: '</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSendClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleMessageChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleMessageChange<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSendClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Send</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(Tutaj znajdziesz <a href=\"https://codesandbox.io/s/93m5mz9w24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">live demo</a>.)</p>\n<p>Mimo, że nie jest to najlepszy UI dla apki do komunikacji, pokazuje tę samą rzecz: jeżeli wysyłam jakąś wiadomość to komponentowi nie powinno się mieszać która wiadomość ma zostać wysłana. <code class=\"language-text\">Message</code> z funkcyjnego komponentu łapie state który “należy“ do renderu, który zaś zwraca click handler wywołany przez przeglądarkę. <code class=\"language-text\">Message</code> jest więc ustawiony na to co, znajduje się w inpucie kiedy kliknę “Send“.</p>\n<hr>\n<p>Wiemy więc że funkcje w React’cie domyślnie łapią propsy i state. <strong>A co jeżeli chcemy czytać ostatni props albo state który nie należy do tego renderu?</strong> Co jeżeli chcemy <a href=\"https://dev.to/scastiel/react-hooks-get-the-current-state-back-to-the-future-3op2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“czytać je z przyszłości”</a>?</p>\n<p>W klasie robi się to tak, że czyta się <code class=\"language-text\">this.props</code> albo <code class=\"language-text\">this.state</code> ponieważ <code class=\"language-text\">this</code> samo w sobie jest mutowalne. React je mutuje. W funkcyjnych komponentach też możesz mieć mutowalne wartości, które są współdzielone między wszystkimi renderami komponentu. Nazywa się to “ref“:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// You can read or write `ref.current`.</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Jednak musiałbyś radzić sobie z tym sam.</p>\n<p>Ref <a href=\"https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">odgrywa taką samą rolę</a> jak pole instancyjne. Jest wyjściem ewakuacyjnym do świata mutowalnego i imperatywnego. Możesz kojarzyć “DOM refs“ ale koncepcja jest dużo bardziej ogólna. To jest tylko pudełko, w którym możesz coś umieścić.</p>\n<p>Nawet wizualnie <code class=\"language-text\">this.something</code> wygląda jak lustrzane odbicie <code class=\"language-text\">something.current</code>. Oba reprezentują ten sam koncept.</p>\n<p>Domyślnie, React nie tworzy refów dla ostatniech propsów i state’u w komponentach funkcyjnych. W wielu przypadkach ich nie potrzebujesz i przypisywanie ich byłoby niepotrzebną pracą. Jeśli chcesz, możesz śledzić tę wartość manualnie:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MessageThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> latestMessage <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You said: '</span> <span class=\"token operator\">+</span> latestMessage<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSendClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>showMessage<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleMessageChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    latestMessage<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Jeżeli zczytamy <code class=\"language-text\">message</code> z <code class=\"language-text\">showMessage</code>, to zobaczymy wiadomość w tym samym czasie, w którym kliknęliśmy przycisk Send. Ale kiedy czytamy <code class=\"language-text\">latestMessage.current</code>, to dostajemy ostatnią wartość - nawet jeżeli będziemy dalej pisać po tym jak kliknęliśmy w przycisk Send.</p>\n<p>Możesz porównać <a href=\"https://codesandbox.io/s/93m5mz9w24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">oba</a> <a href=\"https://codesandbox.io/s/ox200vw8k9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dema</a> żeby zobaczyć różnicę na właśne oczy. Ref jest sposobem na “wypisanie“ się z tej regularności renderowania i w niektórych przypadkach może być pomocne.</p>\n<p>Ogólnie powinniśmy unikać czytania i zmiany refów <em>podczas</em> renderowania, ponieważ są one mutowalne. Zależy nam, aby renderowanie było przewidywalne. <strong>Jednak jeżeli chcemy dostać ostatnią wartość jakiegoś konkretnego prosu czy state’u to manualne aktualizowanie refów może być denerwujące.</strong> Możemy to zautomatyzować poprzez użycie efektu:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MessageThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Keep track of the latest value.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> latestMessage <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    latestMessage<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You said: '</span> <span class=\"token operator\">+</span> latestMessage<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(Tutaj znajdziesz <a href=\"https://codesandbox.io/s/yqmnz7xy8x\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo</a>.)</p>\n<p>Robimy przypisanie <em>wewnątrz</em> efektu, dzięki czemu wartość ref zmienia się tylko kiedy DOM zostanie zaktualizowany. To zapewnia, że nasza mutacja nie zepsuje funkcjonalności jak <a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Time Slicing i Suspense</a>, które polegają na przerywalnym renderze.</p>\n<p>Używanie ref w takim kontekście nie jest zbytnio popularne. <strong>Chwytanie propsów czy state’u jest zazwyczaj lepszym wyborem.</strong> Jednak może to być pomocne, kiedy używa się <a href=\"/making-setinterval-declarative-with-react-hooks/\">imperatywnych API</a> jak interwały czy subskrybcje. Pamiętaj, że możesz w ten sposób śledzić <em>każdą</em> wartość - prop, state, cały objekt props czy nawet funkcję.</p>\n<p>Ten wzorzec może być pomocny przy optymalizacji - na przykład kiedy <code class=\"language-text\">useCallback</code> jest zbyt często zmieniany. Jednak <a href=\"https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">użycie reducera</a> jest zwykle <a href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lepszą opcją</a>. (Temat na artykuł na przyszłość!)</p>\n<hr>\n<p>W tym artykule przyjrzeliśmy się powszechnemu niewłaściwemu sposobowi używania klas oraz temu jak domknięcia pomagają nam to naprawić. Jak mogłeś jednak zauważyć, kiedy próbujesz optymalizować Hooki przez określenie tablicy zależności, możesz trafić na bugi związane ze starymi domknięciami. Czy to oznacza że domknięcia są problemem? Nie sądzę.</p>\n<p>Tak jak widzieliśmy to wyżej, to właśnie domknięcia pomagają nam <em>naprawić</em> pewne subtelne problemy które ciężko zauważyć. Tak samo ułatwiają one pisanie kodu, który będzie działać poprawnie w <a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Concurrent Mode</a>. Jest to możliwe przez to, że logika wewnątrz komponentu domyka się na właściwych propsach i state’cie, z którymi został wyrenderowany.</p>\n<p>We wszystkich przypadkach które widziałem do tej pory, ten problem ze  <strong>“starymi domknięciami“ zdarzał się przez niewłaściwe założenie że “funkcje się nie zmieniają” albo że “propsy są zawsze takie same“.</strong> Tak nie jest, a ten artykuł mam nadzieję pomaga to wyjaśnić.</p>\n<p>Funkcje domykają się na ich propsach i state’cie - dlatego właśnie ich tożsamość jest tak ważna. To nie jest błąd, a cecha funkcyjnych komponentów. Funkcje nie powinny być wykluczane z “tablicy zależności“ przykładowo dla <code class=\"language-text\">useEffect</code> albo <code class=\"language-text\">useCallback</code>. (Poprawnym rozwiązaniem jest albo użycie <code class=\"language-text\">useReducer</code>, albo rozwiązania <code class=\"language-text\">useRef</code> przedstawionego wyżej - wkrótce udokumentujemy jak wybrać pomiędzy jednym a drugim).</p>\n<p>Kiedy większość naszego React’owego kodu piszemy za pomocą funkcji, musimy dostosować naszą intuicję dotyczącą <a href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">optymalizacji kodu</a> i <a href=\"https://github.com/facebook/react/issues/14920\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tego co może zmienić się w czasie.</a>.</p>\n<p>Jak <a href=\"https://mobile.twitter.com/EphemeralCircle/status/1099095063223812096\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">przedstawił to Fredrik</a>:</p>\n<blockquote>\n<p>Najlepszą mentalną regułę jaką można sobie wyobrazić dla Hooków to ”pisz je tak, jakby wszystko mogło się zmienić w czasie”</p>\n</blockquote>\n<p>Funkcje nie są wyjątkiem od tej reguły. Trochę czasu musi upłynąć zanim stanie się to wiedzą powszechną w React’owych materiałach do nauki. Wymaga to lekkiego przestawienia się z myślenia w klasach, ale mam nadzieję, że ten artykuł pomoże spojrzeć na to z nowej, świeżej perspektywy.</p>\n<p>React’owe funkcje zawsze chwytają swoją wartość - teraz już wiemy dlaczego.</p>\n<p><img src=\"/fc3bddf6d4ca14bc77917ac0cfad3608/pikachu.gif\" alt=\"Uśmiechnięty Pikachu\"></p>\n<p>Są one zupełnie innym Pokemonem.</p>","timeToRead":13,"frontmatter":{"title":"Czym różnią się komponenty funkcyjne od klasowych?","date":"March 03, 2019","spoiler":"To są zupełnie różne Pokemony.","cta":null},"fields":{"slug":"/pl/how-are-function-components-different-from-classes/","langKey":"pl"}}},"pageContext":{"slug":"/pl/how-are-function-components-different-from-classes/","translations":["es","fr","ja","ko","pl","pt-br","zh-hans"],"translatedLinks":[]}}}