{"componentChunkName":"component---src-templates-blog-post-js","path":"/pl/why-do-we-write-super-props/","result":{"data":{"site":{"siteMetadata":{"title":"Overreacted","author":"Dan Abramov"}},"markdownRemark":{"id":"e6664844-51ae-5ca8-a104-dab461a30847","html":"<p>SÅ‚yszaÅ‚em, Å¼e <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a> sÄ… teraz na fali. Na przekÃ³r temu zacznÄ™ od ciekawostek dotyczÄ…cych komponentÃ³w pisanych jako <em>klasy</em>. Co ty na to!</p>\n<p><strong>Te haczyki <em>nie</em> sÄ… istotne, Å¼eby wydajnie uÅ¼ywaÄ‡Â React. MoÅ¼e wydadzÄ… ci siÄ™ zabawne jeÅ›li lubisz zgÅ‚Ä™biaÄ‡ jak coÅ›Â dokÅ‚adnie dziaÅ‚a.</strong></p>\n<p>Teraz pierwszy z nich.</p>\n<hr>\n<p>W swoim Å¼yciu napisaÅ‚em <code class=\"language-text\">super(props)</code> wiÄ™cej razy niÅ¼ chciaÅ‚bym wiedzieÄ‡:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>OczywiÅ›cie <a href=\"https://github.com/tc39/proposal-class-fields\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">propozycja pÃ³l w klasach</a> pozwala skrÃ³ciÄ‡Â tÄ™ ceremoniÄ™:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Taka skÅ‚adnia byÅ‚a <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">planowana</a> kiedy React 0.13 dodaÅ‚ wsparcie dla prostych klas w roku 2015. Definiowanie funkcji <code class=\"language-text\">constructor</code> i woÅ‚anie <code class=\"language-text\">super(props)</code> byÅ‚o zawsze uwaÅ¼ane jako rozwiÄ…zanie tymczasowe aÅ¼ do momentu kiedy pola w klasach stanÄ… siÄ™ wygodnÄ… alternatywÄ…. </p>\n<p>WrÃ³Ä‡my do naszego przykÅ‚adu wykorzystujÄ…cego tylko skÅ‚adniÄ™ ES2015:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Dlaczego woÅ‚amy <code class=\"language-text\">super</code>? Czy moÅ¼emy go <em>nie</em> wywoÅ‚ywaÄ‡? A jeÅ¼eli juÅ¼Â musimy to co stanie siÄ™ jeÅ›li nie przekaÅ¼emy <code class=\"language-text\">props</code>? Czy sÄ…Â jakieÅ›Â inne argumenty?</strong> SprawdÅºmy to.</p>\n<hr>\n<p>W JavaScript <code class=\"language-text\">super</code> odnoÅ›i siÄ™Â do konstruktora klasy nadrzÄ™dnej. (W naszym przykÅ‚adzie wskazuje na implementacjÄ™ <code class=\"language-text\">React.Component</code>.)</p>\n<p>Co istotne w konstruktorze nie moÅ¼na uÅ¼ywaÄ‡ <code class=\"language-text\">this</code> <em>dopÃ³ki</em> nie wywoÅ‚amy konstruktora nadrzÄ™dnego. JavaScript nie pozwoli na coÅ›Â takiego:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ğŸ”´ Jeszcze nie moÅ¼esz uÅ¼ywaÄ‡ `this`</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// âœ… Teraz juÅ¼ moÅ¼na</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Istnieje dobry powÃ³d dlaczego JavaScript wymaga wywoÅ‚ania konstruktora nadrzÄ™dnego zanim bÄ™dzie moÅ¼na uÅ¼yÄ‡Â sÅ‚owa kluczowego <code class=\"language-text\">this</code>. WyobraÅºmy sobie takÄ… hierarchiÄ™Â klas:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ğŸ”´ Tak nie wolno, przeczytaj poniÅ¼ej dlaczego</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Witajcie przyjaciele!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>WyobraÅº sobie, Å¼e uÅ¼ycie <code class=\"language-text\">this</code> zanim wywoÅ‚amy <code class=\"language-text\">super</code> <em>byÅ‚oby</em> dozwolone. MiesiÄ…c pÃ³Åºniej moglibyÅ›my zmieniÄ‡ <code class=\"language-text\">greetColleagues</code> tak, Å¼eby zawieraÅ‚o imiÄ™Â osoby w wiadomoÅ›ci na powitanie:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Witajcie przyjaciele!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nazywam siÄ™ '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', miÅ‚o ciÄ™ poznaÄ‡!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>ZapomnieliÅ›my jednak, Å¼e <code class=\"language-text\">this.greetColleagues()</code> jest wywoÅ‚ywane zanim <code class=\"language-text\">super()</code> miaÅ‚o okazjÄ™ ustawiÄ‡ <code class=\"language-text\">this.name</code>. Tak wiÄ™c <code class=\"language-text\">this.name</code> nie jest jeszcze nawet zdefiniowane! Jak widzisz taki kod moÅ¼e byÄ‡ trudny do zrozumienia. </p>\n<p>Å»eby uniknÄ…Ä‡Â takich puÅ‚apek, <strong>JavaScript wymaga, Å¼e przed uÅ¼yciem <code class=\"language-text\">this</code> w konstruktorze, najpierw <em>trzeba</em> wywoÅ‚aÄ‡ <code class=\"language-text\">super</code>.</strong> Niech rodziÄ‡Â zrobi co trzeba! To samo ograniczenie ma zastosowanie w komponentach React definiowanych jako klasy:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// âœ… TeraÅ¼ moÅ¼na uÅ¼ywaÄ‡ `this`</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>ZostaÅ‚o nam jeszcze jedno pytanie: dlaczego przekazujemy <code class=\"language-text\">props</code>?</p>\n<hr>\n<p>MoÅ¼e wydawaÄ‡Â ci siÄ™, Å¼e przekazywanie <code class=\"language-text\">props</code> do <code class=\"language-text\">super</code> jest konieczne, Å¼eby bazowy konstruktor <code class=\"language-text\">React.Component</code> mÃ³gÅ‚ inicjalizowaÄ‡ <code class=\"language-text\">this.props</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// WewnÄ…trz React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nie jest to dalekie od prawdy â€” rzeczywiÅ›cie, tak <a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wÅ‚aÅ›nie robi</a>.</p>\n<p>Jednak nawet jeÅ¼eli wywoÅ‚asz <code class=\"language-text\">super()</code> bez przekazania argumentu <code class=\"language-text\">props</code>, nadal bÄ™dziesz miaÅ‚Â dostÄ™p do <code class=\"language-text\">this.props</code> w metodzie <code class=\"language-text\">render</code> i w pozostaÅ‚ych metodach. (SprawdÅºÂ to jeÅ¼eli mi nie wierzysz!)</p>\n<p>W jaki sposÃ³b <em>to</em> dziaÅ‚a? Okazuje siÄ™, Å¼e <strong>React rÃ³wnieÅ¼ przypisuje <code class=\"language-text\">props</code> do instancji klasy zaraz po wywoÅ‚aniu <em>twojego</em> konstruktora:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token comment\">// WewnÄ…trz React</span>\n  <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tak wiÄ™c nawet jeÅ¼eli zapomnisz przekazaÄ‡ <code class=\"language-text\">props</code> do <code class=\"language-text\">super()</code>, React ustawi je za ciebie chwilÄ™ pÃ³Åºniej. Dzieje siÄ™ to nie bez powodu. </p>\n<p>Kiedy React dodaÅ‚Â wsparcie dla klas, nie byÅ‚o to tylko wsparcie klas ES6. Wtedy nie byÅ‚o jeszcze <a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jasne</a> jak duÅ¼y sukces odniosÄ… ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript i inne sposoby definiowania komponentÃ³w. Dlatego React celowo nie okreÅ›laÅ‚ czy wywoÅ‚anie <code class=\"language-text\">super()</code> ma byÄ‡ wymagane â€” pomimo tego, Å¼e jest tak w klasach ES6.</p>\n<p>Czy w takim razie moÅ¼esz uÅ¼ywaÄ‡Â samego <code class=\"language-text\">super()</code> zamiast <code class=\"language-text\">super(props)</code>?</p>\n<p><strong>Prawdopodobnie nie poniewaÅ¼ jest to mylÄ…ce.</strong> OczywiÅ›cie React za chwilÄ™ przypisze <code class=\"language-text\">this.props</code> <em>po</em> wywoÅ‚aniu twojego konstruktora. Jednak <code class=\"language-text\">this.props</code> byÅ‚oby <code class=\"language-text\">undefined</code> <em>pomiÄ™dzy</em> wywoÅ‚aniem <code class=\"language-text\">super</code> aÅ¼ do koÅ„ca twojego konstruktora:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// WewnÄ…trz React</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// W twoim kodzie</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ğŸ˜¬ ZapomnieliÅ›my przekazaÄ‡ props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// âœ… {}</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ğŸ˜¬ undefined </span></span>  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Jeszcze wiÄ™kszym wyzwaniem bÄ™dzieÂ debugowanie jeÅ¼eli dzieje siÄ™ tak wewnÄ…trz metody wywoÅ‚ywanej <em>w</em> konstruktorze. <strong>Dlatego zalecam przekazywanie <code class=\"language-text\">super(props)</code> zawsze, niezaleÅ¼nie od tego czy jest to konieczne w danym momencie:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// âœ… Przekazujemy props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// âœ… {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// âœ… {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>DziÄ™ki temu <code class=\"language-text\">this.props</code> jest ustawione przed zakoÅ„czeniem wykonywania siÄ™ konstruktora. </p>\n<hr>\n<p>Jest jeszcze jedna ciekawostka dla tych, ktÃ³rzy uÅ¼ywajÄ… Reactâ€™a od dawna.</p>\n<p>ByÄ‡ moÅ¼e wpadÅ‚o ci w oko, Å¼e kiedy uÅ¼ywasz Context API w klasach (niezaleÅ¼nie od tego czy starego <code class=\"language-text\">contextTypes</code> czy nowego API <code class=\"language-text\">contextType</code> dodanego w React 16.6), <code class=\"language-text\">context</code> przekazywany jest jako drugi argument konstruktora. </p>\n<p>Dlaczego wiÄ™c nie piszemy <code class=\"language-text\">super(props, context)</code>? MoglibyÅ›my, ale poniewaÅ¼ context uÅ¼ywany jest rzadziej to w konsekwencji problem ten nie pojawia siÄ™ rÃ³wnie czÄ™sto. </p>\n<p><strong>Wraz z pojawieniem siÄ™ propozycji pÃ³l w klasach caÅ‚y ten problem w zasadzie przestaje mieÄ‡Â znaczenie.</strong> Kiedy brak zdefiniowanego konstruktora wszystkie argumenty sÄ… przekazywane automatycznie. WÅ‚aÅ›nie dziÄ™ki temu wyraÅ¼enie takie jak <code class=\"language-text\">state = {}</code> moÅ¼e zawieraÄ‡Â odniesienia do <code class=\"language-text\">this.props</code> lub <code class=\"language-text\">this.context</code> jeÅ¼eli jest to konieczne.</p>\n<p>A kiedy zaczynamy uÅ¼ywaÄ‡ Hooks nie mamy nawet do czynienia z <code class=\"language-text\">super</code> ani z <code class=\"language-text\">this</code>, ale to juÅ¼ temat na inny dzieÅ„.</p>","timeToRead":5,"frontmatter":{"title":"Dlaczego piszemy super(props)?","date":"November 30, 2018","spoiler":"Na koÅ„cu bÄ™dzie zwrot akcji.","cta":null},"fields":{"slug":"/pl/why-do-we-write-super-props/","langKey":"pl"}}},"pageContext":{"slug":"/pl/why-do-we-write-super-props/","translations":["cs","de","es","fa","fr","hu","it","my","ja","nl","nb","pl","pt-br","sk","sr","th","tr","uk","vi","zh-hans","zh-hant"],"translatedLinks":[]}}}