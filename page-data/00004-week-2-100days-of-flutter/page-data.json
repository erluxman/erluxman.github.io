{"componentChunkName":"component---src-templates-blog-post-js","path":"/00004-week-2-100days-of-flutter/","result":{"data":{"site":{"siteMetadata":{"title":"erluxman","author":"Laxman Bhattarai"}},"markdownRemark":{"id":"695f53d7-23fa-5399-a341-1141e59312bd","html":"<h2 id=\"day8-listviewseparated\"><a href=\"#day8-listviewseparated\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#Day8 ListView.separated()</h2>\n<p>If you have you been adding <code class=\"language-text\">Container()</code> with <code class=\"language-text\">maxwidth</code> at the bottom of <code class=\"language-text\">ListItem</code> to put divider line like me, you have been doing it wrong all the time.</p>\n<p>Flutter has <code class=\"language-text\">ListView.separated</code> just for that purpose. We have to also provide <code class=\"language-text\">separatorBuilder</code> in addition to what we already passed while using <code class=\"language-text\">ListView.builder</code></p>\n<p><strong>Bonus üçæüéÅüéäüéâ : You do not have to check if the item is last in order not to draw divider after the last item.</strong></p>\n<p><a href=\"https://dartpad.dartlang.org/31ec967b140ac6a5795c38ea4bdfd9a2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">try in dartpad</a></p>\n<p><img src=\"https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/08separatedlist.png\" alt=\"separated\"></p>\n<h2 id=\"day9-passing-function-as-parameter\"><a href=\"#day9-passing-function-as-parameter\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#Day9 Passing Function as parameter</h2>\n<p>We can simply pass a <code class=\"language-text\">function</code> as <code class=\"language-text\">parameter</code> like we pass a variable. When we want to call the passed function from calling function, we just call it with <code class=\"language-text\">()</code> at the end along with parameters if it accepts any.</p>\n<p><a href=\"https://dartpad.dev/fa46336f5c1b3287c6420d3b3a277178\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">try in dartpad</a></p>\n<p><img src=\"https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/09functionargument.png\" alt=\"functionargument\"></p>\n<hr>\n<h2 id=\"day10-relative-import--the-right-way-to-import-dart-files-we-have-in-our-lib-package\"><a href=\"#day10-relative-import--the-right-way-to-import-dart-files-we-have-in-our-lib-package\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#Day10 Relative Import : the right way to import <code class=\"language-text\">.dart</code> files we have in our lib package</h2>\n<p>Ever wondered what is the right way to import a file in your own package?</p>\n<p>Prefer relative imports to absolute imports.</p>\n<p>Why?</p>\n<ul>\n<li>It‚Äôs shorter and cleaner.</li>\n<li>We can easily differentiate our files and third-party ones.</li>\n<li>It makes sense, doesn‚Äôt it?</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/10import.png\" alt=\"import\"></p>\n<h2 id=\"day11-reusing-text-style\"><a href=\"#day11-reusing-text-style\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#Day11 Reusing Text Style</h2>\n<p>Tired of defining <code class=\"language-text\">textStyle</code> everytime you want to customize <code class=\"language-text\">Text</code>? <strong>Even worse</strong> if you have multiple theme (<strong>dark, light, full black theme etc</strong>).</p>\n<p>just use</p>\n<p><code class=\"language-text\">Theme.of(context).textTheme.title</code></p>\n<p>where there are other styles like <code class=\"language-text\">title</code> inside <code class=\"language-text\">textTheme</code>.</p>\n<p><a href=\"https://dartpad.dartlang.org/5270714ce97853fc36db1b17c255c999\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">try in dartpad with theme example</a></p>\n<p><img src=\"https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/11texttheme.png\" alt=\"texttheme\"></p>\n<h2 id=\"day12-use-literal-to-initialize-growable-collections\"><a href=\"#day12-use-literal-to-initialize-growable-collections\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#Day12 Use Literal to initialize growable collections</h2>\n<p>If we are to initialize growable collection, use literal initialization rather than with constructors.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Good\nvar points = [];\nvar addresses = {};\n\n// Bad\nvar points = List();\nvar addresses = Map();\n\n\n// With type argument\n\n// Good\nvar points = &lt;Point&gt;[];\nvar addresses = &lt;String, Address&gt;{};\n\n// Bad\nvar points = List&lt;Point&gt;();\nvar addresses = Map&lt;String, Address&gt;();</code></pre></div>\n<h2 id=\"day13-fat-arrow-functions\"><a href=\"#day13-fat-arrow-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#Day13 Fat arrow functions</h2>\n<p>We can use fat arrow <code class=\"language-text\">=&gt;</code> members (<code class=\"language-text\">function, getter,setter</code>) in dart.</p>\n<p>I would not use <code class=\"language-text\">=&gt;</code> if the declaration is not <strong>ONE LINER</strong>. But few lines are OK.</p>\n<p><a href=\"https://dartpad.dev/76922028eccb4535f0cdddc8e4b17aa1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">try on dartpad</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">void main() {\nUser()\n    ..firstName = &quot;Laxman&quot;\n    ..lastName = &quot; Bhattarai&quot;\n    ..age = 18\n    ..printUser();\n}\n\nclass User {\nString firstName;\nString lastName;\nDateTime birthday;\n\nString get fullName =&gt; firstName + lastName;\n\nset age(int age) =&gt;  birthday = DateTime.now().subtract(Duration(days: age * 365));\n\nint get age =&gt; DateTime.now().year - birthday.year;\n\nbool get isAdult =&gt; age &gt;= 18;\n\nprintUser() =&gt; print(fullName + &quot; is a ${isAdult ? &quot;Adult&quot; : &quot;Child&quot;}&quot;);\n}</code></pre></div>\n<h2 id=\"day14-fractionallysizedbox\"><a href=\"#day14-fractionallysizedbox\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#Day14 FractionallySizedBox</h2>\n<p>Ever wanted the widget to have height and width exactly in the same proportion to it‚Äôs screen‚Äôs height and width?</p>\n<p>FractionallySizedBox is build exactly for that use case. Just give it the fraction you need for your height and width and it will handle everything else. The fraction value will range between 0.0 to 1.0</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FractionallySizedBox(\n            widthFactor: 0.5,\n            heightFactor: 0.5,\n            child: Container(color: Colors.green),\n        )</code></pre></div>\n<p><a href=\"https://codepen.io/erluxman/pen/rNOLOzG\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">try on codepen</a></p>\n<p><img src=\"https://raw.githubusercontent.com/erluxman/awesomefluttertips/master/assets/14fractionallysizedbox.gif\" alt=\"fractionally\"></p>","timeToRead":3,"frontmatter":{"title":"Flutter Tips 8-14","date":"April 18, 2020","spoiler":"Second batch of 7 tips and tricks on the series 100DaysOfFlutter.","cta":null},"fields":{"slug":"/00004-week-2-100days-of-flutter/","langKey":"en"}}},"pageContext":{"slug":"/00004-week-2-100days-of-flutter/","previous":{"fields":{"slug":"/00003-week1-100-days-of-flutter/","langKey":"en","directoryName":"00003-week1-100-days-of-flutter"},"frontmatter":{"title":"Flutter Tips 1-7"}},"next":{"fields":{"slug":"/00005-week-3-100-days-of-flutter/","langKey":"en","directoryName":"00005-week-3-100-days-of-flutter"},"frontmatter":{"title":"Flutter Tips 15-21"}},"translations":[],"translatedLinks":[]}}}